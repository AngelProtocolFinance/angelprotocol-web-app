/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../../common";

export declare namespace AngelCoreStruct {
  export type BeneficiaryDataStruct = {
    endowId: PromiseOrValue<BigNumberish>;
    fundId: PromiseOrValue<BigNumberish>;
    addr: PromiseOrValue<string>;
  };

  export type BeneficiaryDataStructOutput = [number, BigNumber, string] & {
    endowId: number;
    fundId: BigNumber;
    addr: string;
  };

  export type BeneficiaryStruct = {
    data: AngelCoreStruct.BeneficiaryDataStruct;
    enumData: PromiseOrValue<BigNumberish>;
  };

  export type BeneficiaryStructOutput = [
    AngelCoreStruct.BeneficiaryDataStructOutput,
    number
  ] & { data: AngelCoreStruct.BeneficiaryDataStructOutput; enumData: number };

  export type CategoriesStruct = {
    sdgs: PromiseOrValue<BigNumberish>[];
    general: PromiseOrValue<BigNumberish>[];
  };

  export type CategoriesStructOutput = [BigNumber[], BigNumber[]] & {
    sdgs: BigNumber[];
    general: BigNumber[];
  };

  export type DurationDataStruct = {
    height: PromiseOrValue<BigNumberish>;
    time: PromiseOrValue<BigNumberish>;
  };

  export type DurationDataStructOutput = [BigNumber, BigNumber] & {
    height: BigNumber;
    time: BigNumber;
  };

  export type DurationStruct = {
    enumData: PromiseOrValue<BigNumberish>;
    data: AngelCoreStruct.DurationDataStruct;
  };

  export type DurationStructOutput = [
    number,
    AngelCoreStruct.DurationDataStructOutput
  ] & { enumData: number; data: AngelCoreStruct.DurationDataStructOutput };

  export type EndowmentFeeStruct = {
    payoutAddress: PromiseOrValue<string>;
    feePercentage: PromiseOrValue<BigNumberish>;
    active: PromiseOrValue<boolean>;
  };

  export type EndowmentFeeStructOutput = [string, BigNumber, boolean] & {
    payoutAddress: string;
    feePercentage: BigNumber;
    active: boolean;
  };

  export type VeTypeDataStruct = {
    value: PromiseOrValue<BigNumberish>;
    scale: PromiseOrValue<BigNumberish>;
    slope: PromiseOrValue<BigNumberish>;
    power: PromiseOrValue<BigNumberish>;
  };

  export type VeTypeDataStructOutput = [
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber
  ] & {
    value: BigNumber;
    scale: BigNumber;
    slope: BigNumber;
    power: BigNumber;
  };

  export type VeTypeStruct = {
    ve_type: PromiseOrValue<BigNumberish>;
    data: AngelCoreStruct.VeTypeDataStruct;
  };

  export type VeTypeStructOutput = [
    number,
    AngelCoreStruct.VeTypeDataStructOutput
  ] & { ve_type: number; data: AngelCoreStruct.VeTypeDataStructOutput };

  export type DaoTokenDataStruct = {
    existingCw20Data: PromiseOrValue<string>;
    newCw20InitialSupply: PromiseOrValue<BigNumberish>;
    newCw20Name: PromiseOrValue<string>;
    newCw20Symbol: PromiseOrValue<string>;
    bondingveveType: AngelCoreStruct.VeTypeStruct;
    bondingveName: PromiseOrValue<string>;
    bondingveSymbol: PromiseOrValue<string>;
    bondingveDecimals: PromiseOrValue<BigNumberish>;
    bondingveReserveDenom: PromiseOrValue<string>;
    bondingveReserveDecimals: PromiseOrValue<BigNumberish>;
    bondingveUnbondingPeriod: PromiseOrValue<BigNumberish>;
  };

  export type DaoTokenDataStructOutput = [
    string,
    BigNumber,
    string,
    string,
    AngelCoreStruct.VeTypeStructOutput,
    string,
    string,
    BigNumber,
    string,
    BigNumber,
    BigNumber
  ] & {
    existingCw20Data: string;
    newCw20InitialSupply: BigNumber;
    newCw20Name: string;
    newCw20Symbol: string;
    bondingveveType: AngelCoreStruct.VeTypeStructOutput;
    bondingveName: string;
    bondingveSymbol: string;
    bondingveDecimals: BigNumber;
    bondingveReserveDenom: string;
    bondingveReserveDecimals: BigNumber;
    bondingveUnbondingPeriod: BigNumber;
  };

  export type DaoTokenStruct = {
    token: PromiseOrValue<BigNumberish>;
    data: AngelCoreStruct.DaoTokenDataStruct;
  };

  export type DaoTokenStructOutput = [
    number,
    AngelCoreStruct.DaoTokenDataStructOutput
  ] & { token: number; data: AngelCoreStruct.DaoTokenDataStructOutput };

  export type DaoSetupStruct = {
    quorum: PromiseOrValue<BigNumberish>;
    threshold: PromiseOrValue<BigNumberish>;
    votingPeriod: PromiseOrValue<BigNumberish>;
    timelockPeriod: PromiseOrValue<BigNumberish>;
    expirationPeriod: PromiseOrValue<BigNumberish>;
    proposalDeposit: PromiseOrValue<BigNumberish>;
    snapshotPeriod: PromiseOrValue<BigNumberish>;
    token: AngelCoreStruct.DaoTokenStruct;
  };

  export type DaoSetupStructOutput = [
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    AngelCoreStruct.DaoTokenStructOutput
  ] & {
    quorum: BigNumber;
    threshold: BigNumber;
    votingPeriod: BigNumber;
    timelockPeriod: BigNumber;
    expirationPeriod: BigNumber;
    proposalDeposit: BigNumber;
    snapshotPeriod: BigNumber;
    token: AngelCoreStruct.DaoTokenStructOutput;
  };

  export type DelegateStruct = {
    addr: PromiseOrValue<string>;
    expires: PromiseOrValue<BigNumberish>;
  };

  export type DelegateStructOutput = [string, BigNumber] & {
    addr: string;
    expires: BigNumber;
  };

  export type SettingsControllerStruct = {
    strategies: AngelCoreStruct.DelegateStruct;
    allowlistedBeneficiaries: AngelCoreStruct.DelegateStruct;
    allowlistedContributors: AngelCoreStruct.DelegateStruct;
    maturityAllowlist: AngelCoreStruct.DelegateStruct;
    maturityTime: AngelCoreStruct.DelegateStruct;
    withdrawFee: AngelCoreStruct.DelegateStruct;
    depositFee: AngelCoreStruct.DelegateStruct;
    balanceFee: AngelCoreStruct.DelegateStruct;
    name: AngelCoreStruct.DelegateStruct;
    image: AngelCoreStruct.DelegateStruct;
    logo: AngelCoreStruct.DelegateStruct;
    categories: AngelCoreStruct.DelegateStruct;
    splitToLiquid: AngelCoreStruct.DelegateStruct;
    ignoreUserSplits: AngelCoreStruct.DelegateStruct;
  };

  export type SettingsControllerStructOutput = [
    AngelCoreStruct.DelegateStructOutput,
    AngelCoreStruct.DelegateStructOutput,
    AngelCoreStruct.DelegateStructOutput,
    AngelCoreStruct.DelegateStructOutput,
    AngelCoreStruct.DelegateStructOutput,
    AngelCoreStruct.DelegateStructOutput,
    AngelCoreStruct.DelegateStructOutput,
    AngelCoreStruct.DelegateStructOutput,
    AngelCoreStruct.DelegateStructOutput,
    AngelCoreStruct.DelegateStructOutput,
    AngelCoreStruct.DelegateStructOutput,
    AngelCoreStruct.DelegateStructOutput,
    AngelCoreStruct.DelegateStructOutput,
    AngelCoreStruct.DelegateStructOutput
  ] & {
    strategies: AngelCoreStruct.DelegateStructOutput;
    allowlistedBeneficiaries: AngelCoreStruct.DelegateStructOutput;
    allowlistedContributors: AngelCoreStruct.DelegateStructOutput;
    maturityAllowlist: AngelCoreStruct.DelegateStructOutput;
    maturityTime: AngelCoreStruct.DelegateStructOutput;
    withdrawFee: AngelCoreStruct.DelegateStructOutput;
    depositFee: AngelCoreStruct.DelegateStructOutput;
    balanceFee: AngelCoreStruct.DelegateStructOutput;
    name: AngelCoreStruct.DelegateStructOutput;
    image: AngelCoreStruct.DelegateStructOutput;
    logo: AngelCoreStruct.DelegateStructOutput;
    categories: AngelCoreStruct.DelegateStructOutput;
    splitToLiquid: AngelCoreStruct.DelegateStructOutput;
    ignoreUserSplits: AngelCoreStruct.DelegateStructOutput;
  };

  export type SplitDetailsStruct = {
    max: PromiseOrValue<BigNumberish>;
    min: PromiseOrValue<BigNumberish>;
    defaultSplit: PromiseOrValue<BigNumberish>;
  };

  export type SplitDetailsStructOutput = [BigNumber, BigNumber, BigNumber] & {
    max: BigNumber;
    min: BigNumber;
    defaultSplit: BigNumber;
  };

  export type AccountStrategiesStruct = {
    locked_vault: PromiseOrValue<string>[];
    lockedPercentage: PromiseOrValue<BigNumberish>[];
    liquid_vault: PromiseOrValue<string>[];
    liquidPercentage: PromiseOrValue<BigNumberish>[];
  };

  export type AccountStrategiesStructOutput = [
    string[],
    BigNumber[],
    string[],
    BigNumber[]
  ] & {
    locked_vault: string[];
    lockedPercentage: BigNumber[];
    liquid_vault: string[];
    liquidPercentage: BigNumber[];
  };

  export type OneOffVaultsStruct = {
    locked: PromiseOrValue<string>[];
    lockedAmount: PromiseOrValue<BigNumberish>[];
    liquid: PromiseOrValue<string>[];
    liquidAmount: PromiseOrValue<BigNumberish>[];
  };

  export type OneOffVaultsStructOutput = [
    string[],
    BigNumber[],
    string[],
    BigNumber[]
  ] & {
    locked: string[];
    lockedAmount: BigNumber[];
    liquid: string[];
    liquidAmount: BigNumber[];
  };

  export type DonationsReceivedStruct = {
    locked: PromiseOrValue<BigNumberish>;
    liquid: PromiseOrValue<BigNumberish>;
  };

  export type DonationsReceivedStructOutput = [BigNumber, BigNumber] & {
    locked: BigNumber;
    liquid: BigNumber;
  };
}

export declare namespace AccountMessages {
  export type CreateEndowmentRequestStruct = {
    owner: PromiseOrValue<string>;
    withdrawBeforeMaturity: PromiseOrValue<boolean>;
    maturityTime: PromiseOrValue<BigNumberish>;
    maturityHeight: PromiseOrValue<BigNumberish>;
    name: PromiseOrValue<string>;
    categories: AngelCoreStruct.CategoriesStruct;
    tier: PromiseOrValue<BigNumberish>;
    endow_type: PromiseOrValue<BigNumberish>;
    logo: PromiseOrValue<string>;
    image: PromiseOrValue<string>;
    cw4_members: PromiseOrValue<string>[];
    kycDonorsOnly: PromiseOrValue<boolean>;
    threshold: PromiseOrValue<BigNumberish>;
    cw3MaxVotingPeriod: AngelCoreStruct.DurationStruct;
    allowlistedBeneficiaries: PromiseOrValue<string>[];
    allowlistedContributors: PromiseOrValue<string>[];
    splitMax: PromiseOrValue<BigNumberish>;
    splitMin: PromiseOrValue<BigNumberish>;
    splitDefault: PromiseOrValue<BigNumberish>;
    earningsFee: AngelCoreStruct.EndowmentFeeStruct;
    withdrawFee: AngelCoreStruct.EndowmentFeeStruct;
    depositFee: AngelCoreStruct.EndowmentFeeStruct;
    balanceFee: AngelCoreStruct.EndowmentFeeStruct;
    dao: AngelCoreStruct.DaoSetupStruct;
    createDao: PromiseOrValue<boolean>;
    proposalLink: PromiseOrValue<BigNumberish>;
    settingsController: AngelCoreStruct.SettingsControllerStruct;
    parent: PromiseOrValue<BigNumberish>;
    maturityAllowlist: PromiseOrValue<string>[];
    ignoreUserSplits: PromiseOrValue<boolean>;
    splitToLiquid: AngelCoreStruct.SplitDetailsStruct;
    referralId: PromiseOrValue<BigNumberish>;
  };

  export type CreateEndowmentRequestStructOutput = [
    string,
    boolean,
    BigNumber,
    BigNumber,
    string,
    AngelCoreStruct.CategoriesStructOutput,
    BigNumber,
    number,
    string,
    string,
    string[],
    boolean,
    BigNumber,
    AngelCoreStruct.DurationStructOutput,
    string[],
    string[],
    BigNumber,
    BigNumber,
    BigNumber,
    AngelCoreStruct.EndowmentFeeStructOutput,
    AngelCoreStruct.EndowmentFeeStructOutput,
    AngelCoreStruct.EndowmentFeeStructOutput,
    AngelCoreStruct.EndowmentFeeStructOutput,
    AngelCoreStruct.DaoSetupStructOutput,
    boolean,
    BigNumber,
    AngelCoreStruct.SettingsControllerStructOutput,
    number,
    string[],
    boolean,
    AngelCoreStruct.SplitDetailsStructOutput,
    BigNumber
  ] & {
    owner: string;
    withdrawBeforeMaturity: boolean;
    maturityTime: BigNumber;
    maturityHeight: BigNumber;
    name: string;
    categories: AngelCoreStruct.CategoriesStructOutput;
    tier: BigNumber;
    endow_type: number;
    logo: string;
    image: string;
    cw4_members: string[];
    kycDonorsOnly: boolean;
    threshold: BigNumber;
    cw3MaxVotingPeriod: AngelCoreStruct.DurationStructOutput;
    allowlistedBeneficiaries: string[];
    allowlistedContributors: string[];
    splitMax: BigNumber;
    splitMin: BigNumber;
    splitDefault: BigNumber;
    earningsFee: AngelCoreStruct.EndowmentFeeStructOutput;
    withdrawFee: AngelCoreStruct.EndowmentFeeStructOutput;
    depositFee: AngelCoreStruct.EndowmentFeeStructOutput;
    balanceFee: AngelCoreStruct.EndowmentFeeStructOutput;
    dao: AngelCoreStruct.DaoSetupStructOutput;
    createDao: boolean;
    proposalLink: BigNumber;
    settingsController: AngelCoreStruct.SettingsControllerStructOutput;
    parent: number;
    maturityAllowlist: string[];
    ignoreUserSplits: boolean;
    splitToLiquid: AngelCoreStruct.SplitDetailsStructOutput;
    referralId: BigNumber;
  };

  export type DepositRequestStruct = {
    id: PromiseOrValue<BigNumberish>;
    lockedPercentage: PromiseOrValue<BigNumberish>;
    liquidPercentage: PromiseOrValue<BigNumberish>;
  };

  export type DepositRequestStructOutput = [number, BigNumber, BigNumber] & {
    id: number;
    lockedPercentage: BigNumber;
    liquidPercentage: BigNumber;
  };

  export type ConfigResponseStruct = {
    owner: PromiseOrValue<string>;
    version: PromiseOrValue<string>;
    registrarContract: PromiseOrValue<string>;
    nextAccountId: PromiseOrValue<BigNumberish>;
    maxGeneralCategoryId: PromiseOrValue<BigNumberish>;
    subDao: PromiseOrValue<string>;
    gateway: PromiseOrValue<string>;
    gasReceiver: PromiseOrValue<string>;
  };

  export type ConfigResponseStructOutput = [
    string,
    string,
    string,
    BigNumber,
    BigNumber,
    string,
    string,
    string
  ] & {
    owner: string;
    version: string;
    registrarContract: string;
    nextAccountId: BigNumber;
    maxGeneralCategoryId: BigNumber;
    subDao: string;
    gateway: string;
    gasReceiver: string;
  };

  export type StateResponseStruct = {
    donationsReceived: AngelCoreStruct.DonationsReceivedStruct;
    closingEndowment: PromiseOrValue<boolean>;
    closingBeneficiary: AngelCoreStruct.BeneficiaryStruct;
  };

  export type StateResponseStructOutput = [
    AngelCoreStruct.DonationsReceivedStructOutput,
    boolean,
    AngelCoreStruct.BeneficiaryStructOutput
  ] & {
    donationsReceived: AngelCoreStruct.DonationsReceivedStructOutput;
    closingEndowment: boolean;
    closingBeneficiary: AngelCoreStruct.BeneficiaryStructOutput;
  };

  export type UpdateEndowmentDetailsRequestStruct = {
    id: PromiseOrValue<BigNumberish>;
    owner: PromiseOrValue<string>;
    name: PromiseOrValue<string>;
    categories: AngelCoreStruct.CategoriesStruct;
    logo: PromiseOrValue<string>;
    image: PromiseOrValue<string>;
    rebalance: LocalRegistrarLib.RebalanceParamsStruct;
  };

  export type UpdateEndowmentDetailsRequestStructOutput = [
    number,
    string,
    string,
    AngelCoreStruct.CategoriesStructOutput,
    string,
    string,
    LocalRegistrarLib.RebalanceParamsStructOutput
  ] & {
    id: number;
    owner: string;
    name: string;
    categories: AngelCoreStruct.CategoriesStructOutput;
    logo: string;
    image: string;
    rebalance: LocalRegistrarLib.RebalanceParamsStructOutput;
  };

  export type StrategyStruct = {
    vault: PromiseOrValue<string>;
    percentage: PromiseOrValue<BigNumberish>;
  };

  export type StrategyStructOutput = [string, BigNumber] & {
    vault: string;
    percentage: BigNumber;
  };
}

export declare namespace LocalRegistrarLib {
  export type RebalanceParamsStruct = {
    rebalanceLiquidProfits: PromiseOrValue<boolean>;
    lockedRebalanceToLiquid: PromiseOrValue<BigNumberish>;
    interestDistribution: PromiseOrValue<BigNumberish>;
    lockedPrincipleToLiquid: PromiseOrValue<boolean>;
    principleDistribution: PromiseOrValue<BigNumberish>;
    basis: PromiseOrValue<BigNumberish>;
  };

  export type RebalanceParamsStructOutput = [
    boolean,
    number,
    number,
    boolean,
    number,
    number
  ] & {
    rebalanceLiquidProfits: boolean;
    lockedRebalanceToLiquid: number;
    interestDistribution: number;
    lockedPrincipleToLiquid: boolean;
    principleDistribution: number;
    basis: number;
  };
}

export declare namespace AccountStorage {
  export type EndowmentStruct = {
    owner: PromiseOrValue<string>;
    name: PromiseOrValue<string>;
    categories: AngelCoreStruct.CategoriesStruct;
    tier: PromiseOrValue<BigNumberish>;
    endow_type: PromiseOrValue<BigNumberish>;
    logo: PromiseOrValue<string>;
    image: PromiseOrValue<string>;
    maturityTime: PromiseOrValue<BigNumberish>;
    strategies: AngelCoreStruct.AccountStrategiesStruct;
    oneoffVaults: AngelCoreStruct.OneOffVaultsStruct;
    rebalance: LocalRegistrarLib.RebalanceParamsStruct;
    kycDonorsOnly: PromiseOrValue<boolean>;
    pendingRedemptions: PromiseOrValue<BigNumberish>;
    proposalLink: PromiseOrValue<BigNumberish>;
    multisig: PromiseOrValue<string>;
    dao: PromiseOrValue<string>;
    daoToken: PromiseOrValue<string>;
    donationMatchActive: PromiseOrValue<boolean>;
    donationMatchContract: PromiseOrValue<string>;
    allowlistedBeneficiaries: PromiseOrValue<string>[];
    allowlistedContributors: PromiseOrValue<string>[];
    maturityAllowlist: PromiseOrValue<string>[];
    withdrawFee: AngelCoreStruct.EndowmentFeeStruct;
    depositFee: AngelCoreStruct.EndowmentFeeStruct;
    balanceFee: AngelCoreStruct.EndowmentFeeStruct;
    settingsController: AngelCoreStruct.SettingsControllerStruct;
    parent: PromiseOrValue<BigNumberish>;
    ignoreUserSplits: PromiseOrValue<boolean>;
    splitToLiquid: AngelCoreStruct.SplitDetailsStruct;
    referralId: PromiseOrValue<BigNumberish>;
  };

  export type EndowmentStructOutput = [
    string,
    string,
    AngelCoreStruct.CategoriesStructOutput,
    BigNumber,
    number,
    string,
    string,
    BigNumber,
    AngelCoreStruct.AccountStrategiesStructOutput,
    AngelCoreStruct.OneOffVaultsStructOutput,
    LocalRegistrarLib.RebalanceParamsStructOutput,
    boolean,
    BigNumber,
    BigNumber,
    string,
    string,
    string,
    boolean,
    string,
    string[],
    string[],
    string[],
    AngelCoreStruct.EndowmentFeeStructOutput,
    AngelCoreStruct.EndowmentFeeStructOutput,
    AngelCoreStruct.EndowmentFeeStructOutput,
    AngelCoreStruct.SettingsControllerStructOutput,
    number,
    boolean,
    AngelCoreStruct.SplitDetailsStructOutput,
    BigNumber
  ] & {
    owner: string;
    name: string;
    categories: AngelCoreStruct.CategoriesStructOutput;
    tier: BigNumber;
    endow_type: number;
    logo: string;
    image: string;
    maturityTime: BigNumber;
    strategies: AngelCoreStruct.AccountStrategiesStructOutput;
    oneoffVaults: AngelCoreStruct.OneOffVaultsStructOutput;
    rebalance: LocalRegistrarLib.RebalanceParamsStructOutput;
    kycDonorsOnly: boolean;
    pendingRedemptions: BigNumber;
    proposalLink: BigNumber;
    multisig: string;
    dao: string;
    daoToken: string;
    donationMatchActive: boolean;
    donationMatchContract: string;
    allowlistedBeneficiaries: string[];
    allowlistedContributors: string[];
    maturityAllowlist: string[];
    withdrawFee: AngelCoreStruct.EndowmentFeeStructOutput;
    depositFee: AngelCoreStruct.EndowmentFeeStructOutput;
    balanceFee: AngelCoreStruct.EndowmentFeeStructOutput;
    settingsController: AngelCoreStruct.SettingsControllerStructOutput;
    parent: number;
    ignoreUserSplits: boolean;
    splitToLiquid: AngelCoreStruct.SplitDetailsStructOutput;
    referralId: BigNumber;
  };
}

export interface IAccountsInterface extends utils.Interface {
  functions: {
    "closeEndowment(uint32,((uint32,uint256,address),uint8))": FunctionFragment;
    "copycatStrategies(uint32,uint8,uint256)": FunctionFragment;
    "createEndowment((address,bool,uint256,uint256,string,(uint256[],uint256[]),uint256,uint8,string,string,address[],bool,uint256,(uint8,(uint256,uint256)),address[],address[],uint256,uint256,uint256,(address,uint256,bool),(address,uint256,bool),(address,uint256,bool),(address,uint256,bool),(uint256,uint256,uint256,uint256,uint256,uint128,uint256,(uint8,(address,uint256,string,string,(uint8,(uint128,uint256,uint128,uint128)),string,string,uint256,address,uint256,uint256))),bool,uint256,((address,uint256),(address,uint256),(address,uint256),(address,uint256),(address,uint256),(address,uint256),(address,uint256),(address,uint256),(address,uint256),(address,uint256),(address,uint256),(address,uint256),(address,uint256),(address,uint256)),uint32,address[],bool,(uint256,uint256,uint256),uint256))": FunctionFragment;
    "depositERC20(address,(uint32,uint256,uint256),address,uint256)": FunctionFragment;
    "queryConfig()": FunctionFragment;
    "queryEndowmentDetails(uint32)": FunctionFragment;
    "queryState(uint32)": FunctionFragment;
    "swapToken(uint32,uint8,uint128,address,address)": FunctionFragment;
    "updateConfig(address,uint256)": FunctionFragment;
    "updateDelegate(uint32,string,string,address,uint256)": FunctionFragment;
    "updateEndowmentDetails((uint32,address,string,(uint256[],uint256[]),string,string,(bool,uint32,uint32,bool,uint32,uint32)))": FunctionFragment;
    "updateOwner(address)": FunctionFragment;
    "updateStrategies(uint32,uint8,(string,uint256)[])": FunctionFragment;
    "vaultsInvest(uint32,uint8,address[],uint256[])": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "closeEndowment"
      | "copycatStrategies"
      | "createEndowment"
      | "depositERC20"
      | "queryConfig"
      | "queryEndowmentDetails"
      | "queryState"
      | "swapToken"
      | "updateConfig"
      | "updateDelegate"
      | "updateEndowmentDetails"
      | "updateOwner"
      | "updateStrategies"
      | "vaultsInvest"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "closeEndowment",
    values: [PromiseOrValue<BigNumberish>, AngelCoreStruct.BeneficiaryStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "copycatStrategies",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "createEndowment",
    values: [AccountMessages.CreateEndowmentRequestStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "depositERC20",
    values: [
      PromiseOrValue<string>,
      AccountMessages.DepositRequestStruct,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "queryConfig",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "queryEndowmentDetails",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "queryState",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "swapToken",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "updateConfig",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "updateDelegate",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "updateEndowmentDetails",
    values: [AccountMessages.UpdateEndowmentDetailsRequestStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "updateOwner",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "updateStrategies",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      AccountMessages.StrategyStruct[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "vaultsInvest",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>[],
      PromiseOrValue<BigNumberish>[]
    ]
  ): string;

  decodeFunctionResult(
    functionFragment: "closeEndowment",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "copycatStrategies",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createEndowment",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "depositERC20",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "queryConfig",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "queryEndowmentDetails",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "queryState", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "swapToken", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "updateConfig",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateDelegate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateEndowmentDetails",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateOwner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateStrategies",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "vaultsInvest",
    data: BytesLike
  ): Result;

  events: {};
}

export interface IAccounts extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IAccountsInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    closeEndowment(
      id: PromiseOrValue<BigNumberish>,
      beneficiary: AngelCoreStruct.BeneficiaryStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    copycatStrategies(
      id: PromiseOrValue<BigNumberish>,
      acctType: PromiseOrValue<BigNumberish>,
      idToCopy: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    createEndowment(
      details: AccountMessages.CreateEndowmentRequestStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    depositERC20(
      senderAddr: PromiseOrValue<string>,
      details: AccountMessages.DepositRequestStruct,
      tokenaddress: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    queryConfig(
      overrides?: CallOverrides
    ): Promise<[AccountMessages.ConfigResponseStructOutput]>;

    queryEndowmentDetails(
      id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[AccountStorage.EndowmentStructOutput]>;

    queryState(
      id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[AccountMessages.StateResponseStructOutput]>;

    swapToken(
      id: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<BigNumberish>,
      amount: PromiseOrValue<BigNumberish>,
      tokenin: PromiseOrValue<string>,
      tokenout: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    updateConfig(
      newRegistrar: PromiseOrValue<string>,
      maxGeneralCategoryId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    updateDelegate(
      id: PromiseOrValue<BigNumberish>,
      setting: PromiseOrValue<string>,
      action: PromiseOrValue<string>,
      delegateAddress: PromiseOrValue<string>,
      delegateExpiry: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    updateEndowmentDetails(
      details: AccountMessages.UpdateEndowmentDetailsRequestStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    updateOwner(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    updateStrategies(
      id: PromiseOrValue<BigNumberish>,
      acctType: PromiseOrValue<BigNumberish>,
      strategies: AccountMessages.StrategyStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    vaultsInvest(
      id: PromiseOrValue<BigNumberish>,
      accountType: PromiseOrValue<BigNumberish>,
      tokens: PromiseOrValue<string>[],
      amount: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  closeEndowment(
    id: PromiseOrValue<BigNumberish>,
    beneficiary: AngelCoreStruct.BeneficiaryStruct,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  copycatStrategies(
    id: PromiseOrValue<BigNumberish>,
    acctType: PromiseOrValue<BigNumberish>,
    idToCopy: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  createEndowment(
    details: AccountMessages.CreateEndowmentRequestStruct,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  depositERC20(
    senderAddr: PromiseOrValue<string>,
    details: AccountMessages.DepositRequestStruct,
    tokenaddress: PromiseOrValue<string>,
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  queryConfig(
    overrides?: CallOverrides
  ): Promise<AccountMessages.ConfigResponseStructOutput>;

  queryEndowmentDetails(
    id: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<AccountStorage.EndowmentStructOutput>;

  queryState(
    id: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<AccountMessages.StateResponseStructOutput>;

  swapToken(
    id: PromiseOrValue<BigNumberish>,
    arg1: PromiseOrValue<BigNumberish>,
    amount: PromiseOrValue<BigNumberish>,
    tokenin: PromiseOrValue<string>,
    tokenout: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  updateConfig(
    newRegistrar: PromiseOrValue<string>,
    maxGeneralCategoryId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  updateDelegate(
    id: PromiseOrValue<BigNumberish>,
    setting: PromiseOrValue<string>,
    action: PromiseOrValue<string>,
    delegateAddress: PromiseOrValue<string>,
    delegateExpiry: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  updateEndowmentDetails(
    details: AccountMessages.UpdateEndowmentDetailsRequestStruct,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  updateOwner(
    newOwner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  updateStrategies(
    id: PromiseOrValue<BigNumberish>,
    acctType: PromiseOrValue<BigNumberish>,
    strategies: AccountMessages.StrategyStruct[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  vaultsInvest(
    id: PromiseOrValue<BigNumberish>,
    accountType: PromiseOrValue<BigNumberish>,
    tokens: PromiseOrValue<string>[],
    amount: PromiseOrValue<BigNumberish>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    closeEndowment(
      id: PromiseOrValue<BigNumberish>,
      beneficiary: AngelCoreStruct.BeneficiaryStruct,
      overrides?: CallOverrides
    ): Promise<boolean>;

    copycatStrategies(
      id: PromiseOrValue<BigNumberish>,
      acctType: PromiseOrValue<BigNumberish>,
      idToCopy: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    createEndowment(
      details: AccountMessages.CreateEndowmentRequestStruct,
      overrides?: CallOverrides
    ): Promise<boolean>;

    depositERC20(
      senderAddr: PromiseOrValue<string>,
      details: AccountMessages.DepositRequestStruct,
      tokenaddress: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    queryConfig(
      overrides?: CallOverrides
    ): Promise<AccountMessages.ConfigResponseStructOutput>;

    queryEndowmentDetails(
      id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<AccountStorage.EndowmentStructOutput>;

    queryState(
      id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<AccountMessages.StateResponseStructOutput>;

    swapToken(
      id: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<BigNumberish>,
      amount: PromiseOrValue<BigNumberish>,
      tokenin: PromiseOrValue<string>,
      tokenout: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    updateConfig(
      newRegistrar: PromiseOrValue<string>,
      maxGeneralCategoryId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    updateDelegate(
      id: PromiseOrValue<BigNumberish>,
      setting: PromiseOrValue<string>,
      action: PromiseOrValue<string>,
      delegateAddress: PromiseOrValue<string>,
      delegateExpiry: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    updateEndowmentDetails(
      details: AccountMessages.UpdateEndowmentDetailsRequestStruct,
      overrides?: CallOverrides
    ): Promise<boolean>;

    updateOwner(
      newOwner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    updateStrategies(
      id: PromiseOrValue<BigNumberish>,
      acctType: PromiseOrValue<BigNumberish>,
      strategies: AccountMessages.StrategyStruct[],
      overrides?: CallOverrides
    ): Promise<boolean>;

    vaultsInvest(
      id: PromiseOrValue<BigNumberish>,
      accountType: PromiseOrValue<BigNumberish>,
      tokens: PromiseOrValue<string>[],
      amount: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<boolean>;
  };

  filters: {};

  estimateGas: {
    closeEndowment(
      id: PromiseOrValue<BigNumberish>,
      beneficiary: AngelCoreStruct.BeneficiaryStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    copycatStrategies(
      id: PromiseOrValue<BigNumberish>,
      acctType: PromiseOrValue<BigNumberish>,
      idToCopy: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    createEndowment(
      details: AccountMessages.CreateEndowmentRequestStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    depositERC20(
      senderAddr: PromiseOrValue<string>,
      details: AccountMessages.DepositRequestStruct,
      tokenaddress: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    queryConfig(overrides?: CallOverrides): Promise<BigNumber>;

    queryEndowmentDetails(
      id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    queryState(
      id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    swapToken(
      id: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<BigNumberish>,
      amount: PromiseOrValue<BigNumberish>,
      tokenin: PromiseOrValue<string>,
      tokenout: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    updateConfig(
      newRegistrar: PromiseOrValue<string>,
      maxGeneralCategoryId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    updateDelegate(
      id: PromiseOrValue<BigNumberish>,
      setting: PromiseOrValue<string>,
      action: PromiseOrValue<string>,
      delegateAddress: PromiseOrValue<string>,
      delegateExpiry: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    updateEndowmentDetails(
      details: AccountMessages.UpdateEndowmentDetailsRequestStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    updateOwner(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    updateStrategies(
      id: PromiseOrValue<BigNumberish>,
      acctType: PromiseOrValue<BigNumberish>,
      strategies: AccountMessages.StrategyStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    vaultsInvest(
      id: PromiseOrValue<BigNumberish>,
      accountType: PromiseOrValue<BigNumberish>,
      tokens: PromiseOrValue<string>[],
      amount: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    closeEndowment(
      id: PromiseOrValue<BigNumberish>,
      beneficiary: AngelCoreStruct.BeneficiaryStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    copycatStrategies(
      id: PromiseOrValue<BigNumberish>,
      acctType: PromiseOrValue<BigNumberish>,
      idToCopy: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    createEndowment(
      details: AccountMessages.CreateEndowmentRequestStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    depositERC20(
      senderAddr: PromiseOrValue<string>,
      details: AccountMessages.DepositRequestStruct,
      tokenaddress: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    queryConfig(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    queryEndowmentDetails(
      id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    queryState(
      id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    swapToken(
      id: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<BigNumberish>,
      amount: PromiseOrValue<BigNumberish>,
      tokenin: PromiseOrValue<string>,
      tokenout: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    updateConfig(
      newRegistrar: PromiseOrValue<string>,
      maxGeneralCategoryId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    updateDelegate(
      id: PromiseOrValue<BigNumberish>,
      setting: PromiseOrValue<string>,
      action: PromiseOrValue<string>,
      delegateAddress: PromiseOrValue<string>,
      delegateExpiry: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    updateEndowmentDetails(
      details: AccountMessages.UpdateEndowmentDetailsRequestStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    updateOwner(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    updateStrategies(
      id: PromiseOrValue<BigNumberish>,
      acctType: PromiseOrValue<BigNumberish>,
      strategies: AccountMessages.StrategyStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    vaultsInvest(
      id: PromiseOrValue<BigNumberish>,
      accountType: PromiseOrValue<BigNumberish>,
      tokens: PromiseOrValue<string>[],
      amount: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
