/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "../../../../common";

export declare namespace LibAccounts {
  export type BeneficiaryDataStruct = {
    endowId: BigNumberish;
    fundId: BigNumberish;
    addr: string;
  };

  export type BeneficiaryDataStructOutput = [number, BigNumber, string] & {
    endowId: number;
    fundId: BigNumber;
    addr: string;
  };

  export type BeneficiaryStruct = {
    data: LibAccounts.BeneficiaryDataStruct;
    enumData: BigNumberish;
  };

  export type BeneficiaryStructOutput = [
    LibAccounts.BeneficiaryDataStructOutput,
    number
  ] & { data: LibAccounts.BeneficiaryDataStructOutput; enumData: number };
}

export interface IAccountsUpdateStatusEndowmentsInterface
  extends utils.Interface {
  functions: {
    "closeEndowment(uint32,((uint32,uint256,address),uint8))": FunctionFragment;
  };

  getFunction(nameOrSignatureOrTopic: "closeEndowment"): FunctionFragment;

  encodeFunctionData(
    functionFragment: "closeEndowment",
    values: [BigNumberish, LibAccounts.BeneficiaryStruct]
  ): string;

  decodeFunctionResult(
    functionFragment: "closeEndowment",
    data: BytesLike
  ): Result;

  events: {};
}

export interface IAccountsUpdateStatusEndowments extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IAccountsUpdateStatusEndowmentsInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    closeEndowment(
      id: BigNumberish,
      beneficiary: LibAccounts.BeneficiaryStruct,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;
  };

  closeEndowment(
    id: BigNumberish,
    beneficiary: LibAccounts.BeneficiaryStruct,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  callStatic: {
    closeEndowment(
      id: BigNumberish,
      beneficiary: LibAccounts.BeneficiaryStruct,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {};

  estimateGas: {
    closeEndowment(
      id: BigNumberish,
      beneficiary: LibAccounts.BeneficiaryStruct,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    closeEndowment(
      id: BigNumberish,
      beneficiary: LibAccounts.BeneficiaryStruct,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;
  };
}
