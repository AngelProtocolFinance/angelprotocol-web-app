/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "../../../../common";

export declare namespace LocalRegistrarLib {
  export type RebalanceParamsStruct = {
    rebalanceLiquidProfits: boolean;
    lockedRebalanceToLiquid: BigNumberish;
    interestDistribution: BigNumberish;
    lockedPrincipleToLiquid: boolean;
    principleDistribution: BigNumberish;
    basis: BigNumberish;
  };

  export type RebalanceParamsStructOutput = [
    boolean,
    number,
    number,
    boolean,
    number,
    number
  ] & {
    rebalanceLiquidProfits: boolean;
    lockedRebalanceToLiquid: number;
    interestDistribution: number;
    lockedPrincipleToLiquid: boolean;
    principleDistribution: number;
    basis: number;
  };
}

export declare namespace AccountMessages {
  export type UpdateEndowmentDetailsRequestStruct = {
    id: BigNumberish;
    owner: string;
    name: string;
    sdgs: BigNumberish[];
    logo: string;
    image: string;
    rebalance: LocalRegistrarLib.RebalanceParamsStruct;
  };

  export type UpdateEndowmentDetailsRequestStructOutput = [
    number,
    string,
    string,
    BigNumber[],
    string,
    string,
    LocalRegistrarLib.RebalanceParamsStructOutput
  ] & {
    id: number;
    owner: string;
    name: string;
    sdgs: BigNumber[];
    logo: string;
    image: string;
    rebalance: LocalRegistrarLib.RebalanceParamsStructOutput;
  };
}

export interface IAccountsUpdateEndowmentsInterface extends utils.Interface {
  functions: {
    "updateAcceptedToken(uint32,address,address,bool)": FunctionFragment;
    "updateDelegate(uint32,uint8,uint8,address,uint256)": FunctionFragment;
    "updateEndowmentDetails((uint32,address,string,uint256[],string,string,(bool,uint32,uint32,bool,uint32,uint32)))": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "updateAcceptedToken"
      | "updateDelegate"
      | "updateEndowmentDetails"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "updateAcceptedToken",
    values: [BigNumberish, string, string, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "updateDelegate",
    values: [BigNumberish, BigNumberish, BigNumberish, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "updateEndowmentDetails",
    values: [AccountMessages.UpdateEndowmentDetailsRequestStruct]
  ): string;

  decodeFunctionResult(
    functionFragment: "updateAcceptedToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateDelegate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateEndowmentDetails",
    data: BytesLike
  ): Result;

  events: {};
}

export interface IAccountsUpdateEndowments extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IAccountsUpdateEndowmentsInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    updateAcceptedToken(
      endowId: BigNumberish,
      tokenAddr: string,
      priceFeedAddr: string,
      tokenStatus: boolean,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    updateDelegate(
      id: BigNumberish,
      setting: BigNumberish,
      action: BigNumberish,
      delegateAddress: string,
      delegateExpiry: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    updateEndowmentDetails(
      details: AccountMessages.UpdateEndowmentDetailsRequestStruct,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;
  };

  updateAcceptedToken(
    endowId: BigNumberish,
    tokenAddr: string,
    priceFeedAddr: string,
    tokenStatus: boolean,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  updateDelegate(
    id: BigNumberish,
    setting: BigNumberish,
    action: BigNumberish,
    delegateAddress: string,
    delegateExpiry: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  updateEndowmentDetails(
    details: AccountMessages.UpdateEndowmentDetailsRequestStruct,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  callStatic: {
    updateAcceptedToken(
      endowId: BigNumberish,
      tokenAddr: string,
      priceFeedAddr: string,
      tokenStatus: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    updateDelegate(
      id: BigNumberish,
      setting: BigNumberish,
      action: BigNumberish,
      delegateAddress: string,
      delegateExpiry: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    updateEndowmentDetails(
      details: AccountMessages.UpdateEndowmentDetailsRequestStruct,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {};

  estimateGas: {
    updateAcceptedToken(
      endowId: BigNumberish,
      tokenAddr: string,
      priceFeedAddr: string,
      tokenStatus: boolean,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    updateDelegate(
      id: BigNumberish,
      setting: BigNumberish,
      action: BigNumberish,
      delegateAddress: string,
      delegateExpiry: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    updateEndowmentDetails(
      details: AccountMessages.UpdateEndowmentDetailsRequestStruct,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    updateAcceptedToken(
      endowId: BigNumberish,
      tokenAddr: string,
      priceFeedAddr: string,
      tokenStatus: boolean,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    updateDelegate(
      id: BigNumberish,
      setting: BigNumberish,
      action: BigNumberish,
      delegateAddress: string,
      delegateExpiry: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    updateEndowmentDetails(
      details: AccountMessages.UpdateEndowmentDetailsRequestStruct,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;
  };
}
