/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "../../../../common";

export declare namespace LocalRegistrarLib {
  export type AngelProtocolParamsStruct = {
    routerAddr: string;
    refundAddr: string;
  };

  export type AngelProtocolParamsStructOutput = [string, string] & {
    routerAddr: string;
    refundAddr: string;
  };

  export type RebalanceParamsStruct = {
    rebalanceLiquidProfits: boolean;
    lockedRebalanceToLiquid: BigNumberish;
    interestDistribution: BigNumberish;
    lockedPrincipleToLiquid: boolean;
    principleDistribution: BigNumberish;
    basis: BigNumberish;
  };

  export type RebalanceParamsStructOutput = [
    boolean,
    number,
    number,
    boolean,
    number,
    number
  ] & {
    rebalanceLiquidProfits: boolean;
    lockedRebalanceToLiquid: number;
    interestDistribution: number;
    lockedPrincipleToLiquid: boolean;
    principleDistribution: number;
    basis: number;
  };

  export type VaultParamsStruct = { Type: BigNumberish; vaultAddr: string };

  export type VaultParamsStructOutput = [number, string] & {
    Type: number;
    vaultAddr: string;
  };

  export type StrategyParamsStruct = {
    approvalState: BigNumberish;
    network: string;
    Locked: LocalRegistrarLib.VaultParamsStruct;
    Liquid: LocalRegistrarLib.VaultParamsStruct;
  };

  export type StrategyParamsStructOutput = [
    number,
    string,
    LocalRegistrarLib.VaultParamsStructOutput,
    LocalRegistrarLib.VaultParamsStructOutput
  ] & {
    approvalState: number;
    network: string;
    Locked: LocalRegistrarLib.VaultParamsStructOutput;
    Liquid: LocalRegistrarLib.VaultParamsStructOutput;
  };
}

export declare namespace LibAccounts {
  export type FeeSettingStruct = { payoutAddress: string; bps: BigNumberish };

  export type FeeSettingStructOutput = [string, BigNumber] & {
    payoutAddress: string;
    bps: BigNumber;
  };
}

export declare namespace IAccountsStrategy {
  export type NetworkInfoStruct = {
    chainId: BigNumberish;
    router: string;
    axelarGateway: string;
    ibcChannel: string;
    transferChannel: string;
    gasReceiver: string;
    gasLimit: BigNumberish;
  };

  export type NetworkInfoStructOutput = [
    BigNumber,
    string,
    string,
    string,
    string,
    string,
    BigNumber
  ] & {
    chainId: BigNumber;
    router: string;
    axelarGateway: string;
    ibcChannel: string;
    transferChannel: string;
    gasReceiver: string;
    gasLimit: BigNumber;
  };
}

export interface ILocalRegistrarInterface extends utils.Interface {
  functions: {
    "getAccountsContractAddressByChain(string)": FunctionFragment;
    "getAngelProtocolParams()": FunctionFragment;
    "getFeeSettingsByFeeType(uint8)": FunctionFragment;
    "getGasByToken(address)": FunctionFragment;
    "getRebalanceParams()": FunctionFragment;
    "getStrategyApprovalState(bytes4)": FunctionFragment;
    "getStrategyParamsById(bytes4)": FunctionFragment;
    "getUniswapFactoryAddress()": FunctionFragment;
    "getUniswapRouterAddress()": FunctionFragment;
    "getVaultOperatorApproved(address)": FunctionFragment;
    "isTokenAccepted(address)": FunctionFragment;
    "queryNetworkConnection(string)": FunctionFragment;
    "setAccountsContractAddressByChain(string,string)": FunctionFragment;
    "setAngelProtocolParams((address,address))": FunctionFragment;
    "setFeeSettingsByFeesType(uint8,uint256,address)": FunctionFragment;
    "setGasByToken(address,uint256)": FunctionFragment;
    "setRebalanceParams((bool,uint32,uint32,bool,uint32,uint32))": FunctionFragment;
    "setStrategyApprovalState(bytes4,uint8)": FunctionFragment;
    "setStrategyParams(bytes4,string,address,address,uint8)": FunctionFragment;
    "setTokenAccepted(address,bool)": FunctionFragment;
    "setUniswapAddresses(address,address)": FunctionFragment;
    "setVaultOperatorApproved(address,bool)": FunctionFragment;
    "updateNetworkConnections(string,(uint256,address,address,string,string,address,uint256),uint8)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "getAccountsContractAddressByChain"
      | "getAngelProtocolParams"
      | "getFeeSettingsByFeeType"
      | "getGasByToken"
      | "getRebalanceParams"
      | "getStrategyApprovalState"
      | "getStrategyParamsById"
      | "getUniswapFactoryAddress"
      | "getUniswapRouterAddress"
      | "getVaultOperatorApproved"
      | "isTokenAccepted"
      | "queryNetworkConnection"
      | "setAccountsContractAddressByChain"
      | "setAngelProtocolParams"
      | "setFeeSettingsByFeesType"
      | "setGasByToken"
      | "setRebalanceParams"
      | "setStrategyApprovalState"
      | "setStrategyParams"
      | "setTokenAccepted"
      | "setUniswapAddresses"
      | "setVaultOperatorApproved"
      | "updateNetworkConnections"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "getAccountsContractAddressByChain",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getAngelProtocolParams",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getFeeSettingsByFeeType",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getGasByToken",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getRebalanceParams",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getStrategyApprovalState",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getStrategyParamsById",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getUniswapFactoryAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getUniswapRouterAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getVaultOperatorApproved",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "isTokenAccepted",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "queryNetworkConnection",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setAccountsContractAddressByChain",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "setAngelProtocolParams",
    values: [LocalRegistrarLib.AngelProtocolParamsStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "setFeeSettingsByFeesType",
    values: [BigNumberish, BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "setGasByToken",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setRebalanceParams",
    values: [LocalRegistrarLib.RebalanceParamsStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "setStrategyApprovalState",
    values: [BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setStrategyParams",
    values: [BytesLike, string, string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setTokenAccepted",
    values: [string, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setUniswapAddresses",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "setVaultOperatorApproved",
    values: [string, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "updateNetworkConnections",
    values: [string, IAccountsStrategy.NetworkInfoStruct, BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "getAccountsContractAddressByChain",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAngelProtocolParams",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getFeeSettingsByFeeType",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getGasByToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRebalanceParams",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getStrategyApprovalState",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getStrategyParamsById",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUniswapFactoryAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUniswapRouterAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getVaultOperatorApproved",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isTokenAccepted",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "queryNetworkConnection",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setAccountsContractAddressByChain",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setAngelProtocolParams",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setFeeSettingsByFeesType",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setGasByToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setRebalanceParams",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setStrategyApprovalState",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setStrategyParams",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setTokenAccepted",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setUniswapAddresses",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setVaultOperatorApproved",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateNetworkConnections",
    data: BytesLike
  ): Result;

  events: {
    "AccountsContractStorageUpdated(string,string)": EventFragment;
    "AngelProtocolParamsUpdated()": EventFragment;
    "FeeSettingsUpdated(uint8,uint256,address)": EventFragment;
    "GasFeeUpdated(address,uint256)": EventFragment;
    "NetworkConnectionPosted(uint256)": EventFragment;
    "NetworkConnectionRemoved(uint256)": EventFragment;
    "RebalanceParamsUpdated()": EventFragment;
    "StrategyApprovalUpdated(bytes4,uint8)": EventFragment;
    "StrategyParamsUpdated(bytes4,string,address,address,uint8)": EventFragment;
    "TokenAcceptanceUpdated(address,bool)": EventFragment;
  };

  getEvent(
    nameOrSignatureOrTopic: "AccountsContractStorageUpdated"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "AngelProtocolParamsUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "FeeSettingsUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "GasFeeUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NetworkConnectionPosted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NetworkConnectionRemoved"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RebalanceParamsUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "StrategyApprovalUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "StrategyParamsUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TokenAcceptanceUpdated"): EventFragment;
}

export interface AccountsContractStorageUpdatedEventObject {
  _chainName: string;
  _accountsContractAddress: string;
}
export type AccountsContractStorageUpdatedEvent = TypedEvent<
  [string, string],
  AccountsContractStorageUpdatedEventObject
>;

export type AccountsContractStorageUpdatedEventFilter =
  TypedEventFilter<AccountsContractStorageUpdatedEvent>;

export interface AngelProtocolParamsUpdatedEventObject {}
export type AngelProtocolParamsUpdatedEvent = TypedEvent<
  [],
  AngelProtocolParamsUpdatedEventObject
>;

export type AngelProtocolParamsUpdatedEventFilter =
  TypedEventFilter<AngelProtocolParamsUpdatedEvent>;

export interface FeeSettingsUpdatedEventObject {
  _feeType: number;
  _bpsRate: BigNumber;
  _payoutAddress: string;
}
export type FeeSettingsUpdatedEvent = TypedEvent<
  [number, BigNumber, string],
  FeeSettingsUpdatedEventObject
>;

export type FeeSettingsUpdatedEventFilter =
  TypedEventFilter<FeeSettingsUpdatedEvent>;

export interface GasFeeUpdatedEventObject {
  _tokenAddr: string;
  _gasFee: BigNumber;
}
export type GasFeeUpdatedEvent = TypedEvent<
  [string, BigNumber],
  GasFeeUpdatedEventObject
>;

export type GasFeeUpdatedEventFilter = TypedEventFilter<GasFeeUpdatedEvent>;

export interface NetworkConnectionPostedEventObject {
  chainId: BigNumber;
}
export type NetworkConnectionPostedEvent = TypedEvent<
  [BigNumber],
  NetworkConnectionPostedEventObject
>;

export type NetworkConnectionPostedEventFilter =
  TypedEventFilter<NetworkConnectionPostedEvent>;

export interface NetworkConnectionRemovedEventObject {
  chainId: BigNumber;
}
export type NetworkConnectionRemovedEvent = TypedEvent<
  [BigNumber],
  NetworkConnectionRemovedEventObject
>;

export type NetworkConnectionRemovedEventFilter =
  TypedEventFilter<NetworkConnectionRemovedEvent>;

export interface RebalanceParamsUpdatedEventObject {}
export type RebalanceParamsUpdatedEvent = TypedEvent<
  [],
  RebalanceParamsUpdatedEventObject
>;

export type RebalanceParamsUpdatedEventFilter =
  TypedEventFilter<RebalanceParamsUpdatedEvent>;

export interface StrategyApprovalUpdatedEventObject {
  _strategyId: string;
  _approvalState: number;
}
export type StrategyApprovalUpdatedEvent = TypedEvent<
  [string, number],
  StrategyApprovalUpdatedEventObject
>;

export type StrategyApprovalUpdatedEventFilter =
  TypedEventFilter<StrategyApprovalUpdatedEvent>;

export interface StrategyParamsUpdatedEventObject {
  _strategyId: string;
  _network: string;
  _lockAddr: string;
  _liqAddr: string;
  _approvalState: number;
}
export type StrategyParamsUpdatedEvent = TypedEvent<
  [string, string, string, string, number],
  StrategyParamsUpdatedEventObject
>;

export type StrategyParamsUpdatedEventFilter =
  TypedEventFilter<StrategyParamsUpdatedEvent>;

export interface TokenAcceptanceUpdatedEventObject {
  _tokenAddr: string;
  _isAccepted: boolean;
}
export type TokenAcceptanceUpdatedEvent = TypedEvent<
  [string, boolean],
  TokenAcceptanceUpdatedEventObject
>;

export type TokenAcceptanceUpdatedEventFilter =
  TypedEventFilter<TokenAcceptanceUpdatedEvent>;

export interface ILocalRegistrar extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: ILocalRegistrarInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    getAccountsContractAddressByChain(
      _targetChain: string,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getAngelProtocolParams(
      overrides?: CallOverrides
    ): Promise<[LocalRegistrarLib.AngelProtocolParamsStructOutput]>;

    getFeeSettingsByFeeType(
      _feeType: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[LibAccounts.FeeSettingStructOutput]>;

    getGasByToken(
      _tokenAddr: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getRebalanceParams(
      overrides?: CallOverrides
    ): Promise<[LocalRegistrarLib.RebalanceParamsStructOutput]>;

    getStrategyApprovalState(
      _strategyId: BytesLike,
      overrides?: CallOverrides
    ): Promise<[number]>;

    getStrategyParamsById(
      _strategyId: BytesLike,
      overrides?: CallOverrides
    ): Promise<[LocalRegistrarLib.StrategyParamsStructOutput]>;

    getUniswapFactoryAddress(overrides?: CallOverrides): Promise<[string]>;

    getUniswapRouterAddress(overrides?: CallOverrides): Promise<[string]>;

    getVaultOperatorApproved(
      _operator: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    isTokenAccepted(
      _tokenAddr: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    queryNetworkConnection(
      networkName: string,
      overrides?: CallOverrides
    ): Promise<
      [IAccountsStrategy.NetworkInfoStructOutput] & {
        response: IAccountsStrategy.NetworkInfoStructOutput;
      }
    >;

    setAccountsContractAddressByChain(
      _chainName: string,
      _accountsContractAddress: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    setAngelProtocolParams(
      _angelProtocolParams: LocalRegistrarLib.AngelProtocolParamsStruct,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    setFeeSettingsByFeesType(
      _feeType: BigNumberish,
      _rate: BigNumberish,
      _payout: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    setGasByToken(
      _tokenAddr: string,
      _gasFee: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    setRebalanceParams(
      _rebalanceParams: LocalRegistrarLib.RebalanceParamsStruct,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    setStrategyApprovalState(
      _strategyId: BytesLike,
      _approvalState: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    setStrategyParams(
      _strategyId: BytesLike,
      _network: string,
      _liqAddr: string,
      _lockAddr: string,
      _approvalState: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    setTokenAccepted(
      _tokenAddr: string,
      _isAccepted: boolean,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    setUniswapAddresses(
      _uniswapRouter: string,
      _uniswapFactory: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    setVaultOperatorApproved(
      _operator: string,
      _isApproved: boolean,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    updateNetworkConnections(
      networkName: string,
      networkInfo: IAccountsStrategy.NetworkInfoStruct,
      action: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;
  };

  getAccountsContractAddressByChain(
    _targetChain: string,
    overrides?: CallOverrides
  ): Promise<string>;

  getAngelProtocolParams(
    overrides?: CallOverrides
  ): Promise<LocalRegistrarLib.AngelProtocolParamsStructOutput>;

  getFeeSettingsByFeeType(
    _feeType: BigNumberish,
    overrides?: CallOverrides
  ): Promise<LibAccounts.FeeSettingStructOutput>;

  getGasByToken(
    _tokenAddr: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getRebalanceParams(
    overrides?: CallOverrides
  ): Promise<LocalRegistrarLib.RebalanceParamsStructOutput>;

  getStrategyApprovalState(
    _strategyId: BytesLike,
    overrides?: CallOverrides
  ): Promise<number>;

  getStrategyParamsById(
    _strategyId: BytesLike,
    overrides?: CallOverrides
  ): Promise<LocalRegistrarLib.StrategyParamsStructOutput>;

  getUniswapFactoryAddress(overrides?: CallOverrides): Promise<string>;

  getUniswapRouterAddress(overrides?: CallOverrides): Promise<string>;

  getVaultOperatorApproved(
    _operator: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  isTokenAccepted(
    _tokenAddr: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  queryNetworkConnection(
    networkName: string,
    overrides?: CallOverrides
  ): Promise<IAccountsStrategy.NetworkInfoStructOutput>;

  setAccountsContractAddressByChain(
    _chainName: string,
    _accountsContractAddress: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  setAngelProtocolParams(
    _angelProtocolParams: LocalRegistrarLib.AngelProtocolParamsStruct,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  setFeeSettingsByFeesType(
    _feeType: BigNumberish,
    _rate: BigNumberish,
    _payout: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  setGasByToken(
    _tokenAddr: string,
    _gasFee: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  setRebalanceParams(
    _rebalanceParams: LocalRegistrarLib.RebalanceParamsStruct,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  setStrategyApprovalState(
    _strategyId: BytesLike,
    _approvalState: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  setStrategyParams(
    _strategyId: BytesLike,
    _network: string,
    _liqAddr: string,
    _lockAddr: string,
    _approvalState: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  setTokenAccepted(
    _tokenAddr: string,
    _isAccepted: boolean,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  setUniswapAddresses(
    _uniswapRouter: string,
    _uniswapFactory: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  setVaultOperatorApproved(
    _operator: string,
    _isApproved: boolean,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  updateNetworkConnections(
    networkName: string,
    networkInfo: IAccountsStrategy.NetworkInfoStruct,
    action: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  callStatic: {
    getAccountsContractAddressByChain(
      _targetChain: string,
      overrides?: CallOverrides
    ): Promise<string>;

    getAngelProtocolParams(
      overrides?: CallOverrides
    ): Promise<LocalRegistrarLib.AngelProtocolParamsStructOutput>;

    getFeeSettingsByFeeType(
      _feeType: BigNumberish,
      overrides?: CallOverrides
    ): Promise<LibAccounts.FeeSettingStructOutput>;

    getGasByToken(
      _tokenAddr: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRebalanceParams(
      overrides?: CallOverrides
    ): Promise<LocalRegistrarLib.RebalanceParamsStructOutput>;

    getStrategyApprovalState(
      _strategyId: BytesLike,
      overrides?: CallOverrides
    ): Promise<number>;

    getStrategyParamsById(
      _strategyId: BytesLike,
      overrides?: CallOverrides
    ): Promise<LocalRegistrarLib.StrategyParamsStructOutput>;

    getUniswapFactoryAddress(overrides?: CallOverrides): Promise<string>;

    getUniswapRouterAddress(overrides?: CallOverrides): Promise<string>;

    getVaultOperatorApproved(
      _operator: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isTokenAccepted(
      _tokenAddr: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    queryNetworkConnection(
      networkName: string,
      overrides?: CallOverrides
    ): Promise<IAccountsStrategy.NetworkInfoStructOutput>;

    setAccountsContractAddressByChain(
      _chainName: string,
      _accountsContractAddress: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setAngelProtocolParams(
      _angelProtocolParams: LocalRegistrarLib.AngelProtocolParamsStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    setFeeSettingsByFeesType(
      _feeType: BigNumberish,
      _rate: BigNumberish,
      _payout: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setGasByToken(
      _tokenAddr: string,
      _gasFee: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setRebalanceParams(
      _rebalanceParams: LocalRegistrarLib.RebalanceParamsStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    setStrategyApprovalState(
      _strategyId: BytesLike,
      _approvalState: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setStrategyParams(
      _strategyId: BytesLike,
      _network: string,
      _liqAddr: string,
      _lockAddr: string,
      _approvalState: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setTokenAccepted(
      _tokenAddr: string,
      _isAccepted: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    setUniswapAddresses(
      _uniswapRouter: string,
      _uniswapFactory: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setVaultOperatorApproved(
      _operator: string,
      _isApproved: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    updateNetworkConnections(
      networkName: string,
      networkInfo: IAccountsStrategy.NetworkInfoStruct,
      action: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "AccountsContractStorageUpdated(string,string)"(
      _chainName?: null,
      _accountsContractAddress?: null
    ): AccountsContractStorageUpdatedEventFilter;
    AccountsContractStorageUpdated(
      _chainName?: null,
      _accountsContractAddress?: null
    ): AccountsContractStorageUpdatedEventFilter;

    "AngelProtocolParamsUpdated()"(): AngelProtocolParamsUpdatedEventFilter;
    AngelProtocolParamsUpdated(): AngelProtocolParamsUpdatedEventFilter;

    "FeeSettingsUpdated(uint8,uint256,address)"(
      _feeType?: null,
      _bpsRate?: null,
      _payoutAddress?: null
    ): FeeSettingsUpdatedEventFilter;
    FeeSettingsUpdated(
      _feeType?: null,
      _bpsRate?: null,
      _payoutAddress?: null
    ): FeeSettingsUpdatedEventFilter;

    "GasFeeUpdated(address,uint256)"(
      _tokenAddr?: null,
      _gasFee?: null
    ): GasFeeUpdatedEventFilter;
    GasFeeUpdated(_tokenAddr?: null, _gasFee?: null): GasFeeUpdatedEventFilter;

    "NetworkConnectionPosted(uint256)"(
      chainId?: null
    ): NetworkConnectionPostedEventFilter;
    NetworkConnectionPosted(chainId?: null): NetworkConnectionPostedEventFilter;

    "NetworkConnectionRemoved(uint256)"(
      chainId?: null
    ): NetworkConnectionRemovedEventFilter;
    NetworkConnectionRemoved(
      chainId?: null
    ): NetworkConnectionRemovedEventFilter;

    "RebalanceParamsUpdated()"(): RebalanceParamsUpdatedEventFilter;
    RebalanceParamsUpdated(): RebalanceParamsUpdatedEventFilter;

    "StrategyApprovalUpdated(bytes4,uint8)"(
      _strategyId?: null,
      _approvalState?: null
    ): StrategyApprovalUpdatedEventFilter;
    StrategyApprovalUpdated(
      _strategyId?: null,
      _approvalState?: null
    ): StrategyApprovalUpdatedEventFilter;

    "StrategyParamsUpdated(bytes4,string,address,address,uint8)"(
      _strategyId?: null,
      _network?: null,
      _lockAddr?: null,
      _liqAddr?: null,
      _approvalState?: null
    ): StrategyParamsUpdatedEventFilter;
    StrategyParamsUpdated(
      _strategyId?: null,
      _network?: null,
      _lockAddr?: null,
      _liqAddr?: null,
      _approvalState?: null
    ): StrategyParamsUpdatedEventFilter;

    "TokenAcceptanceUpdated(address,bool)"(
      _tokenAddr?: null,
      _isAccepted?: null
    ): TokenAcceptanceUpdatedEventFilter;
    TokenAcceptanceUpdated(
      _tokenAddr?: null,
      _isAccepted?: null
    ): TokenAcceptanceUpdatedEventFilter;
  };

  estimateGas: {
    getAccountsContractAddressByChain(
      _targetChain: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getAngelProtocolParams(overrides?: CallOverrides): Promise<BigNumber>;

    getFeeSettingsByFeeType(
      _feeType: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getGasByToken(
      _tokenAddr: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRebalanceParams(overrides?: CallOverrides): Promise<BigNumber>;

    getStrategyApprovalState(
      _strategyId: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getStrategyParamsById(
      _strategyId: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getUniswapFactoryAddress(overrides?: CallOverrides): Promise<BigNumber>;

    getUniswapRouterAddress(overrides?: CallOverrides): Promise<BigNumber>;

    getVaultOperatorApproved(
      _operator: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isTokenAccepted(
      _tokenAddr: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    queryNetworkConnection(
      networkName: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    setAccountsContractAddressByChain(
      _chainName: string,
      _accountsContractAddress: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    setAngelProtocolParams(
      _angelProtocolParams: LocalRegistrarLib.AngelProtocolParamsStruct,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    setFeeSettingsByFeesType(
      _feeType: BigNumberish,
      _rate: BigNumberish,
      _payout: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    setGasByToken(
      _tokenAddr: string,
      _gasFee: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    setRebalanceParams(
      _rebalanceParams: LocalRegistrarLib.RebalanceParamsStruct,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    setStrategyApprovalState(
      _strategyId: BytesLike,
      _approvalState: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    setStrategyParams(
      _strategyId: BytesLike,
      _network: string,
      _liqAddr: string,
      _lockAddr: string,
      _approvalState: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    setTokenAccepted(
      _tokenAddr: string,
      _isAccepted: boolean,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    setUniswapAddresses(
      _uniswapRouter: string,
      _uniswapFactory: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    setVaultOperatorApproved(
      _operator: string,
      _isApproved: boolean,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    updateNetworkConnections(
      networkName: string,
      networkInfo: IAccountsStrategy.NetworkInfoStruct,
      action: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    getAccountsContractAddressByChain(
      _targetChain: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getAngelProtocolParams(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getFeeSettingsByFeeType(
      _feeType: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getGasByToken(
      _tokenAddr: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRebalanceParams(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getStrategyApprovalState(
      _strategyId: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getStrategyParamsById(
      _strategyId: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getUniswapFactoryAddress(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getUniswapRouterAddress(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getVaultOperatorApproved(
      _operator: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isTokenAccepted(
      _tokenAddr: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    queryNetworkConnection(
      networkName: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    setAccountsContractAddressByChain(
      _chainName: string,
      _accountsContractAddress: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    setAngelProtocolParams(
      _angelProtocolParams: LocalRegistrarLib.AngelProtocolParamsStruct,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    setFeeSettingsByFeesType(
      _feeType: BigNumberish,
      _rate: BigNumberish,
      _payout: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    setGasByToken(
      _tokenAddr: string,
      _gasFee: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    setRebalanceParams(
      _rebalanceParams: LocalRegistrarLib.RebalanceParamsStruct,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    setStrategyApprovalState(
      _strategyId: BytesLike,
      _approvalState: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    setStrategyParams(
      _strategyId: BytesLike,
      _network: string,
      _liqAddr: string,
      _lockAddr: string,
      _approvalState: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    setTokenAccepted(
      _tokenAddr: string,
      _isAccepted: boolean,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    setUniswapAddresses(
      _uniswapRouter: string,
      _uniswapFactory: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    setVaultOperatorApproved(
      _operator: string,
      _isApproved: boolean,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    updateNetworkConnections(
      networkName: string,
      networkInfo: IAccountsStrategy.NetworkInfoStruct,
      action: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;
  };
}
