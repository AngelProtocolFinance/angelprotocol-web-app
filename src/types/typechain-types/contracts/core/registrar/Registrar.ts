/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../../common";

export declare namespace APGoldfinchConfigLib {
  export type CRVParamsStruct = {
    allowedSlippage: PromiseOrValue<BigNumberish>;
  };

  export type CRVParamsStructOutput = [BigNumber] & {
    allowedSlippage: BigNumber;
  };

  export type APGoldfinchConfigStruct = {
    crvParams: APGoldfinchConfigLib.CRVParamsStruct;
  };

  export type APGoldfinchConfigStructOutput = [
    APGoldfinchConfigLib.CRVParamsStructOutput
  ] & { crvParams: APGoldfinchConfigLib.CRVParamsStructOutput };
}

export declare namespace LocalRegistrarLib {
  export type AngelProtocolParamsStruct = {
    routerAddr: PromiseOrValue<string>;
    refundAddr: PromiseOrValue<string>;
  };

  export type AngelProtocolParamsStructOutput = [string, string] & {
    routerAddr: string;
    refundAddr: string;
  };

  export type RebalanceParamsStruct = {
    rebalanceLiquidProfits: PromiseOrValue<boolean>;
    lockedRebalanceToLiquid: PromiseOrValue<BigNumberish>;
    interestDistribution: PromiseOrValue<BigNumberish>;
    lockedPrincipleToLiquid: PromiseOrValue<boolean>;
    principleDistribution: PromiseOrValue<BigNumberish>;
    basis: PromiseOrValue<BigNumberish>;
  };

  export type RebalanceParamsStructOutput = [
    boolean,
    number,
    number,
    boolean,
    number,
    number
  ] & {
    rebalanceLiquidProfits: boolean;
    lockedRebalanceToLiquid: number;
    interestDistribution: number;
    lockedPrincipleToLiquid: boolean;
    principleDistribution: number;
    basis: number;
  };

  export type VaultParamsStruct = {
    Type: PromiseOrValue<BigNumberish>;
    vaultAddr: PromiseOrValue<string>;
  };

  export type VaultParamsStructOutput = [number, string] & {
    Type: number;
    vaultAddr: string;
  };

  export type StrategyParamsStruct = {
    approvalState: PromiseOrValue<BigNumberish>;
    network: PromiseOrValue<string>;
    Locked: LocalRegistrarLib.VaultParamsStruct;
    Liquid: LocalRegistrarLib.VaultParamsStruct;
  };

  export type StrategyParamsStructOutput = [
    number,
    string,
    LocalRegistrarLib.VaultParamsStructOutput,
    LocalRegistrarLib.VaultParamsStructOutput
  ] & {
    approvalState: number;
    network: string;
    Locked: LocalRegistrarLib.VaultParamsStructOutput;
    Liquid: LocalRegistrarLib.VaultParamsStructOutput;
  };
}

export declare namespace LibAccounts {
  export type FeeSettingStruct = {
    payoutAddress: PromiseOrValue<string>;
    bps: PromiseOrValue<BigNumberish>;
  };

  export type FeeSettingStructOutput = [string, BigNumber] & {
    payoutAddress: string;
    bps: BigNumber;
  };

  export type SplitDetailsStruct = {
    max: PromiseOrValue<BigNumberish>;
    min: PromiseOrValue<BigNumberish>;
    defaultSplit: PromiseOrValue<BigNumberish>;
  };

  export type SplitDetailsStructOutput = [BigNumber, BigNumber, BigNumber] & {
    max: BigNumber;
    min: BigNumber;
    defaultSplit: BigNumber;
  };
}

export declare namespace RegistrarMessages {
  export type InstantiateRequestStruct = {
    treasury: PromiseOrValue<string>;
    splitToLiquid: LibAccounts.SplitDetailsStruct;
    router: PromiseOrValue<string>;
    axelarGateway: PromiseOrValue<string>;
    axelarGasRecv: PromiseOrValue<string>;
  };

  export type InstantiateRequestStructOutput = [
    string,
    LibAccounts.SplitDetailsStructOutput,
    string,
    string,
    string
  ] & {
    treasury: string;
    splitToLiquid: LibAccounts.SplitDetailsStructOutput;
    router: string;
    axelarGateway: string;
    axelarGasRecv: string;
  };

  export type UpdateConfigRequestStruct = {
    accountsContract: PromiseOrValue<string>;
    splitMax: PromiseOrValue<BigNumberish>;
    splitMin: PromiseOrValue<BigNumberish>;
    splitDefault: PromiseOrValue<BigNumberish>;
    collectorShare: PromiseOrValue<BigNumberish>;
    indexFundContract: PromiseOrValue<string>;
    govContract: PromiseOrValue<string>;
    treasury: PromiseOrValue<string>;
    donationMatchCharitesContract: PromiseOrValue<string>;
    donationMatchEmitter: PromiseOrValue<string>;
    haloToken: PromiseOrValue<string>;
    haloTokenLpContract: PromiseOrValue<string>;
    charitySharesContract: PromiseOrValue<string>;
    fundraisingContract: PromiseOrValue<string>;
    uniswapRouter: PromiseOrValue<string>;
    uniswapFactory: PromiseOrValue<string>;
    multisigFactory: PromiseOrValue<string>;
    multisigEmitter: PromiseOrValue<string>;
    charityApplications: PromiseOrValue<string>;
    lockedWithdrawal: PromiseOrValue<string>;
    proxyAdmin: PromiseOrValue<string>;
    usdcAddress: PromiseOrValue<string>;
    wMaticAddress: PromiseOrValue<string>;
    subdaoGovContract: PromiseOrValue<string>;
    subdaoTokenContract: PromiseOrValue<string>;
    subdaoBondingTokenContract: PromiseOrValue<string>;
    subdaoCw900Contract: PromiseOrValue<string>;
    subdaoDistributorContract: PromiseOrValue<string>;
    subdaoEmitter: PromiseOrValue<string>;
    donationMatchContract: PromiseOrValue<string>;
    cw900lvAddress: PromiseOrValue<string>;
    gasFwdFactory: PromiseOrValue<string>;
  };

  export type UpdateConfigRequestStructOutput = [
    string,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    string,
    string,
    string,
    string,
    string,
    string,
    string,
    string,
    string,
    string,
    string,
    string,
    string,
    string,
    string,
    string,
    string,
    string,
    string,
    string,
    string,
    string,
    string,
    string,
    string,
    string,
    string
  ] & {
    accountsContract: string;
    splitMax: BigNumber;
    splitMin: BigNumber;
    splitDefault: BigNumber;
    collectorShare: BigNumber;
    indexFundContract: string;
    govContract: string;
    treasury: string;
    donationMatchCharitesContract: string;
    donationMatchEmitter: string;
    haloToken: string;
    haloTokenLpContract: string;
    charitySharesContract: string;
    fundraisingContract: string;
    uniswapRouter: string;
    uniswapFactory: string;
    multisigFactory: string;
    multisigEmitter: string;
    charityApplications: string;
    lockedWithdrawal: string;
    proxyAdmin: string;
    usdcAddress: string;
    wMaticAddress: string;
    subdaoGovContract: string;
    subdaoTokenContract: string;
    subdaoBondingTokenContract: string;
    subdaoCw900Contract: string;
    subdaoDistributorContract: string;
    subdaoEmitter: string;
    donationMatchContract: string;
    cw900lvAddress: string;
    gasFwdFactory: string;
  };
}

export declare namespace RegistrarStorage {
  export type ConfigStruct = {
    indexFundContract: PromiseOrValue<string>;
    accountsContract: PromiseOrValue<string>;
    treasury: PromiseOrValue<string>;
    subdaoGovContract: PromiseOrValue<string>;
    subdaoTokenContract: PromiseOrValue<string>;
    subdaoBondingTokenContract: PromiseOrValue<string>;
    subdaoCw900Contract: PromiseOrValue<string>;
    subdaoDistributorContract: PromiseOrValue<string>;
    subdaoEmitter: PromiseOrValue<string>;
    donationMatchContract: PromiseOrValue<string>;
    donationMatchCharitesContract: PromiseOrValue<string>;
    donationMatchEmitter: PromiseOrValue<string>;
    splitToLiquid: LibAccounts.SplitDetailsStruct;
    haloToken: PromiseOrValue<string>;
    haloTokenLpContract: PromiseOrValue<string>;
    govContract: PromiseOrValue<string>;
    collectorShare: PromiseOrValue<BigNumberish>;
    charitySharesContract: PromiseOrValue<string>;
    fundraisingContract: PromiseOrValue<string>;
    uniswapRouter: PromiseOrValue<string>;
    uniswapFactory: PromiseOrValue<string>;
    multisigFactory: PromiseOrValue<string>;
    multisigEmitter: PromiseOrValue<string>;
    charityApplications: PromiseOrValue<string>;
    lockedWithdrawal: PromiseOrValue<string>;
    proxyAdmin: PromiseOrValue<string>;
    usdcAddress: PromiseOrValue<string>;
    wMaticAddress: PromiseOrValue<string>;
    cw900lvAddress: PromiseOrValue<string>;
    gasFwdFactory: PromiseOrValue<string>;
  };

  export type ConfigStructOutput = [
    string,
    string,
    string,
    string,
    string,
    string,
    string,
    string,
    string,
    string,
    string,
    string,
    LibAccounts.SplitDetailsStructOutput,
    string,
    string,
    string,
    BigNumber,
    string,
    string,
    string,
    string,
    string,
    string,
    string,
    string,
    string,
    string,
    string,
    string,
    string
  ] & {
    indexFundContract: string;
    accountsContract: string;
    treasury: string;
    subdaoGovContract: string;
    subdaoTokenContract: string;
    subdaoBondingTokenContract: string;
    subdaoCw900Contract: string;
    subdaoDistributorContract: string;
    subdaoEmitter: string;
    donationMatchContract: string;
    donationMatchCharitesContract: string;
    donationMatchEmitter: string;
    splitToLiquid: LibAccounts.SplitDetailsStructOutput;
    haloToken: string;
    haloTokenLpContract: string;
    govContract: string;
    collectorShare: BigNumber;
    charitySharesContract: string;
    fundraisingContract: string;
    uniswapRouter: string;
    uniswapFactory: string;
    multisigFactory: string;
    multisigEmitter: string;
    charityApplications: string;
    lockedWithdrawal: string;
    proxyAdmin: string;
    usdcAddress: string;
    wMaticAddress: string;
    cw900lvAddress: string;
    gasFwdFactory: string;
  };
}

export declare namespace IAccountsStrategy {
  export type NetworkInfoStruct = {
    chainId: PromiseOrValue<BigNumberish>;
    router: PromiseOrValue<string>;
    axelarGateway: PromiseOrValue<string>;
    ibcChannel: PromiseOrValue<string>;
    transferChannel: PromiseOrValue<string>;
    gasReceiver: PromiseOrValue<string>;
    gasLimit: PromiseOrValue<BigNumberish>;
  };

  export type NetworkInfoStructOutput = [
    BigNumber,
    string,
    string,
    string,
    string,
    string,
    BigNumber
  ] & {
    chainId: BigNumber;
    router: string;
    axelarGateway: string;
    ibcChannel: string;
    transferChannel: string;
    gasReceiver: string;
    gasLimit: BigNumber;
  };
}

export interface RegistrarInterface extends utils.Interface {
  functions: {
    "getAPGoldfinchParams()": FunctionFragment;
    "getAccountsContractAddressByChain(string)": FunctionFragment;
    "getAngelProtocolParams()": FunctionFragment;
    "getFeeSettingsByFeeType(uint8)": FunctionFragment;
    "getGasByToken(address)": FunctionFragment;
    "getRebalanceParams()": FunctionFragment;
    "getStrategyApprovalState(bytes4)": FunctionFragment;
    "getStrategyParamsById(bytes4)": FunctionFragment;
    "getUniswapFactoryAddress()": FunctionFragment;
    "getUniswapRouterAddress()": FunctionFragment;
    "getVaultOperatorApproved(address)": FunctionFragment;
    "initialize((address,(uint256,uint256,uint256),address,address,address))": FunctionFragment;
    "initialize()": FunctionFragment;
    "isTokenAccepted(address)": FunctionFragment;
    "owner()": FunctionFragment;
    "queryAllStrategies()": FunctionFragment;
    "queryConfig()": FunctionFragment;
    "queryNetworkConnection(string)": FunctionFragment;
    "queryTokenPriceFeed(address)": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "setAPGoldfinchParams(((uint256)))": FunctionFragment;
    "setAccountsContractAddressByChain(string,string)": FunctionFragment;
    "setAngelProtocolParams((address,address))": FunctionFragment;
    "setFeeSettingsByFeesType(uint8,uint256,address)": FunctionFragment;
    "setGasByToken(address,uint256)": FunctionFragment;
    "setRebalanceParams((bool,uint32,uint32,bool,uint32,uint32))": FunctionFragment;
    "setStrategyApprovalState(bytes4,uint8)": FunctionFragment;
    "setStrategyParams(bytes4,string,address,address,uint8)": FunctionFragment;
    "setTokenAccepted(address,bool)": FunctionFragment;
    "setUniswapAddresses(address,address)": FunctionFragment;
    "setVaultOperatorApproved(address,bool)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "updateConfig((address,uint256,uint256,uint256,uint256,address,address,address,address,address,address,address,address,address,address,address,address,address,address,address,address,address,address,address,address,address,address,address,address,address,address,address))": FunctionFragment;
    "updateNetworkConnections(string,(uint256,address,address,string,string,address,uint256),string)": FunctionFragment;
    "updateTokenPriceFeed(address,address)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "getAPGoldfinchParams"
      | "getAccountsContractAddressByChain"
      | "getAngelProtocolParams"
      | "getFeeSettingsByFeeType"
      | "getGasByToken"
      | "getRebalanceParams"
      | "getStrategyApprovalState"
      | "getStrategyParamsById"
      | "getUniswapFactoryAddress"
      | "getUniswapRouterAddress"
      | "getVaultOperatorApproved"
      | "initialize((address,(uint256,uint256,uint256),address,address,address))"
      | "initialize()"
      | "isTokenAccepted"
      | "owner"
      | "queryAllStrategies"
      | "queryConfig"
      | "queryNetworkConnection"
      | "queryTokenPriceFeed"
      | "renounceOwnership"
      | "setAPGoldfinchParams"
      | "setAccountsContractAddressByChain"
      | "setAngelProtocolParams"
      | "setFeeSettingsByFeesType"
      | "setGasByToken"
      | "setRebalanceParams"
      | "setStrategyApprovalState"
      | "setStrategyParams"
      | "setTokenAccepted"
      | "setUniswapAddresses"
      | "setVaultOperatorApproved"
      | "transferOwnership"
      | "updateConfig"
      | "updateNetworkConnections"
      | "updateTokenPriceFeed"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "getAPGoldfinchParams",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getAccountsContractAddressByChain",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getAngelProtocolParams",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getFeeSettingsByFeeType",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getGasByToken",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getRebalanceParams",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getStrategyApprovalState",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "getStrategyParamsById",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "getUniswapFactoryAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getUniswapRouterAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getVaultOperatorApproved",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "initialize((address,(uint256,uint256,uint256),address,address,address))",
    values: [RegistrarMessages.InstantiateRequestStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "initialize()",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "isTokenAccepted",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "queryAllStrategies",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "queryConfig",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "queryNetworkConnection",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "queryTokenPriceFeed",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setAPGoldfinchParams",
    values: [APGoldfinchConfigLib.APGoldfinchConfigStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "setAccountsContractAddressByChain",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setAngelProtocolParams",
    values: [LocalRegistrarLib.AngelProtocolParamsStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "setFeeSettingsByFeesType",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "setGasByToken",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setRebalanceParams",
    values: [LocalRegistrarLib.RebalanceParamsStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "setStrategyApprovalState",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setStrategyParams",
    values: [
      PromiseOrValue<BytesLike>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "setTokenAccepted",
    values: [PromiseOrValue<string>, PromiseOrValue<boolean>]
  ): string;
  encodeFunctionData(
    functionFragment: "setUniswapAddresses",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setVaultOperatorApproved",
    values: [PromiseOrValue<string>, PromiseOrValue<boolean>]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "updateConfig",
    values: [RegistrarMessages.UpdateConfigRequestStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "updateNetworkConnections",
    values: [
      PromiseOrValue<string>,
      IAccountsStrategy.NetworkInfoStruct,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "updateTokenPriceFeed",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;

  decodeFunctionResult(
    functionFragment: "getAPGoldfinchParams",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAccountsContractAddressByChain",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAngelProtocolParams",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getFeeSettingsByFeeType",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getGasByToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRebalanceParams",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getStrategyApprovalState",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getStrategyParamsById",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUniswapFactoryAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUniswapRouterAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getVaultOperatorApproved",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "initialize((address,(uint256,uint256,uint256),address,address,address))",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "initialize()",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isTokenAccepted",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "queryAllStrategies",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "queryConfig",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "queryNetworkConnection",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "queryTokenPriceFeed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setAPGoldfinchParams",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setAccountsContractAddressByChain",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setAngelProtocolParams",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setFeeSettingsByFeesType",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setGasByToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setRebalanceParams",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setStrategyApprovalState",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setStrategyParams",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setTokenAccepted",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setUniswapAddresses",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setVaultOperatorApproved",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateConfig",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateNetworkConnections",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateTokenPriceFeed",
    data: BytesLike
  ): Result;

  events: {
    "AccountsContractStorageUpdated(string,string)": EventFragment;
    "AngelProtocolParamsUpdated()": EventFragment;
    "ConfigUpdated()": EventFragment;
    "FeeSettingsUpdated(uint8,uint256,address)": EventFragment;
    "GasFeeUpdated(address,uint256)": EventFragment;
    "Initialized(uint8)": EventFragment;
    "NetworkConnectionPosted(uint256)": EventFragment;
    "NetworkConnectionRemoved(uint256)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "RebalanceParamsUpdated()": EventFragment;
    "StrategyApprovalUpdated(bytes4,uint8)": EventFragment;
    "StrategyParamsUpdated(bytes4,string,address,address,uint8)": EventFragment;
    "TokenAcceptanceUpdated(address,bool)": EventFragment;
  };

  getEvent(
    nameOrSignatureOrTopic: "AccountsContractStorageUpdated"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "AngelProtocolParamsUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ConfigUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "FeeSettingsUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "GasFeeUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Initialized"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NetworkConnectionPosted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NetworkConnectionRemoved"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RebalanceParamsUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "StrategyApprovalUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "StrategyParamsUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TokenAcceptanceUpdated"): EventFragment;
}

export interface AccountsContractStorageUpdatedEventObject {
  _chainName: string;
  _accountsContractAddress: string;
}
export type AccountsContractStorageUpdatedEvent = TypedEvent<
  [string, string],
  AccountsContractStorageUpdatedEventObject
>;

export type AccountsContractStorageUpdatedEventFilter =
  TypedEventFilter<AccountsContractStorageUpdatedEvent>;

export interface AngelProtocolParamsUpdatedEventObject {}
export type AngelProtocolParamsUpdatedEvent = TypedEvent<
  [],
  AngelProtocolParamsUpdatedEventObject
>;

export type AngelProtocolParamsUpdatedEventFilter =
  TypedEventFilter<AngelProtocolParamsUpdatedEvent>;

export interface ConfigUpdatedEventObject {}
export type ConfigUpdatedEvent = TypedEvent<[], ConfigUpdatedEventObject>;

export type ConfigUpdatedEventFilter = TypedEventFilter<ConfigUpdatedEvent>;

export interface FeeSettingsUpdatedEventObject {
  _feeType: number;
  _bpsRate: BigNumber;
  _payoutAddress: string;
}
export type FeeSettingsUpdatedEvent = TypedEvent<
  [number, BigNumber, string],
  FeeSettingsUpdatedEventObject
>;

export type FeeSettingsUpdatedEventFilter =
  TypedEventFilter<FeeSettingsUpdatedEvent>;

export interface GasFeeUpdatedEventObject {
  _tokenAddr: string;
  _gasFee: BigNumber;
}
export type GasFeeUpdatedEvent = TypedEvent<
  [string, BigNumber],
  GasFeeUpdatedEventObject
>;

export type GasFeeUpdatedEventFilter = TypedEventFilter<GasFeeUpdatedEvent>;

export interface InitializedEventObject {
  version: number;
}
export type InitializedEvent = TypedEvent<[number], InitializedEventObject>;

export type InitializedEventFilter = TypedEventFilter<InitializedEvent>;

export interface NetworkConnectionPostedEventObject {
  chainId: BigNumber;
}
export type NetworkConnectionPostedEvent = TypedEvent<
  [BigNumber],
  NetworkConnectionPostedEventObject
>;

export type NetworkConnectionPostedEventFilter =
  TypedEventFilter<NetworkConnectionPostedEvent>;

export interface NetworkConnectionRemovedEventObject {
  chainId: BigNumber;
}
export type NetworkConnectionRemovedEvent = TypedEvent<
  [BigNumber],
  NetworkConnectionRemovedEventObject
>;

export type NetworkConnectionRemovedEventFilter =
  TypedEventFilter<NetworkConnectionRemovedEvent>;

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  OwnershipTransferredEventObject
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface RebalanceParamsUpdatedEventObject {}
export type RebalanceParamsUpdatedEvent = TypedEvent<
  [],
  RebalanceParamsUpdatedEventObject
>;

export type RebalanceParamsUpdatedEventFilter =
  TypedEventFilter<RebalanceParamsUpdatedEvent>;

export interface StrategyApprovalUpdatedEventObject {
  _strategyId: string;
  _approvalState: number;
}
export type StrategyApprovalUpdatedEvent = TypedEvent<
  [string, number],
  StrategyApprovalUpdatedEventObject
>;

export type StrategyApprovalUpdatedEventFilter =
  TypedEventFilter<StrategyApprovalUpdatedEvent>;

export interface StrategyParamsUpdatedEventObject {
  _strategyId: string;
  _network: string;
  _lockAddr: string;
  _liqAddr: string;
  _approvalState: number;
}
export type StrategyParamsUpdatedEvent = TypedEvent<
  [string, string, string, string, number],
  StrategyParamsUpdatedEventObject
>;

export type StrategyParamsUpdatedEventFilter =
  TypedEventFilter<StrategyParamsUpdatedEvent>;

export interface TokenAcceptanceUpdatedEventObject {
  _tokenAddr: string;
  _isAccepted: boolean;
}
export type TokenAcceptanceUpdatedEvent = TypedEvent<
  [string, boolean],
  TokenAcceptanceUpdatedEventObject
>;

export type TokenAcceptanceUpdatedEventFilter =
  TypedEventFilter<TokenAcceptanceUpdatedEvent>;

export interface Registrar extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: RegistrarInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    getAPGoldfinchParams(
      overrides?: CallOverrides
    ): Promise<[APGoldfinchConfigLib.APGoldfinchConfigStructOutput]>;

    getAccountsContractAddressByChain(
      _targetChain: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getAngelProtocolParams(
      overrides?: CallOverrides
    ): Promise<[LocalRegistrarLib.AngelProtocolParamsStructOutput]>;

    getFeeSettingsByFeeType(
      _feeType: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[LibAccounts.FeeSettingStructOutput]>;

    getGasByToken(
      _tokenAddr: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getRebalanceParams(
      overrides?: CallOverrides
    ): Promise<[LocalRegistrarLib.RebalanceParamsStructOutput]>;

    getStrategyApprovalState(
      _strategyId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[number]>;

    getStrategyParamsById(
      _strategyId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[LocalRegistrarLib.StrategyParamsStructOutput]>;

    getUniswapFactoryAddress(overrides?: CallOverrides): Promise<[string]>;

    getUniswapRouterAddress(overrides?: CallOverrides): Promise<[string]>;

    getVaultOperatorApproved(
      _operator: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    "initialize((address,(uint256,uint256,uint256),address,address,address))"(
      details: RegistrarMessages.InstantiateRequestStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "initialize()"(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    isTokenAccepted(
      _tokenAddr: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    queryAllStrategies(
      overrides?: CallOverrides
    ): Promise<[string[]] & { allStrategies: string[] }>;

    queryConfig(
      overrides?: CallOverrides
    ): Promise<[RegistrarStorage.ConfigStructOutput]>;

    queryNetworkConnection(
      networkName: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [IAccountsStrategy.NetworkInfoStructOutput] & {
        response: IAccountsStrategy.NetworkInfoStructOutput;
      }
    >;

    queryTokenPriceFeed(
      token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setAPGoldfinchParams(
      _apGoldfinch: APGoldfinchConfigLib.APGoldfinchConfigStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setAccountsContractAddressByChain(
      _chainName: PromiseOrValue<string>,
      _accountsContractAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setAngelProtocolParams(
      _angelProtocolParams: LocalRegistrarLib.AngelProtocolParamsStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setFeeSettingsByFeesType(
      _feeType: PromiseOrValue<BigNumberish>,
      _rate: PromiseOrValue<BigNumberish>,
      _payout: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setGasByToken(
      _tokenAddr: PromiseOrValue<string>,
      _gasFee: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setRebalanceParams(
      _rebalanceParams: LocalRegistrarLib.RebalanceParamsStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setStrategyApprovalState(
      _strategyId: PromiseOrValue<BytesLike>,
      _approvalState: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setStrategyParams(
      _strategyId: PromiseOrValue<BytesLike>,
      _network: PromiseOrValue<string>,
      _lockAddr: PromiseOrValue<string>,
      _liqAddr: PromiseOrValue<string>,
      _approvalState: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setTokenAccepted(
      _tokenAddr: PromiseOrValue<string>,
      _isAccepted: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setUniswapAddresses(
      _uniswapRouter: PromiseOrValue<string>,
      _uniswapFactory: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setVaultOperatorApproved(
      _operator: PromiseOrValue<string>,
      _isApproved: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    updateConfig(
      details: RegistrarMessages.UpdateConfigRequestStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    updateNetworkConnections(
      networkName: PromiseOrValue<string>,
      networkInfo: IAccountsStrategy.NetworkInfoStruct,
      action: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    updateTokenPriceFeed(
      token: PromiseOrValue<string>,
      priceFeed: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  getAPGoldfinchParams(
    overrides?: CallOverrides
  ): Promise<APGoldfinchConfigLib.APGoldfinchConfigStructOutput>;

  getAccountsContractAddressByChain(
    _targetChain: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<string>;

  getAngelProtocolParams(
    overrides?: CallOverrides
  ): Promise<LocalRegistrarLib.AngelProtocolParamsStructOutput>;

  getFeeSettingsByFeeType(
    _feeType: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<LibAccounts.FeeSettingStructOutput>;

  getGasByToken(
    _tokenAddr: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getRebalanceParams(
    overrides?: CallOverrides
  ): Promise<LocalRegistrarLib.RebalanceParamsStructOutput>;

  getStrategyApprovalState(
    _strategyId: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<number>;

  getStrategyParamsById(
    _strategyId: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<LocalRegistrarLib.StrategyParamsStructOutput>;

  getUniswapFactoryAddress(overrides?: CallOverrides): Promise<string>;

  getUniswapRouterAddress(overrides?: CallOverrides): Promise<string>;

  getVaultOperatorApproved(
    _operator: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  "initialize((address,(uint256,uint256,uint256),address,address,address))"(
    details: RegistrarMessages.InstantiateRequestStruct,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "initialize()"(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  isTokenAccepted(
    _tokenAddr: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  owner(overrides?: CallOverrides): Promise<string>;

  queryAllStrategies(overrides?: CallOverrides): Promise<string[]>;

  queryConfig(
    overrides?: CallOverrides
  ): Promise<RegistrarStorage.ConfigStructOutput>;

  queryNetworkConnection(
    networkName: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<IAccountsStrategy.NetworkInfoStructOutput>;

  queryTokenPriceFeed(
    token: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<string>;

  renounceOwnership(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setAPGoldfinchParams(
    _apGoldfinch: APGoldfinchConfigLib.APGoldfinchConfigStruct,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setAccountsContractAddressByChain(
    _chainName: PromiseOrValue<string>,
    _accountsContractAddress: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setAngelProtocolParams(
    _angelProtocolParams: LocalRegistrarLib.AngelProtocolParamsStruct,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setFeeSettingsByFeesType(
    _feeType: PromiseOrValue<BigNumberish>,
    _rate: PromiseOrValue<BigNumberish>,
    _payout: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setGasByToken(
    _tokenAddr: PromiseOrValue<string>,
    _gasFee: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setRebalanceParams(
    _rebalanceParams: LocalRegistrarLib.RebalanceParamsStruct,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setStrategyApprovalState(
    _strategyId: PromiseOrValue<BytesLike>,
    _approvalState: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setStrategyParams(
    _strategyId: PromiseOrValue<BytesLike>,
    _network: PromiseOrValue<string>,
    _lockAddr: PromiseOrValue<string>,
    _liqAddr: PromiseOrValue<string>,
    _approvalState: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setTokenAccepted(
    _tokenAddr: PromiseOrValue<string>,
    _isAccepted: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setUniswapAddresses(
    _uniswapRouter: PromiseOrValue<string>,
    _uniswapFactory: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setVaultOperatorApproved(
    _operator: PromiseOrValue<string>,
    _isApproved: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  updateConfig(
    details: RegistrarMessages.UpdateConfigRequestStruct,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  updateNetworkConnections(
    networkName: PromiseOrValue<string>,
    networkInfo: IAccountsStrategy.NetworkInfoStruct,
    action: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  updateTokenPriceFeed(
    token: PromiseOrValue<string>,
    priceFeed: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    getAPGoldfinchParams(
      overrides?: CallOverrides
    ): Promise<APGoldfinchConfigLib.APGoldfinchConfigStructOutput>;

    getAccountsContractAddressByChain(
      _targetChain: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<string>;

    getAngelProtocolParams(
      overrides?: CallOverrides
    ): Promise<LocalRegistrarLib.AngelProtocolParamsStructOutput>;

    getFeeSettingsByFeeType(
      _feeType: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<LibAccounts.FeeSettingStructOutput>;

    getGasByToken(
      _tokenAddr: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRebalanceParams(
      overrides?: CallOverrides
    ): Promise<LocalRegistrarLib.RebalanceParamsStructOutput>;

    getStrategyApprovalState(
      _strategyId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<number>;

    getStrategyParamsById(
      _strategyId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<LocalRegistrarLib.StrategyParamsStructOutput>;

    getUniswapFactoryAddress(overrides?: CallOverrides): Promise<string>;

    getUniswapRouterAddress(overrides?: CallOverrides): Promise<string>;

    getVaultOperatorApproved(
      _operator: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "initialize((address,(uint256,uint256,uint256),address,address,address))"(
      details: RegistrarMessages.InstantiateRequestStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    "initialize()"(overrides?: CallOverrides): Promise<void>;

    isTokenAccepted(
      _tokenAddr: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    owner(overrides?: CallOverrides): Promise<string>;

    queryAllStrategies(overrides?: CallOverrides): Promise<string[]>;

    queryConfig(
      overrides?: CallOverrides
    ): Promise<RegistrarStorage.ConfigStructOutput>;

    queryNetworkConnection(
      networkName: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<IAccountsStrategy.NetworkInfoStructOutput>;

    queryTokenPriceFeed(
      token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<string>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    setAPGoldfinchParams(
      _apGoldfinch: APGoldfinchConfigLib.APGoldfinchConfigStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    setAccountsContractAddressByChain(
      _chainName: PromiseOrValue<string>,
      _accountsContractAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setAngelProtocolParams(
      _angelProtocolParams: LocalRegistrarLib.AngelProtocolParamsStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    setFeeSettingsByFeesType(
      _feeType: PromiseOrValue<BigNumberish>,
      _rate: PromiseOrValue<BigNumberish>,
      _payout: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setGasByToken(
      _tokenAddr: PromiseOrValue<string>,
      _gasFee: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setRebalanceParams(
      _rebalanceParams: LocalRegistrarLib.RebalanceParamsStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    setStrategyApprovalState(
      _strategyId: PromiseOrValue<BytesLike>,
      _approvalState: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setStrategyParams(
      _strategyId: PromiseOrValue<BytesLike>,
      _network: PromiseOrValue<string>,
      _lockAddr: PromiseOrValue<string>,
      _liqAddr: PromiseOrValue<string>,
      _approvalState: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setTokenAccepted(
      _tokenAddr: PromiseOrValue<string>,
      _isAccepted: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;

    setUniswapAddresses(
      _uniswapRouter: PromiseOrValue<string>,
      _uniswapFactory: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setVaultOperatorApproved(
      _operator: PromiseOrValue<string>,
      _isApproved: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    updateConfig(
      details: RegistrarMessages.UpdateConfigRequestStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    updateNetworkConnections(
      networkName: PromiseOrValue<string>,
      networkInfo: IAccountsStrategy.NetworkInfoStruct,
      action: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    updateTokenPriceFeed(
      token: PromiseOrValue<string>,
      priceFeed: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "AccountsContractStorageUpdated(string,string)"(
      _chainName?: null,
      _accountsContractAddress?: null
    ): AccountsContractStorageUpdatedEventFilter;
    AccountsContractStorageUpdated(
      _chainName?: null,
      _accountsContractAddress?: null
    ): AccountsContractStorageUpdatedEventFilter;

    "AngelProtocolParamsUpdated()"(): AngelProtocolParamsUpdatedEventFilter;
    AngelProtocolParamsUpdated(): AngelProtocolParamsUpdatedEventFilter;

    "ConfigUpdated()"(): ConfigUpdatedEventFilter;
    ConfigUpdated(): ConfigUpdatedEventFilter;

    "FeeSettingsUpdated(uint8,uint256,address)"(
      _feeType?: null,
      _bpsRate?: null,
      _payoutAddress?: null
    ): FeeSettingsUpdatedEventFilter;
    FeeSettingsUpdated(
      _feeType?: null,
      _bpsRate?: null,
      _payoutAddress?: null
    ): FeeSettingsUpdatedEventFilter;

    "GasFeeUpdated(address,uint256)"(
      _tokenAddr?: null,
      _gasFee?: null
    ): GasFeeUpdatedEventFilter;
    GasFeeUpdated(_tokenAddr?: null, _gasFee?: null): GasFeeUpdatedEventFilter;

    "Initialized(uint8)"(version?: null): InitializedEventFilter;
    Initialized(version?: null): InitializedEventFilter;

    "NetworkConnectionPosted(uint256)"(
      chainId?: null
    ): NetworkConnectionPostedEventFilter;
    NetworkConnectionPosted(chainId?: null): NetworkConnectionPostedEventFilter;

    "NetworkConnectionRemoved(uint256)"(
      chainId?: null
    ): NetworkConnectionRemovedEventFilter;
    NetworkConnectionRemoved(
      chainId?: null
    ): NetworkConnectionRemovedEventFilter;

    "OwnershipTransferred(address,address)"(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;

    "RebalanceParamsUpdated()"(): RebalanceParamsUpdatedEventFilter;
    RebalanceParamsUpdated(): RebalanceParamsUpdatedEventFilter;

    "StrategyApprovalUpdated(bytes4,uint8)"(
      _strategyId?: null,
      _approvalState?: null
    ): StrategyApprovalUpdatedEventFilter;
    StrategyApprovalUpdated(
      _strategyId?: null,
      _approvalState?: null
    ): StrategyApprovalUpdatedEventFilter;

    "StrategyParamsUpdated(bytes4,string,address,address,uint8)"(
      _strategyId?: null,
      _network?: null,
      _lockAddr?: null,
      _liqAddr?: null,
      _approvalState?: null
    ): StrategyParamsUpdatedEventFilter;
    StrategyParamsUpdated(
      _strategyId?: null,
      _network?: null,
      _lockAddr?: null,
      _liqAddr?: null,
      _approvalState?: null
    ): StrategyParamsUpdatedEventFilter;

    "TokenAcceptanceUpdated(address,bool)"(
      _tokenAddr?: null,
      _isAccepted?: null
    ): TokenAcceptanceUpdatedEventFilter;
    TokenAcceptanceUpdated(
      _tokenAddr?: null,
      _isAccepted?: null
    ): TokenAcceptanceUpdatedEventFilter;
  };

  estimateGas: {
    getAPGoldfinchParams(overrides?: CallOverrides): Promise<BigNumber>;

    getAccountsContractAddressByChain(
      _targetChain: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getAngelProtocolParams(overrides?: CallOverrides): Promise<BigNumber>;

    getFeeSettingsByFeeType(
      _feeType: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getGasByToken(
      _tokenAddr: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRebalanceParams(overrides?: CallOverrides): Promise<BigNumber>;

    getStrategyApprovalState(
      _strategyId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getStrategyParamsById(
      _strategyId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getUniswapFactoryAddress(overrides?: CallOverrides): Promise<BigNumber>;

    getUniswapRouterAddress(overrides?: CallOverrides): Promise<BigNumber>;

    getVaultOperatorApproved(
      _operator: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "initialize((address,(uint256,uint256,uint256),address,address,address))"(
      details: RegistrarMessages.InstantiateRequestStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "initialize()"(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    isTokenAccepted(
      _tokenAddr: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    queryAllStrategies(overrides?: CallOverrides): Promise<BigNumber>;

    queryConfig(overrides?: CallOverrides): Promise<BigNumber>;

    queryNetworkConnection(
      networkName: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    queryTokenPriceFeed(
      token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setAPGoldfinchParams(
      _apGoldfinch: APGoldfinchConfigLib.APGoldfinchConfigStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setAccountsContractAddressByChain(
      _chainName: PromiseOrValue<string>,
      _accountsContractAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setAngelProtocolParams(
      _angelProtocolParams: LocalRegistrarLib.AngelProtocolParamsStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setFeeSettingsByFeesType(
      _feeType: PromiseOrValue<BigNumberish>,
      _rate: PromiseOrValue<BigNumberish>,
      _payout: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setGasByToken(
      _tokenAddr: PromiseOrValue<string>,
      _gasFee: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setRebalanceParams(
      _rebalanceParams: LocalRegistrarLib.RebalanceParamsStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setStrategyApprovalState(
      _strategyId: PromiseOrValue<BytesLike>,
      _approvalState: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setStrategyParams(
      _strategyId: PromiseOrValue<BytesLike>,
      _network: PromiseOrValue<string>,
      _lockAddr: PromiseOrValue<string>,
      _liqAddr: PromiseOrValue<string>,
      _approvalState: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setTokenAccepted(
      _tokenAddr: PromiseOrValue<string>,
      _isAccepted: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setUniswapAddresses(
      _uniswapRouter: PromiseOrValue<string>,
      _uniswapFactory: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setVaultOperatorApproved(
      _operator: PromiseOrValue<string>,
      _isApproved: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    updateConfig(
      details: RegistrarMessages.UpdateConfigRequestStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    updateNetworkConnections(
      networkName: PromiseOrValue<string>,
      networkInfo: IAccountsStrategy.NetworkInfoStruct,
      action: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    updateTokenPriceFeed(
      token: PromiseOrValue<string>,
      priceFeed: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    getAPGoldfinchParams(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getAccountsContractAddressByChain(
      _targetChain: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getAngelProtocolParams(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getFeeSettingsByFeeType(
      _feeType: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getGasByToken(
      _tokenAddr: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRebalanceParams(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getStrategyApprovalState(
      _strategyId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getStrategyParamsById(
      _strategyId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getUniswapFactoryAddress(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getUniswapRouterAddress(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getVaultOperatorApproved(
      _operator: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "initialize((address,(uint256,uint256,uint256),address,address,address))"(
      details: RegistrarMessages.InstantiateRequestStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "initialize()"(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    isTokenAccepted(
      _tokenAddr: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    queryAllStrategies(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    queryConfig(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    queryNetworkConnection(
      networkName: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    queryTokenPriceFeed(
      token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setAPGoldfinchParams(
      _apGoldfinch: APGoldfinchConfigLib.APGoldfinchConfigStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setAccountsContractAddressByChain(
      _chainName: PromiseOrValue<string>,
      _accountsContractAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setAngelProtocolParams(
      _angelProtocolParams: LocalRegistrarLib.AngelProtocolParamsStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setFeeSettingsByFeesType(
      _feeType: PromiseOrValue<BigNumberish>,
      _rate: PromiseOrValue<BigNumberish>,
      _payout: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setGasByToken(
      _tokenAddr: PromiseOrValue<string>,
      _gasFee: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setRebalanceParams(
      _rebalanceParams: LocalRegistrarLib.RebalanceParamsStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setStrategyApprovalState(
      _strategyId: PromiseOrValue<BytesLike>,
      _approvalState: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setStrategyParams(
      _strategyId: PromiseOrValue<BytesLike>,
      _network: PromiseOrValue<string>,
      _lockAddr: PromiseOrValue<string>,
      _liqAddr: PromiseOrValue<string>,
      _approvalState: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setTokenAccepted(
      _tokenAddr: PromiseOrValue<string>,
      _isAccepted: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setUniswapAddresses(
      _uniswapRouter: PromiseOrValue<string>,
      _uniswapFactory: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setVaultOperatorApproved(
      _operator: PromiseOrValue<string>,
      _isApproved: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    updateConfig(
      details: RegistrarMessages.UpdateConfigRequestStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    updateNetworkConnections(
      networkName: PromiseOrValue<string>,
      networkInfo: IAccountsStrategy.NetworkInfoStruct,
      action: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    updateTokenPriceFeed(
      token: PromiseOrValue<string>,
      priceFeed: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
