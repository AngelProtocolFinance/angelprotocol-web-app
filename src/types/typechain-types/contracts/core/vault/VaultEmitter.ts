/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "../../../common";

export declare namespace IVault {
  export type VaultConfigStruct = {
    vaultType: BigNumberish;
    strategyId: BytesLike;
    strategy: string;
    registrar: string;
    baseToken: string;
    yieldToken: string;
    apTokenName: string;
    apTokenSymbol: string;
    admin: string;
  };

  export type VaultConfigStructOutput = [
    number,
    string,
    string,
    string,
    string,
    string,
    string,
    string,
    string
  ] & {
    vaultType: number;
    strategyId: string;
    strategy: string;
    registrar: string;
    baseToken: string;
    yieldToken: string;
    apTokenName: string;
    apTokenSymbol: string;
    admin: string;
  };
}

export interface VaultEmitterInterface extends utils.Interface {
  functions: {
    "deposit(uint32,address,uint256,uint256)": FunctionFragment;
    "initialize()": FunctionFragment;
    "owner()": FunctionFragment;
    "redeem(uint32,address,uint256,uint256)": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "vaultConfigUpdated(address,(uint8,bytes4,address,address,address,address,string,string,address))": FunctionFragment;
    "vaultCreated(address,(uint8,bytes4,address,address,address,address,string,string,address))": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "deposit"
      | "initialize"
      | "owner"
      | "redeem"
      | "renounceOwnership"
      | "transferOwnership"
      | "vaultConfigUpdated"
      | "vaultCreated"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "deposit",
    values: [BigNumberish, string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "redeem",
    values: [BigNumberish, string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "vaultConfigUpdated",
    values: [string, IVault.VaultConfigStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "vaultCreated",
    values: [string, IVault.VaultConfigStruct]
  ): string;

  decodeFunctionResult(functionFragment: "deposit", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "redeem", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "vaultConfigUpdated",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "vaultCreated",
    data: BytesLike
  ): Result;

  events: {
    "Deposit(uint32,address,uint256,uint256)": EventFragment;
    "Initialized(uint8)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "Redeem(uint32,address,uint256,uint256)": EventFragment;
    "VaultConfigUpdated(address,(uint8,bytes4,address,address,address,address,string,string,address))": EventFragment;
    "VaultCreated(address,(uint8,bytes4,address,address,address,address,string,string,address))": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Deposit"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Initialized"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Redeem"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "VaultConfigUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "VaultCreated"): EventFragment;
}

export interface DepositEventObject {
  endowId: number;
  vault: string;
  amount: BigNumber;
  sharesReceived: BigNumber;
}
export type DepositEvent = TypedEvent<
  [number, string, BigNumber, BigNumber],
  DepositEventObject
>;

export type DepositEventFilter = TypedEventFilter<DepositEvent>;

export interface InitializedEventObject {
  version: number;
}
export type InitializedEvent = TypedEvent<[number], InitializedEventObject>;

export type InitializedEventFilter = TypedEventFilter<InitializedEvent>;

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  OwnershipTransferredEventObject
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface RedeemEventObject {
  endowId: number;
  vault: string;
  shares: BigNumber;
  amountRedeemed: BigNumber;
}
export type RedeemEvent = TypedEvent<
  [number, string, BigNumber, BigNumber],
  RedeemEventObject
>;

export type RedeemEventFilter = TypedEventFilter<RedeemEvent>;

export interface VaultConfigUpdatedEventObject {
  vault: string;
  config: IVault.VaultConfigStructOutput;
}
export type VaultConfigUpdatedEvent = TypedEvent<
  [string, IVault.VaultConfigStructOutput],
  VaultConfigUpdatedEventObject
>;

export type VaultConfigUpdatedEventFilter =
  TypedEventFilter<VaultConfigUpdatedEvent>;

export interface VaultCreatedEventObject {
  vault: string;
  config: IVault.VaultConfigStructOutput;
}
export type VaultCreatedEvent = TypedEvent<
  [string, IVault.VaultConfigStructOutput],
  VaultCreatedEventObject
>;

export type VaultCreatedEventFilter = TypedEventFilter<VaultCreatedEvent>;

export interface VaultEmitter extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: VaultEmitterInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    deposit(
      endowId: BigNumberish,
      vault: string,
      amount: BigNumberish,
      sharesReceived: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    initialize(
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    redeem(
      endowId: BigNumberish,
      vault: string,
      shares: BigNumberish,
      amountRedeemed: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    vaultConfigUpdated(
      vault: string,
      config: IVault.VaultConfigStruct,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    vaultCreated(
      vault: string,
      config: IVault.VaultConfigStruct,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;
  };

  deposit(
    endowId: BigNumberish,
    vault: string,
    amount: BigNumberish,
    sharesReceived: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  initialize(
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  owner(overrides?: CallOverrides): Promise<string>;

  redeem(
    endowId: BigNumberish,
    vault: string,
    shares: BigNumberish,
    amountRedeemed: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  renounceOwnership(
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  vaultConfigUpdated(
    vault: string,
    config: IVault.VaultConfigStruct,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  vaultCreated(
    vault: string,
    config: IVault.VaultConfigStruct,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  callStatic: {
    deposit(
      endowId: BigNumberish,
      vault: string,
      amount: BigNumberish,
      sharesReceived: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    initialize(overrides?: CallOverrides): Promise<void>;

    owner(overrides?: CallOverrides): Promise<string>;

    redeem(
      endowId: BigNumberish,
      vault: string,
      shares: BigNumberish,
      amountRedeemed: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    vaultConfigUpdated(
      vault: string,
      config: IVault.VaultConfigStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    vaultCreated(
      vault: string,
      config: IVault.VaultConfigStruct,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "Deposit(uint32,address,uint256,uint256)"(
      endowId?: null,
      vault?: null,
      amount?: null,
      sharesReceived?: null
    ): DepositEventFilter;
    Deposit(
      endowId?: null,
      vault?: null,
      amount?: null,
      sharesReceived?: null
    ): DepositEventFilter;

    "Initialized(uint8)"(version?: null): InitializedEventFilter;
    Initialized(version?: null): InitializedEventFilter;

    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;

    "Redeem(uint32,address,uint256,uint256)"(
      endowId?: null,
      vault?: null,
      shares?: null,
      amountRedeemed?: null
    ): RedeemEventFilter;
    Redeem(
      endowId?: null,
      vault?: null,
      shares?: null,
      amountRedeemed?: null
    ): RedeemEventFilter;

    "VaultConfigUpdated(address,(uint8,bytes4,address,address,address,address,string,string,address))"(
      vault?: null,
      config?: null
    ): VaultConfigUpdatedEventFilter;
    VaultConfigUpdated(
      vault?: null,
      config?: null
    ): VaultConfigUpdatedEventFilter;

    "VaultCreated(address,(uint8,bytes4,address,address,address,address,string,string,address))"(
      vault?: null,
      config?: null
    ): VaultCreatedEventFilter;
    VaultCreated(vault?: null, config?: null): VaultCreatedEventFilter;
  };

  estimateGas: {
    deposit(
      endowId: BigNumberish,
      vault: string,
      amount: BigNumberish,
      sharesReceived: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    initialize(overrides?: Overrides & { from?: string }): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    redeem(
      endowId: BigNumberish,
      vault: string,
      shares: BigNumberish,
      amountRedeemed: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    vaultConfigUpdated(
      vault: string,
      config: IVault.VaultConfigStruct,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    vaultCreated(
      vault: string,
      config: IVault.VaultConfigStruct,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    deposit(
      endowId: BigNumberish,
      vault: string,
      amount: BigNumberish,
      sharesReceived: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    initialize(
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    redeem(
      endowId: BigNumberish,
      vault: string,
      shares: BigNumberish,
      amountRedeemed: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    vaultConfigUpdated(
      vault: string,
      config: IVault.VaultConfigStruct,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    vaultCreated(
      vault: string,
      config: IVault.VaultConfigStruct,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;
  };
}
