/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "../../../common";

export declare namespace IStrategy {
  export type StrategyConfigStruct = {
    strategyId: BytesLike;
    baseToken: string;
    yieldToken: string;
    admin: string;
  };

  export type StrategyConfigStructOutput = [string, string, string, string] & {
    strategyId: string;
    baseToken: string;
    yieldToken: string;
    admin: string;
  };
}

export interface IStrategyInterface extends utils.Interface {
  functions: {
    "deposit(uint256)": FunctionFragment;
    "getStrategyConfig()": FunctionFragment;
    "paused()": FunctionFragment;
    "previewDeposit(uint256)": FunctionFragment;
    "previewWithdraw(uint256)": FunctionFragment;
    "setStrategyConfig((bytes4,address,address,address))": FunctionFragment;
    "withdraw(uint256)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "deposit"
      | "getStrategyConfig"
      | "paused"
      | "previewDeposit"
      | "previewWithdraw"
      | "setStrategyConfig"
      | "withdraw"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "deposit",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getStrategyConfig",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "paused", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "previewDeposit",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "previewWithdraw",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setStrategyConfig",
    values: [IStrategy.StrategyConfigStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "withdraw",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(functionFragment: "deposit", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getStrategyConfig",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "paused", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "previewDeposit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "previewWithdraw",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setStrategyConfig",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;

  events: {
    "ConfigChanged((bytes4,address,address,address))": EventFragment;
    "EnteredPosition(uint256,uint256)": EventFragment;
    "LogError(string)": EventFragment;
    "LogErrorBytes(bytes)": EventFragment;
    "WithdrewPosition(uint256,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "ConfigChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "EnteredPosition"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LogError"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LogErrorBytes"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "WithdrewPosition"): EventFragment;
}

export interface ConfigChangedEventObject {
  stratConfig: IStrategy.StrategyConfigStructOutput;
}
export type ConfigChangedEvent = TypedEvent<
  [IStrategy.StrategyConfigStructOutput],
  ConfigChangedEventObject
>;

export type ConfigChangedEventFilter = TypedEventFilter<ConfigChangedEvent>;

export interface EnteredPositionEventObject {
  baseTokenAmt: BigNumber;
  yieldTokenAmt: BigNumber;
}
export type EnteredPositionEvent = TypedEvent<
  [BigNumber, BigNumber],
  EnteredPositionEventObject
>;

export type EnteredPositionEventFilter = TypedEventFilter<EnteredPositionEvent>;

export interface LogErrorEventObject {
  message: string;
}
export type LogErrorEvent = TypedEvent<[string], LogErrorEventObject>;

export type LogErrorEventFilter = TypedEventFilter<LogErrorEvent>;

export interface LogErrorBytesEventObject {
  data: string;
}
export type LogErrorBytesEvent = TypedEvent<[string], LogErrorBytesEventObject>;

export type LogErrorBytesEventFilter = TypedEventFilter<LogErrorBytesEvent>;

export interface WithdrewPositionEventObject {
  yieldTokenAmt: BigNumber;
  baseTokenAmt: BigNumber;
}
export type WithdrewPositionEvent = TypedEvent<
  [BigNumber, BigNumber],
  WithdrewPositionEventObject
>;

export type WithdrewPositionEventFilter =
  TypedEventFilter<WithdrewPositionEvent>;

export interface IStrategy extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IStrategyInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    deposit(
      amt: BigNumberish,
      overrides?: PayableOverrides & { from?: string }
    ): Promise<ContractTransaction>;

    getStrategyConfig(
      overrides?: CallOverrides
    ): Promise<[IStrategy.StrategyConfigStructOutput]>;

    paused(overrides?: CallOverrides): Promise<[boolean]>;

    previewDeposit(
      amt: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    previewWithdraw(
      amt: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    setStrategyConfig(
      _newConfig: IStrategy.StrategyConfigStruct,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    withdraw(
      amt: BigNumberish,
      overrides?: PayableOverrides & { from?: string }
    ): Promise<ContractTransaction>;
  };

  deposit(
    amt: BigNumberish,
    overrides?: PayableOverrides & { from?: string }
  ): Promise<ContractTransaction>;

  getStrategyConfig(
    overrides?: CallOverrides
  ): Promise<IStrategy.StrategyConfigStructOutput>;

  paused(overrides?: CallOverrides): Promise<boolean>;

  previewDeposit(
    amt: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  previewWithdraw(
    amt: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  setStrategyConfig(
    _newConfig: IStrategy.StrategyConfigStruct,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  withdraw(
    amt: BigNumberish,
    overrides?: PayableOverrides & { from?: string }
  ): Promise<ContractTransaction>;

  callStatic: {
    deposit(amt: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    getStrategyConfig(
      overrides?: CallOverrides
    ): Promise<IStrategy.StrategyConfigStructOutput>;

    paused(overrides?: CallOverrides): Promise<boolean>;

    previewDeposit(
      amt: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    previewWithdraw(
      amt: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    setStrategyConfig(
      _newConfig: IStrategy.StrategyConfigStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    withdraw(amt: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;
  };

  filters: {
    "ConfigChanged((bytes4,address,address,address))"(
      stratConfig?: null
    ): ConfigChangedEventFilter;
    ConfigChanged(stratConfig?: null): ConfigChangedEventFilter;

    "EnteredPosition(uint256,uint256)"(
      baseTokenAmt?: null,
      yieldTokenAmt?: null
    ): EnteredPositionEventFilter;
    EnteredPosition(
      baseTokenAmt?: null,
      yieldTokenAmt?: null
    ): EnteredPositionEventFilter;

    "LogError(string)"(message?: null): LogErrorEventFilter;
    LogError(message?: null): LogErrorEventFilter;

    "LogErrorBytes(bytes)"(data?: null): LogErrorBytesEventFilter;
    LogErrorBytes(data?: null): LogErrorBytesEventFilter;

    "WithdrewPosition(uint256,uint256)"(
      yieldTokenAmt?: null,
      baseTokenAmt?: null
    ): WithdrewPositionEventFilter;
    WithdrewPosition(
      yieldTokenAmt?: null,
      baseTokenAmt?: null
    ): WithdrewPositionEventFilter;
  };

  estimateGas: {
    deposit(
      amt: BigNumberish,
      overrides?: PayableOverrides & { from?: string }
    ): Promise<BigNumber>;

    getStrategyConfig(overrides?: CallOverrides): Promise<BigNumber>;

    paused(overrides?: CallOverrides): Promise<BigNumber>;

    previewDeposit(
      amt: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    previewWithdraw(
      amt: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    setStrategyConfig(
      _newConfig: IStrategy.StrategyConfigStruct,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    withdraw(
      amt: BigNumberish,
      overrides?: PayableOverrides & { from?: string }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    deposit(
      amt: BigNumberish,
      overrides?: PayableOverrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    getStrategyConfig(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    paused(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    previewDeposit(
      amt: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    previewWithdraw(
      amt: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    setStrategyConfig(
      _newConfig: IStrategy.StrategyConfigStruct,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    withdraw(
      amt: BigNumberish,
      overrides?: PayableOverrides & { from?: string }
    ): Promise<PopulatedTransaction>;
  };
}
