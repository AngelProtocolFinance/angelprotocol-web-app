/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../../common";

export declare namespace AngelCoreStruct {
  export type SplitDetailsStruct = {
    max: PromiseOrValue<BigNumberish>;
    min: PromiseOrValue<BigNumberish>;
    defaultSplit: PromiseOrValue<BigNumberish>;
  };

  export type SplitDetailsStructOutput = [BigNumber, BigNumber, BigNumber] & {
    max: BigNumber;
    min: BigNumber;
    defaultSplit: BigNumber;
  };

  export type FeeSettingStruct = {
    payoutAddress: PromiseOrValue<string>;
    bps: PromiseOrValue<BigNumberish>;
  };

  export type FeeSettingStructOutput = [string, BigNumber] & {
    payoutAddress: string;
    bps: BigNumber;
  };
}

export interface AngelCoreStructInterface extends utils.Interface {
  functions: {
    "checkSplits((uint256,uint256,uint256),uint256,uint256,bool)": FunctionFragment;
    "validateFee((address,uint256))": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic: "checkSplits" | "validateFee"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "checkSplits",
    values: [
      AngelCoreStruct.SplitDetailsStruct,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<boolean>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "validateFee",
    values: [AngelCoreStruct.FeeSettingStruct]
  ): string;

  decodeFunctionResult(
    functionFragment: "checkSplits",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "validateFee",
    data: BytesLike
  ): Result;

  events: {};
}

export interface AngelCoreStruct extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: AngelCoreStructInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    checkSplits(
      splits: AngelCoreStruct.SplitDetailsStruct,
      userLocked: PromiseOrValue<BigNumberish>,
      userLiquid: PromiseOrValue<BigNumberish>,
      userOverride: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber]>;

    validateFee(
      fee: AngelCoreStruct.FeeSettingStruct,
      overrides?: CallOverrides
    ): Promise<[void]>;
  };

  checkSplits(
    splits: AngelCoreStruct.SplitDetailsStruct,
    userLocked: PromiseOrValue<BigNumberish>,
    userLiquid: PromiseOrValue<BigNumberish>,
    userOverride: PromiseOrValue<boolean>,
    overrides?: CallOverrides
  ): Promise<[BigNumber, BigNumber]>;

  validateFee(
    fee: AngelCoreStruct.FeeSettingStruct,
    overrides?: CallOverrides
  ): Promise<void>;

  callStatic: {
    checkSplits(
      splits: AngelCoreStruct.SplitDetailsStruct,
      userLocked: PromiseOrValue<BigNumberish>,
      userLiquid: PromiseOrValue<BigNumberish>,
      userOverride: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber]>;

    validateFee(
      fee: AngelCoreStruct.FeeSettingStruct,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {};

  estimateGas: {
    checkSplits(
      splits: AngelCoreStruct.SplitDetailsStruct,
      userLocked: PromiseOrValue<BigNumberish>,
      userLiquid: PromiseOrValue<BigNumberish>,
      userOverride: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    validateFee(
      fee: AngelCoreStruct.FeeSettingStruct,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    checkSplits(
      splits: AngelCoreStruct.SplitDetailsStruct,
      userLocked: PromiseOrValue<BigNumberish>,
      userLiquid: PromiseOrValue<BigNumberish>,
      userOverride: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    validateFee(
      fee: AngelCoreStruct.FeeSettingStruct,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
