/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../../common";

export interface EndowmentMultiSigEmitterInterface extends utils.Interface {
  functions: {
    "addOwnersEndowment(uint256,address[])": FunctionFragment;
    "approvalsRequirementChangeEndowment(uint256,uint256)": FunctionFragment;
    "confirmEndowment(uint256,address,uint256)": FunctionFragment;
    "createMultisig(address,uint256,address,address[],uint256,bool,uint256)": FunctionFragment;
    "depositEndowment(uint256,address,uint256)": FunctionFragment;
    "executeEndowment(uint256,uint256)": FunctionFragment;
    "executeFailureEndowment(uint256,uint256)": FunctionFragment;
    "initEndowmentMultiSigEmitter(address)": FunctionFragment;
    "removeOwnersEndowment(uint256,address[])": FunctionFragment;
    "replaceOwnerEndowment(uint256,address,address)": FunctionFragment;
    "revokeEndowment(uint256,address,uint256)": FunctionFragment;
    "submitEndowment(uint256,uint256)": FunctionFragment;
    "transactionExpiryChangeEndowment(uint256,uint256)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "addOwnersEndowment"
      | "approvalsRequirementChangeEndowment"
      | "confirmEndowment"
      | "createMultisig"
      | "depositEndowment"
      | "executeEndowment"
      | "executeFailureEndowment"
      | "initEndowmentMultiSigEmitter"
      | "removeOwnersEndowment"
      | "replaceOwnerEndowment"
      | "revokeEndowment"
      | "submitEndowment"
      | "transactionExpiryChangeEndowment"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "addOwnersEndowment",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>[]]
  ): string;
  encodeFunctionData(
    functionFragment: "approvalsRequirementChangeEndowment",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "confirmEndowment",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "createMultisig",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<string>[],
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<boolean>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "depositEndowment",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "executeEndowment",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "executeFailureEndowment",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "initEndowmentMultiSigEmitter",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "removeOwnersEndowment",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>[]]
  ): string;
  encodeFunctionData(
    functionFragment: "replaceOwnerEndowment",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "revokeEndowment",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "submitEndowment",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "transactionExpiryChangeEndowment",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;

  decodeFunctionResult(
    functionFragment: "addOwnersEndowment",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "approvalsRequirementChangeEndowment",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "confirmEndowment",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createMultisig",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "depositEndowment",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "executeEndowment",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "executeFailureEndowment",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "initEndowmentMultiSigEmitter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeOwnersEndowment",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "replaceOwnerEndowment",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "revokeEndowment",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "submitEndowment",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transactionExpiryChangeEndowment",
    data: BytesLike
  ): Result;

  events: {
    "ApprovalRequirementsUpdated(uint256,uint256)": EventFragment;
    "ConfirmationRevoked(uint256,address,uint256)": EventFragment;
    "Deposit(uint256,address,uint256)": EventFragment;
    "EndowmentConfirmed(uint256,address,uint256)": EventFragment;
    "EndowmentSubmitted(uint256,uint256)": EventFragment;
    "EndowmentTransactionExpiryChanged(uint256,uint256)": EventFragment;
    "Initialized()": EventFragment;
    "MultisigCreated(address,uint256,address,address[],uint256,bool,uint256)": EventFragment;
    "OwnerReplaced(uint256,address,address)": EventFragment;
    "OwnersAdded(uint256,address[])": EventFragment;
    "OwnersRemoved(uint256,address[])": EventFragment;
    "TransactionExecuted(uint256,uint256)": EventFragment;
    "TransactionExecutionFailed(uint256,uint256)": EventFragment;
  };

  getEvent(
    nameOrSignatureOrTopic: "ApprovalRequirementsUpdated"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ConfirmationRevoked"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Deposit"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "EndowmentConfirmed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "EndowmentSubmitted"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "EndowmentTransactionExpiryChanged"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Initialized"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "MultisigCreated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnerReplaced"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnersAdded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnersRemoved"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TransactionExecuted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TransactionExecutionFailed"): EventFragment;
}

export interface ApprovalRequirementsUpdatedEventObject {
  endowmentId: BigNumber;
  approvalsRequired: BigNumber;
}
export type ApprovalRequirementsUpdatedEvent = TypedEvent<
  [BigNumber, BigNumber],
  ApprovalRequirementsUpdatedEventObject
>;

export type ApprovalRequirementsUpdatedEventFilter =
  TypedEventFilter<ApprovalRequirementsUpdatedEvent>;

export interface ConfirmationRevokedEventObject {
  endowmentId: BigNumber;
  sender: string;
  transactionId: BigNumber;
}
export type ConfirmationRevokedEvent = TypedEvent<
  [BigNumber, string, BigNumber],
  ConfirmationRevokedEventObject
>;

export type ConfirmationRevokedEventFilter =
  TypedEventFilter<ConfirmationRevokedEvent>;

export interface DepositEventObject {
  endowmentId: BigNumber;
  sender: string;
  amount: BigNumber;
}
export type DepositEvent = TypedEvent<
  [BigNumber, string, BigNumber],
  DepositEventObject
>;

export type DepositEventFilter = TypedEventFilter<DepositEvent>;

export interface EndowmentConfirmedEventObject {
  endowmentId: BigNumber;
  sender: string;
  transactionId: BigNumber;
}
export type EndowmentConfirmedEvent = TypedEvent<
  [BigNumber, string, BigNumber],
  EndowmentConfirmedEventObject
>;

export type EndowmentConfirmedEventFilter =
  TypedEventFilter<EndowmentConfirmedEvent>;

export interface EndowmentSubmittedEventObject {
  endowmentId: BigNumber;
  transactionId: BigNumber;
}
export type EndowmentSubmittedEvent = TypedEvent<
  [BigNumber, BigNumber],
  EndowmentSubmittedEventObject
>;

export type EndowmentSubmittedEventFilter =
  TypedEventFilter<EndowmentSubmittedEvent>;

export interface EndowmentTransactionExpiryChangedEventObject {
  endowmentId: BigNumber;
  transactionExpiry: BigNumber;
}
export type EndowmentTransactionExpiryChangedEvent = TypedEvent<
  [BigNumber, BigNumber],
  EndowmentTransactionExpiryChangedEventObject
>;

export type EndowmentTransactionExpiryChangedEventFilter =
  TypedEventFilter<EndowmentTransactionExpiryChangedEvent>;

export interface InitializedEventObject {}
export type InitializedEvent = TypedEvent<[], InitializedEventObject>;

export type InitializedEventFilter = TypedEventFilter<InitializedEvent>;

export interface MultisigCreatedEventObject {
  multisigAddress: string;
  endowmentId: BigNumber;
  emitter: string;
  owners: string[];
  required: BigNumber;
  requireExecution: boolean;
  transactionExpiry: BigNumber;
}
export type MultisigCreatedEvent = TypedEvent<
  [string, BigNumber, string, string[], BigNumber, boolean, BigNumber],
  MultisigCreatedEventObject
>;

export type MultisigCreatedEventFilter = TypedEventFilter<MultisigCreatedEvent>;

export interface OwnerReplacedEventObject {
  endowmentId: BigNumber;
  currOwner: string;
  newOwner: string;
}
export type OwnerReplacedEvent = TypedEvent<
  [BigNumber, string, string],
  OwnerReplacedEventObject
>;

export type OwnerReplacedEventFilter = TypedEventFilter<OwnerReplacedEvent>;

export interface OwnersAddedEventObject {
  endowmentId: BigNumber;
  owners: string[];
}
export type OwnersAddedEvent = TypedEvent<
  [BigNumber, string[]],
  OwnersAddedEventObject
>;

export type OwnersAddedEventFilter = TypedEventFilter<OwnersAddedEvent>;

export interface OwnersRemovedEventObject {
  endowmentId: BigNumber;
  owners: string[];
}
export type OwnersRemovedEvent = TypedEvent<
  [BigNumber, string[]],
  OwnersRemovedEventObject
>;

export type OwnersRemovedEventFilter = TypedEventFilter<OwnersRemovedEvent>;

export interface TransactionExecutedEventObject {
  endowmentId: BigNumber;
  transactionId: BigNumber;
}
export type TransactionExecutedEvent = TypedEvent<
  [BigNumber, BigNumber],
  TransactionExecutedEventObject
>;

export type TransactionExecutedEventFilter =
  TypedEventFilter<TransactionExecutedEvent>;

export interface TransactionExecutionFailedEventObject {
  endowmentId: BigNumber;
  transactionId: BigNumber;
}
export type TransactionExecutionFailedEvent = TypedEvent<
  [BigNumber, BigNumber],
  TransactionExecutionFailedEventObject
>;

export type TransactionExecutionFailedEventFilter =
  TypedEventFilter<TransactionExecutionFailedEvent>;

export interface EndowmentMultiSigEmitter extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: EndowmentMultiSigEmitterInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    addOwnersEndowment(
      endowmentId: PromiseOrValue<BigNumberish>,
      owners: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    approvalsRequirementChangeEndowment(
      endowmentId: PromiseOrValue<BigNumberish>,
      approvalsRequired: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    confirmEndowment(
      endowmentId: PromiseOrValue<BigNumberish>,
      sender: PromiseOrValue<string>,
      transactionId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    createMultisig(
      multisigAddress: PromiseOrValue<string>,
      endowmentId: PromiseOrValue<BigNumberish>,
      emitter: PromiseOrValue<string>,
      owners: PromiseOrValue<string>[],
      required: PromiseOrValue<BigNumberish>,
      requireExecution: PromiseOrValue<boolean>,
      transactionExpiry: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    depositEndowment(
      endowmentId: PromiseOrValue<BigNumberish>,
      sender: PromiseOrValue<string>,
      value: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    executeEndowment(
      endowmentId: PromiseOrValue<BigNumberish>,
      transactionId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    executeFailureEndowment(
      endowmentId: PromiseOrValue<BigNumberish>,
      transactionId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    initEndowmentMultiSigEmitter(
      _multisigFactory: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    removeOwnersEndowment(
      endowmentId: PromiseOrValue<BigNumberish>,
      owners: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    replaceOwnerEndowment(
      endowmentId: PromiseOrValue<BigNumberish>,
      currOwner: PromiseOrValue<string>,
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    revokeEndowment(
      endowmentId: PromiseOrValue<BigNumberish>,
      sender: PromiseOrValue<string>,
      transactionId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    submitEndowment(
      endowmentId: PromiseOrValue<BigNumberish>,
      transactionId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    transactionExpiryChangeEndowment(
      endowmentId: PromiseOrValue<BigNumberish>,
      transactionExpiry: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  addOwnersEndowment(
    endowmentId: PromiseOrValue<BigNumberish>,
    owners: PromiseOrValue<string>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  approvalsRequirementChangeEndowment(
    endowmentId: PromiseOrValue<BigNumberish>,
    approvalsRequired: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  confirmEndowment(
    endowmentId: PromiseOrValue<BigNumberish>,
    sender: PromiseOrValue<string>,
    transactionId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  createMultisig(
    multisigAddress: PromiseOrValue<string>,
    endowmentId: PromiseOrValue<BigNumberish>,
    emitter: PromiseOrValue<string>,
    owners: PromiseOrValue<string>[],
    required: PromiseOrValue<BigNumberish>,
    requireExecution: PromiseOrValue<boolean>,
    transactionExpiry: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  depositEndowment(
    endowmentId: PromiseOrValue<BigNumberish>,
    sender: PromiseOrValue<string>,
    value: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  executeEndowment(
    endowmentId: PromiseOrValue<BigNumberish>,
    transactionId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  executeFailureEndowment(
    endowmentId: PromiseOrValue<BigNumberish>,
    transactionId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  initEndowmentMultiSigEmitter(
    _multisigFactory: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  removeOwnersEndowment(
    endowmentId: PromiseOrValue<BigNumberish>,
    owners: PromiseOrValue<string>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  replaceOwnerEndowment(
    endowmentId: PromiseOrValue<BigNumberish>,
    currOwner: PromiseOrValue<string>,
    newOwner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  revokeEndowment(
    endowmentId: PromiseOrValue<BigNumberish>,
    sender: PromiseOrValue<string>,
    transactionId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  submitEndowment(
    endowmentId: PromiseOrValue<BigNumberish>,
    transactionId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  transactionExpiryChangeEndowment(
    endowmentId: PromiseOrValue<BigNumberish>,
    transactionExpiry: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    addOwnersEndowment(
      endowmentId: PromiseOrValue<BigNumberish>,
      owners: PromiseOrValue<string>[],
      overrides?: CallOverrides
    ): Promise<void>;

    approvalsRequirementChangeEndowment(
      endowmentId: PromiseOrValue<BigNumberish>,
      approvalsRequired: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    confirmEndowment(
      endowmentId: PromiseOrValue<BigNumberish>,
      sender: PromiseOrValue<string>,
      transactionId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    createMultisig(
      multisigAddress: PromiseOrValue<string>,
      endowmentId: PromiseOrValue<BigNumberish>,
      emitter: PromiseOrValue<string>,
      owners: PromiseOrValue<string>[],
      required: PromiseOrValue<BigNumberish>,
      requireExecution: PromiseOrValue<boolean>,
      transactionExpiry: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    depositEndowment(
      endowmentId: PromiseOrValue<BigNumberish>,
      sender: PromiseOrValue<string>,
      value: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    executeEndowment(
      endowmentId: PromiseOrValue<BigNumberish>,
      transactionId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    executeFailureEndowment(
      endowmentId: PromiseOrValue<BigNumberish>,
      transactionId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    initEndowmentMultiSigEmitter(
      _multisigFactory: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    removeOwnersEndowment(
      endowmentId: PromiseOrValue<BigNumberish>,
      owners: PromiseOrValue<string>[],
      overrides?: CallOverrides
    ): Promise<void>;

    replaceOwnerEndowment(
      endowmentId: PromiseOrValue<BigNumberish>,
      currOwner: PromiseOrValue<string>,
      newOwner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    revokeEndowment(
      endowmentId: PromiseOrValue<BigNumberish>,
      sender: PromiseOrValue<string>,
      transactionId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    submitEndowment(
      endowmentId: PromiseOrValue<BigNumberish>,
      transactionId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    transactionExpiryChangeEndowment(
      endowmentId: PromiseOrValue<BigNumberish>,
      transactionExpiry: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "ApprovalRequirementsUpdated(uint256,uint256)"(
      endowmentId?: null,
      approvalsRequired?: null
    ): ApprovalRequirementsUpdatedEventFilter;
    ApprovalRequirementsUpdated(
      endowmentId?: null,
      approvalsRequired?: null
    ): ApprovalRequirementsUpdatedEventFilter;

    "ConfirmationRevoked(uint256,address,uint256)"(
      endowmentId?: null,
      sender?: null,
      transactionId?: null
    ): ConfirmationRevokedEventFilter;
    ConfirmationRevoked(
      endowmentId?: null,
      sender?: null,
      transactionId?: null
    ): ConfirmationRevokedEventFilter;

    "Deposit(uint256,address,uint256)"(
      endowmentId?: null,
      sender?: null,
      amount?: null
    ): DepositEventFilter;
    Deposit(
      endowmentId?: null,
      sender?: null,
      amount?: null
    ): DepositEventFilter;

    "EndowmentConfirmed(uint256,address,uint256)"(
      endowmentId?: null,
      sender?: null,
      transactionId?: null
    ): EndowmentConfirmedEventFilter;
    EndowmentConfirmed(
      endowmentId?: null,
      sender?: null,
      transactionId?: null
    ): EndowmentConfirmedEventFilter;

    "EndowmentSubmitted(uint256,uint256)"(
      endowmentId?: null,
      transactionId?: null
    ): EndowmentSubmittedEventFilter;
    EndowmentSubmitted(
      endowmentId?: null,
      transactionId?: null
    ): EndowmentSubmittedEventFilter;

    "EndowmentTransactionExpiryChanged(uint256,uint256)"(
      endowmentId?: null,
      transactionExpiry?: null
    ): EndowmentTransactionExpiryChangedEventFilter;
    EndowmentTransactionExpiryChanged(
      endowmentId?: null,
      transactionExpiry?: null
    ): EndowmentTransactionExpiryChangedEventFilter;

    "Initialized()"(): InitializedEventFilter;
    Initialized(): InitializedEventFilter;

    "MultisigCreated(address,uint256,address,address[],uint256,bool,uint256)"(
      multisigAddress?: null,
      endowmentId?: null,
      emitter?: null,
      owners?: null,
      required?: null,
      requireExecution?: null,
      transactionExpiry?: null
    ): MultisigCreatedEventFilter;
    MultisigCreated(
      multisigAddress?: null,
      endowmentId?: null,
      emitter?: null,
      owners?: null,
      required?: null,
      requireExecution?: null,
      transactionExpiry?: null
    ): MultisigCreatedEventFilter;

    "OwnerReplaced(uint256,address,address)"(
      endowmentId?: null,
      currOwner?: null,
      newOwner?: null
    ): OwnerReplacedEventFilter;
    OwnerReplaced(
      endowmentId?: null,
      currOwner?: null,
      newOwner?: null
    ): OwnerReplacedEventFilter;

    "OwnersAdded(uint256,address[])"(
      endowmentId?: null,
      owners?: null
    ): OwnersAddedEventFilter;
    OwnersAdded(endowmentId?: null, owners?: null): OwnersAddedEventFilter;

    "OwnersRemoved(uint256,address[])"(
      endowmentId?: null,
      owners?: null
    ): OwnersRemovedEventFilter;
    OwnersRemoved(endowmentId?: null, owners?: null): OwnersRemovedEventFilter;

    "TransactionExecuted(uint256,uint256)"(
      endowmentId?: null,
      transactionId?: null
    ): TransactionExecutedEventFilter;
    TransactionExecuted(
      endowmentId?: null,
      transactionId?: null
    ): TransactionExecutedEventFilter;

    "TransactionExecutionFailed(uint256,uint256)"(
      endowmentId?: null,
      transactionId?: null
    ): TransactionExecutionFailedEventFilter;
    TransactionExecutionFailed(
      endowmentId?: null,
      transactionId?: null
    ): TransactionExecutionFailedEventFilter;
  };

  estimateGas: {
    addOwnersEndowment(
      endowmentId: PromiseOrValue<BigNumberish>,
      owners: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    approvalsRequirementChangeEndowment(
      endowmentId: PromiseOrValue<BigNumberish>,
      approvalsRequired: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    confirmEndowment(
      endowmentId: PromiseOrValue<BigNumberish>,
      sender: PromiseOrValue<string>,
      transactionId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    createMultisig(
      multisigAddress: PromiseOrValue<string>,
      endowmentId: PromiseOrValue<BigNumberish>,
      emitter: PromiseOrValue<string>,
      owners: PromiseOrValue<string>[],
      required: PromiseOrValue<BigNumberish>,
      requireExecution: PromiseOrValue<boolean>,
      transactionExpiry: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    depositEndowment(
      endowmentId: PromiseOrValue<BigNumberish>,
      sender: PromiseOrValue<string>,
      value: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    executeEndowment(
      endowmentId: PromiseOrValue<BigNumberish>,
      transactionId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    executeFailureEndowment(
      endowmentId: PromiseOrValue<BigNumberish>,
      transactionId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    initEndowmentMultiSigEmitter(
      _multisigFactory: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    removeOwnersEndowment(
      endowmentId: PromiseOrValue<BigNumberish>,
      owners: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    replaceOwnerEndowment(
      endowmentId: PromiseOrValue<BigNumberish>,
      currOwner: PromiseOrValue<string>,
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    revokeEndowment(
      endowmentId: PromiseOrValue<BigNumberish>,
      sender: PromiseOrValue<string>,
      transactionId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    submitEndowment(
      endowmentId: PromiseOrValue<BigNumberish>,
      transactionId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    transactionExpiryChangeEndowment(
      endowmentId: PromiseOrValue<BigNumberish>,
      transactionExpiry: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    addOwnersEndowment(
      endowmentId: PromiseOrValue<BigNumberish>,
      owners: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    approvalsRequirementChangeEndowment(
      endowmentId: PromiseOrValue<BigNumberish>,
      approvalsRequired: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    confirmEndowment(
      endowmentId: PromiseOrValue<BigNumberish>,
      sender: PromiseOrValue<string>,
      transactionId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    createMultisig(
      multisigAddress: PromiseOrValue<string>,
      endowmentId: PromiseOrValue<BigNumberish>,
      emitter: PromiseOrValue<string>,
      owners: PromiseOrValue<string>[],
      required: PromiseOrValue<BigNumberish>,
      requireExecution: PromiseOrValue<boolean>,
      transactionExpiry: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    depositEndowment(
      endowmentId: PromiseOrValue<BigNumberish>,
      sender: PromiseOrValue<string>,
      value: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    executeEndowment(
      endowmentId: PromiseOrValue<BigNumberish>,
      transactionId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    executeFailureEndowment(
      endowmentId: PromiseOrValue<BigNumberish>,
      transactionId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    initEndowmentMultiSigEmitter(
      _multisigFactory: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    removeOwnersEndowment(
      endowmentId: PromiseOrValue<BigNumberish>,
      owners: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    replaceOwnerEndowment(
      endowmentId: PromiseOrValue<BigNumberish>,
      currOwner: PromiseOrValue<string>,
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    revokeEndowment(
      endowmentId: PromiseOrValue<BigNumberish>,
      sender: PromiseOrValue<string>,
      transactionId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    submitEndowment(
      endowmentId: PromiseOrValue<BigNumberish>,
      transactionId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    transactionExpiryChangeEndowment(
      endowmentId: PromiseOrValue<BigNumberish>,
      transactionExpiry: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
