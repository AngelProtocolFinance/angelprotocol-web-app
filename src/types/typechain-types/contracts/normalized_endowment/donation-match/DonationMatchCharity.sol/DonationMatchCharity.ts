/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {FunctionFragment, Result, EventFragment} from "@ethersproject/abi";
import type {Listener, Provider} from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../../../common";

export declare namespace DonationMatchStorage {
  export type ConfigStruct = {
    reserveToken: PromiseOrValue<string>;
    uniswapFactory: PromiseOrValue<string>;
    usdcAddress: PromiseOrValue<string>;
    registrarContract: PromiseOrValue<string>;
    poolFee: PromiseOrValue<BigNumberish>;
  };

  export type ConfigStructOutput = [string, string, string, string, number] & {
    reserveToken: string;
    uniswapFactory: string;
    usdcAddress: string;
    registrarContract: string;
    poolFee: number;
  };
}

export declare namespace DonationMatchMessages {
  export type InstantiateMessageStruct = {
    reserveToken: PromiseOrValue<string>;
    uniswapFactory: PromiseOrValue<string>;
    registrarContract: PromiseOrValue<string>;
    poolFee: PromiseOrValue<BigNumberish>;
    usdcAddress: PromiseOrValue<string>;
  };

  export type InstantiateMessageStructOutput = [string, string, string, number, string] & {
    reserveToken: string;
    uniswapFactory: string;
    registrarContract: string;
    poolFee: number;
    usdcAddress: string;
  };
}

export interface DonationMatchCharityInterface extends utils.Interface {
  functions: {
    "executeDonorMatch(uint32,uint256,address,address)": FunctionFragment;
    "initialize((address,address,address,uint24,address))": FunctionFragment;
    "queryConfig()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic: "executeDonorMatch" | "initialize" | "queryConfig"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "executeDonorMatch",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [DonationMatchMessages.InstantiateMessageStruct]
  ): string;
  encodeFunctionData(functionFragment: "queryConfig", values?: undefined): string;

  decodeFunctionResult(functionFragment: "executeDonorMatch", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "queryConfig", data: BytesLike): Result;

  events: {
    "DonationMatchCharityErc20ApprovalGiven(uint32,address,address,uint256)": EventFragment;
    "DonationMatchCharityErc20Burned(uint32,address,uint256)": EventFragment;
    "DonationMatchCharityErc20Transfer(uint32,address,address,uint256)": EventFragment;
    "DonationMatchCharityExecuted(address,address,uint256,address,uint32,address)": EventFragment;
    "DonationMatchCharityInitialized(address,tuple)": EventFragment;
    "Initialized(uint8)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "DonationMatchCharityErc20ApprovalGiven"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "DonationMatchCharityErc20Burned"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "DonationMatchCharityErc20Transfer"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "DonationMatchCharityExecuted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "DonationMatchCharityInitialized"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Initialized"): EventFragment;
}

export interface DonationMatchCharityErc20ApprovalGivenEventObject {
  endowmentId: number;
  tokenAddress: string;
  spender: string;
  amount: BigNumber;
}
export type DonationMatchCharityErc20ApprovalGivenEvent = TypedEvent<
  [number, string, string, BigNumber],
  DonationMatchCharityErc20ApprovalGivenEventObject
>;

export type DonationMatchCharityErc20ApprovalGivenEventFilter =
  TypedEventFilter<DonationMatchCharityErc20ApprovalGivenEvent>;

export interface DonationMatchCharityErc20BurnedEventObject {
  endowmentId: number;
  tokenAddress: string;
  amount: BigNumber;
}
export type DonationMatchCharityErc20BurnedEvent = TypedEvent<
  [number, string, BigNumber],
  DonationMatchCharityErc20BurnedEventObject
>;

export type DonationMatchCharityErc20BurnedEventFilter =
  TypedEventFilter<DonationMatchCharityErc20BurnedEvent>;

export interface DonationMatchCharityErc20TransferEventObject {
  endowmentId: number;
  tokenAddress: string;
  recipient: string;
  amount: BigNumber;
}
export type DonationMatchCharityErc20TransferEvent = TypedEvent<
  [number, string, string, BigNumber],
  DonationMatchCharityErc20TransferEventObject
>;

export type DonationMatchCharityErc20TransferEventFilter =
  TypedEventFilter<DonationMatchCharityErc20TransferEvent>;

export interface DonationMatchCharityExecutedEventObject {
  donationMatch: string;
  tokenAddress: string;
  amount: BigNumber;
  accountsContract: string;
  endowmentId: number;
  donor: string;
}
export type DonationMatchCharityExecutedEvent = TypedEvent<
  [string, string, BigNumber, string, number, string],
  DonationMatchCharityExecutedEventObject
>;

export type DonationMatchCharityExecutedEventFilter =
  TypedEventFilter<DonationMatchCharityExecutedEvent>;

export interface DonationMatchCharityInitializedEventObject {
  donationMatch: string;
  config: DonationMatchStorage.ConfigStructOutput;
}
export type DonationMatchCharityInitializedEvent = TypedEvent<
  [string, DonationMatchStorage.ConfigStructOutput],
  DonationMatchCharityInitializedEventObject
>;

export type DonationMatchCharityInitializedEventFilter =
  TypedEventFilter<DonationMatchCharityInitializedEvent>;

export interface InitializedEventObject {
  version: number;
}
export type InitializedEvent = TypedEvent<[number], InitializedEventObject>;

export type InitializedEventFilter = TypedEventFilter<InitializedEvent>;

export interface DonationMatchCharity extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: DonationMatchCharityInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    executeDonorMatch(
      endowmentId: PromiseOrValue<BigNumberish>,
      amount: PromiseOrValue<BigNumberish>,
      donor: PromiseOrValue<string>,
      token: PromiseOrValue<string>,
      overrides?: Overrides & {from?: PromiseOrValue<string>}
    ): Promise<ContractTransaction>;

    initialize(
      details: DonationMatchMessages.InstantiateMessageStruct,
      overrides?: Overrides & {from?: PromiseOrValue<string>}
    ): Promise<ContractTransaction>;

    queryConfig(overrides?: CallOverrides): Promise<[DonationMatchStorage.ConfigStructOutput]>;
  };

  executeDonorMatch(
    endowmentId: PromiseOrValue<BigNumberish>,
    amount: PromiseOrValue<BigNumberish>,
    donor: PromiseOrValue<string>,
    token: PromiseOrValue<string>,
    overrides?: Overrides & {from?: PromiseOrValue<string>}
  ): Promise<ContractTransaction>;

  initialize(
    details: DonationMatchMessages.InstantiateMessageStruct,
    overrides?: Overrides & {from?: PromiseOrValue<string>}
  ): Promise<ContractTransaction>;

  queryConfig(overrides?: CallOverrides): Promise<DonationMatchStorage.ConfigStructOutput>;

  callStatic: {
    executeDonorMatch(
      endowmentId: PromiseOrValue<BigNumberish>,
      amount: PromiseOrValue<BigNumberish>,
      donor: PromiseOrValue<string>,
      token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    initialize(
      details: DonationMatchMessages.InstantiateMessageStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    queryConfig(overrides?: CallOverrides): Promise<DonationMatchStorage.ConfigStructOutput>;
  };

  filters: {
    "DonationMatchCharityErc20ApprovalGiven(uint32,address,address,uint256)"(
      endowmentId?: null,
      tokenAddress?: null,
      spender?: null,
      amount?: null
    ): DonationMatchCharityErc20ApprovalGivenEventFilter;
    DonationMatchCharityErc20ApprovalGiven(
      endowmentId?: null,
      tokenAddress?: null,
      spender?: null,
      amount?: null
    ): DonationMatchCharityErc20ApprovalGivenEventFilter;

    "DonationMatchCharityErc20Burned(uint32,address,uint256)"(
      endowmentId?: null,
      tokenAddress?: null,
      amount?: null
    ): DonationMatchCharityErc20BurnedEventFilter;
    DonationMatchCharityErc20Burned(
      endowmentId?: null,
      tokenAddress?: null,
      amount?: null
    ): DonationMatchCharityErc20BurnedEventFilter;

    "DonationMatchCharityErc20Transfer(uint32,address,address,uint256)"(
      endowmentId?: null,
      tokenAddress?: null,
      recipient?: null,
      amount?: null
    ): DonationMatchCharityErc20TransferEventFilter;
    DonationMatchCharityErc20Transfer(
      endowmentId?: null,
      tokenAddress?: null,
      recipient?: null,
      amount?: null
    ): DonationMatchCharityErc20TransferEventFilter;

    "DonationMatchCharityExecuted(address,address,uint256,address,uint32,address)"(
      donationMatch?: null,
      tokenAddress?: null,
      amount?: null,
      accountsContract?: null,
      endowmentId?: null,
      donor?: null
    ): DonationMatchCharityExecutedEventFilter;
    DonationMatchCharityExecuted(
      donationMatch?: null,
      tokenAddress?: null,
      amount?: null,
      accountsContract?: null,
      endowmentId?: null,
      donor?: null
    ): DonationMatchCharityExecutedEventFilter;

    "DonationMatchCharityInitialized(address,tuple)"(
      donationMatch?: null,
      config?: null
    ): DonationMatchCharityInitializedEventFilter;
    DonationMatchCharityInitialized(
      donationMatch?: null,
      config?: null
    ): DonationMatchCharityInitializedEventFilter;

    "Initialized(uint8)"(version?: null): InitializedEventFilter;
    Initialized(version?: null): InitializedEventFilter;
  };

  estimateGas: {
    executeDonorMatch(
      endowmentId: PromiseOrValue<BigNumberish>,
      amount: PromiseOrValue<BigNumberish>,
      donor: PromiseOrValue<string>,
      token: PromiseOrValue<string>,
      overrides?: Overrides & {from?: PromiseOrValue<string>}
    ): Promise<BigNumber>;

    initialize(
      details: DonationMatchMessages.InstantiateMessageStruct,
      overrides?: Overrides & {from?: PromiseOrValue<string>}
    ): Promise<BigNumber>;

    queryConfig(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    executeDonorMatch(
      endowmentId: PromiseOrValue<BigNumberish>,
      amount: PromiseOrValue<BigNumberish>,
      donor: PromiseOrValue<string>,
      token: PromiseOrValue<string>,
      overrides?: Overrides & {from?: PromiseOrValue<string>}
    ): Promise<PopulatedTransaction>;

    initialize(
      details: DonationMatchMessages.InstantiateMessageStruct,
      overrides?: Overrides & {from?: PromiseOrValue<string>}
    ): Promise<PopulatedTransaction>;

    queryConfig(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
