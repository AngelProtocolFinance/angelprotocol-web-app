/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "../../../../common";

export declare namespace DonationMatchMessages {
  export type InstantiateMessageStruct = {
    reserveToken: string;
    uniswapFactory: string;
    registrarContract: string;
    poolFee: BigNumberish;
    usdcAddress: string;
  };

  export type InstantiateMessageStructOutput = [
    string,
    string,
    string,
    number,
    string
  ] & {
    reserveToken: string;
    uniswapFactory: string;
    registrarContract: string;
    poolFee: number;
    usdcAddress: string;
  };
}

export declare namespace DonationMatchStorage {
  export type ConfigStruct = {
    reserveToken: string;
    uniswapFactory: string;
    usdcAddress: string;
    registrarContract: string;
    poolFee: BigNumberish;
  };

  export type ConfigStructOutput = [string, string, string, string, number] & {
    reserveToken: string;
    uniswapFactory: string;
    usdcAddress: string;
    registrarContract: string;
    poolFee: number;
  };
}

export interface DonationMatchCharityInterface extends utils.Interface {
  functions: {
    "executeDonorMatch(uint32,uint256,address,address)": FunctionFragment;
    "initialize((address,address,address,uint24,address))": FunctionFragment;
    "queryConfig()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic: "executeDonorMatch" | "initialize" | "queryConfig"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "executeDonorMatch",
    values: [BigNumberish, BigNumberish, string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [DonationMatchMessages.InstantiateMessageStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "queryConfig",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "executeDonorMatch",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "queryConfig",
    data: BytesLike
  ): Result;

  events: {
    "Approval(uint32,address,address,uint256)": EventFragment;
    "Burn(uint32,address,uint256)": EventFragment;
    "DonationMatchCharityInitialized(address)": EventFragment;
    "DonationMatchExecuted(address,address,uint256,address,uint32,address)": EventFragment;
    "Initialized(uint8)": EventFragment;
    "Transfer(uint32,address,address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Approval"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Burn"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "DonationMatchCharityInitialized"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "DonationMatchExecuted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Initialized"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Transfer"): EventFragment;
}

export interface ApprovalEventObject {
  endowmentId: number;
  tokenAddress: string;
  spender: string;
  amount: BigNumber;
}
export type ApprovalEvent = TypedEvent<
  [number, string, string, BigNumber],
  ApprovalEventObject
>;

export type ApprovalEventFilter = TypedEventFilter<ApprovalEvent>;

export interface BurnEventObject {
  endowmentId: number;
  tokenAddress: string;
  amount: BigNumber;
}
export type BurnEvent = TypedEvent<
  [number, string, BigNumber],
  BurnEventObject
>;

export type BurnEventFilter = TypedEventFilter<BurnEvent>;

export interface DonationMatchCharityInitializedEventObject {
  donationMatch: string;
}
export type DonationMatchCharityInitializedEvent = TypedEvent<
  [string],
  DonationMatchCharityInitializedEventObject
>;

export type DonationMatchCharityInitializedEventFilter =
  TypedEventFilter<DonationMatchCharityInitializedEvent>;

export interface DonationMatchExecutedEventObject {
  donationMatch: string;
  tokenAddress: string;
  amount: BigNumber;
  accountsContract: string;
  endowmentId: number;
  donor: string;
}
export type DonationMatchExecutedEvent = TypedEvent<
  [string, string, BigNumber, string, number, string],
  DonationMatchExecutedEventObject
>;

export type DonationMatchExecutedEventFilter =
  TypedEventFilter<DonationMatchExecutedEvent>;

export interface InitializedEventObject {
  version: number;
}
export type InitializedEvent = TypedEvent<[number], InitializedEventObject>;

export type InitializedEventFilter = TypedEventFilter<InitializedEvent>;

export interface TransferEventObject {
  endowmentId: number;
  tokenAddress: string;
  recipient: string;
  amount: BigNumber;
}
export type TransferEvent = TypedEvent<
  [number, string, string, BigNumber],
  TransferEventObject
>;

export type TransferEventFilter = TypedEventFilter<TransferEvent>;

export interface DonationMatchCharity extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: DonationMatchCharityInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    executeDonorMatch(
      endowmentId: BigNumberish,
      amount: BigNumberish,
      donor: string,
      token: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    initialize(
      details: DonationMatchMessages.InstantiateMessageStruct,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    queryConfig(
      overrides?: CallOverrides
    ): Promise<[DonationMatchStorage.ConfigStructOutput]>;
  };

  executeDonorMatch(
    endowmentId: BigNumberish,
    amount: BigNumberish,
    donor: string,
    token: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  initialize(
    details: DonationMatchMessages.InstantiateMessageStruct,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  queryConfig(
    overrides?: CallOverrides
  ): Promise<DonationMatchStorage.ConfigStructOutput>;

  callStatic: {
    executeDonorMatch(
      endowmentId: BigNumberish,
      amount: BigNumberish,
      donor: string,
      token: string,
      overrides?: CallOverrides
    ): Promise<void>;

    initialize(
      details: DonationMatchMessages.InstantiateMessageStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    queryConfig(
      overrides?: CallOverrides
    ): Promise<DonationMatchStorage.ConfigStructOutput>;
  };

  filters: {
    "Approval(uint32,address,address,uint256)"(
      endowmentId?: null,
      tokenAddress?: null,
      spender?: null,
      amount?: null
    ): ApprovalEventFilter;
    Approval(
      endowmentId?: null,
      tokenAddress?: null,
      spender?: null,
      amount?: null
    ): ApprovalEventFilter;

    "Burn(uint32,address,uint256)"(
      endowmentId?: null,
      tokenAddress?: null,
      amount?: null
    ): BurnEventFilter;
    Burn(
      endowmentId?: null,
      tokenAddress?: null,
      amount?: null
    ): BurnEventFilter;

    "DonationMatchCharityInitialized(address)"(
      donationMatch?: null
    ): DonationMatchCharityInitializedEventFilter;
    DonationMatchCharityInitialized(
      donationMatch?: null
    ): DonationMatchCharityInitializedEventFilter;

    "DonationMatchExecuted(address,address,uint256,address,uint32,address)"(
      donationMatch?: null,
      tokenAddress?: null,
      amount?: null,
      accountsContract?: null,
      endowmentId?: null,
      donor?: null
    ): DonationMatchExecutedEventFilter;
    DonationMatchExecuted(
      donationMatch?: null,
      tokenAddress?: null,
      amount?: null,
      accountsContract?: null,
      endowmentId?: null,
      donor?: null
    ): DonationMatchExecutedEventFilter;

    "Initialized(uint8)"(version?: null): InitializedEventFilter;
    Initialized(version?: null): InitializedEventFilter;

    "Transfer(uint32,address,address,uint256)"(
      endowmentId?: null,
      tokenAddress?: null,
      recipient?: null,
      amount?: null
    ): TransferEventFilter;
    Transfer(
      endowmentId?: null,
      tokenAddress?: null,
      recipient?: null,
      amount?: null
    ): TransferEventFilter;
  };

  estimateGas: {
    executeDonorMatch(
      endowmentId: BigNumberish,
      amount: BigNumberish,
      donor: string,
      token: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    initialize(
      details: DonationMatchMessages.InstantiateMessageStruct,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    queryConfig(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    executeDonorMatch(
      endowmentId: BigNumberish,
      amount: BigNumberish,
      donor: string,
      token: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    initialize(
      details: DonationMatchMessages.InstantiateMessageStruct,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    queryConfig(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
