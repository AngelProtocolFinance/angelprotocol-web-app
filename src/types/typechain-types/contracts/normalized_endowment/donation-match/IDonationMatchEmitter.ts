/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "../../../common";

export declare namespace DonationMatchStorage {
  export type ConfigStruct = {
    reserveToken: string;
    uniswapFactory: string;
    usdcAddress: string;
    registrarContract: string;
    poolFee: BigNumberish;
  };

  export type ConfigStructOutput = [string, string, string, string, number] & {
    reserveToken: string;
    uniswapFactory: string;
    usdcAddress: string;
    registrarContract: string;
    poolFee: number;
  };
}

export interface IDonationMatchEmitterInterface extends utils.Interface {
  functions: {
    "burnErc20(uint32,address,uint256)": FunctionFragment;
    "executeDonorMatch(address,uint256,address,uint32,address)": FunctionFragment;
    "giveApprovalErc20(uint32,address,address,uint256)": FunctionFragment;
    "initializeDonationMatch(uint32,address,(address,address,address,address,uint24))": FunctionFragment;
    "transferErc20(uint32,address,address,uint256)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "burnErc20"
      | "executeDonorMatch"
      | "giveApprovalErc20"
      | "initializeDonationMatch"
      | "transferErc20"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "burnErc20",
    values: [BigNumberish, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "executeDonorMatch",
    values: [string, BigNumberish, string, BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "giveApprovalErc20",
    values: [BigNumberish, string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "initializeDonationMatch",
    values: [BigNumberish, string, DonationMatchStorage.ConfigStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "transferErc20",
    values: [BigNumberish, string, string, BigNumberish]
  ): string;

  decodeFunctionResult(functionFragment: "burnErc20", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "executeDonorMatch",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "giveApprovalErc20",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "initializeDonationMatch",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferErc20",
    data: BytesLike
  ): Result;

  events: {};
}

export interface IDonationMatchEmitter extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IDonationMatchEmitterInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    burnErc20(
      endowmentId: BigNumberish,
      tokenAddress: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    executeDonorMatch(
      tokenAddress: string,
      amount: BigNumberish,
      accountsContract: string,
      endowmentId: BigNumberish,
      donor: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    giveApprovalErc20(
      endowmentId: BigNumberish,
      tokenAddress: string,
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    initializeDonationMatch(
      endowmentId: BigNumberish,
      donationMatch: string,
      config: DonationMatchStorage.ConfigStruct,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    transferErc20(
      endowmentId: BigNumberish,
      tokenAddress: string,
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;
  };

  burnErc20(
    endowmentId: BigNumberish,
    tokenAddress: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  executeDonorMatch(
    tokenAddress: string,
    amount: BigNumberish,
    accountsContract: string,
    endowmentId: BigNumberish,
    donor: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  giveApprovalErc20(
    endowmentId: BigNumberish,
    tokenAddress: string,
    recipient: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  initializeDonationMatch(
    endowmentId: BigNumberish,
    donationMatch: string,
    config: DonationMatchStorage.ConfigStruct,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  transferErc20(
    endowmentId: BigNumberish,
    tokenAddress: string,
    recipient: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  callStatic: {
    burnErc20(
      endowmentId: BigNumberish,
      tokenAddress: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    executeDonorMatch(
      tokenAddress: string,
      amount: BigNumberish,
      accountsContract: string,
      endowmentId: BigNumberish,
      donor: string,
      overrides?: CallOverrides
    ): Promise<void>;

    giveApprovalErc20(
      endowmentId: BigNumberish,
      tokenAddress: string,
      recipient: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    initializeDonationMatch(
      endowmentId: BigNumberish,
      donationMatch: string,
      config: DonationMatchStorage.ConfigStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    transferErc20(
      endowmentId: BigNumberish,
      tokenAddress: string,
      recipient: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {};

  estimateGas: {
    burnErc20(
      endowmentId: BigNumberish,
      tokenAddress: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    executeDonorMatch(
      tokenAddress: string,
      amount: BigNumberish,
      accountsContract: string,
      endowmentId: BigNumberish,
      donor: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    giveApprovalErc20(
      endowmentId: BigNumberish,
      tokenAddress: string,
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    initializeDonationMatch(
      endowmentId: BigNumberish,
      donationMatch: string,
      config: DonationMatchStorage.ConfigStruct,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    transferErc20(
      endowmentId: BigNumberish,
      tokenAddress: string,
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    burnErc20(
      endowmentId: BigNumberish,
      tokenAddress: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    executeDonorMatch(
      tokenAddress: string,
      amount: BigNumberish,
      accountsContract: string,
      endowmentId: BigNumberish,
      donor: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    giveApprovalErc20(
      endowmentId: BigNumberish,
      tokenAddress: string,
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    initializeDonationMatch(
      endowmentId: BigNumberish,
      donationMatch: string,
      config: DonationMatchStorage.ConfigStruct,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    transferErc20(
      endowmentId: BigNumberish,
      tokenAddress: string,
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;
  };
}
