/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "../../../common";

export interface ISubDaoEmitterInterface extends utils.Interface {
  functions: {
    "initializeSubDao(address)": FunctionFragment;
    "transferSubDao(address,address,address,uint256)": FunctionFragment;
    "updateSubDaoConfig()": FunctionFragment;
    "updateSubDaoPoll(uint256,address)": FunctionFragment;
    "updateSubDaoPollAndStatus(uint256,address,uint8)": FunctionFragment;
    "updateSubDaoState()": FunctionFragment;
    "updateVotingStatus(uint256,address)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "initializeSubDao"
      | "transferSubDao"
      | "updateSubDaoConfig"
      | "updateSubDaoPoll"
      | "updateSubDaoPollAndStatus"
      | "updateSubDaoState"
      | "updateVotingStatus"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "initializeSubDao",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "transferSubDao",
    values: [string, string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "updateSubDaoConfig",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "updateSubDaoPoll",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "updateSubDaoPollAndStatus",
    values: [BigNumberish, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "updateSubDaoState",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "updateVotingStatus",
    values: [BigNumberish, string]
  ): string;

  decodeFunctionResult(
    functionFragment: "initializeSubDao",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferSubDao",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateSubDaoConfig",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateSubDaoPoll",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateSubDaoPollAndStatus",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateSubDaoState",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateVotingStatus",
    data: BytesLike
  ): Result;

  events: {};
}

export interface ISubDaoEmitter extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: ISubDaoEmitterInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    initializeSubDao(
      subdao: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    transferSubDao(
      tokenAddress: string,
      from: string,
      to: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    updateSubDaoConfig(
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    updateSubDaoPoll(
      pollId: BigNumberish,
      voter: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    updateSubDaoPollAndStatus(
      pollId: BigNumberish,
      voter: string,
      pollStatus: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    updateSubDaoState(
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    updateVotingStatus(
      pollId: BigNumberish,
      voter: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;
  };

  initializeSubDao(
    subdao: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  transferSubDao(
    tokenAddress: string,
    from: string,
    to: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  updateSubDaoConfig(
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  updateSubDaoPoll(
    pollId: BigNumberish,
    voter: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  updateSubDaoPollAndStatus(
    pollId: BigNumberish,
    voter: string,
    pollStatus: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  updateSubDaoState(
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  updateVotingStatus(
    pollId: BigNumberish,
    voter: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  callStatic: {
    initializeSubDao(subdao: string, overrides?: CallOverrides): Promise<void>;

    transferSubDao(
      tokenAddress: string,
      from: string,
      to: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    updateSubDaoConfig(overrides?: CallOverrides): Promise<void>;

    updateSubDaoPoll(
      pollId: BigNumberish,
      voter: string,
      overrides?: CallOverrides
    ): Promise<void>;

    updateSubDaoPollAndStatus(
      pollId: BigNumberish,
      voter: string,
      pollStatus: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    updateSubDaoState(overrides?: CallOverrides): Promise<void>;

    updateVotingStatus(
      pollId: BigNumberish,
      voter: string,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {};

  estimateGas: {
    initializeSubDao(
      subdao: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    transferSubDao(
      tokenAddress: string,
      from: string,
      to: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    updateSubDaoConfig(
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    updateSubDaoPoll(
      pollId: BigNumberish,
      voter: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    updateSubDaoPollAndStatus(
      pollId: BigNumberish,
      voter: string,
      pollStatus: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    updateSubDaoState(
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    updateVotingStatus(
      pollId: BigNumberish,
      voter: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    initializeSubDao(
      subdao: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    transferSubDao(
      tokenAddress: string,
      from: string,
      to: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    updateSubDaoConfig(
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    updateSubDaoPoll(
      pollId: BigNumberish,
      voter: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    updateSubDaoPollAndStatus(
      pollId: BigNumberish,
      voter: string,
      pollStatus: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    updateSubDaoState(
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    updateVotingStatus(
      pollId: BigNumberish,
      voter: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;
  };
}
