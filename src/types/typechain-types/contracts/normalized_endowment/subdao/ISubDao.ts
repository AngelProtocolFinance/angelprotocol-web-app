/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "../../../common";

export declare namespace SubDaoLib {
  export type VeTypeDataStruct = {
    value: BigNumberish;
    scale: BigNumberish;
    slope: BigNumberish;
    power: BigNumberish;
  };

  export type VeTypeDataStructOutput = [
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber
  ] & {
    value: BigNumber;
    scale: BigNumber;
    slope: BigNumber;
    power: BigNumber;
  };

  export type VeTypeStruct = {
    ve_type: BigNumberish;
    data: SubDaoLib.VeTypeDataStruct;
  };

  export type VeTypeStructOutput = [
    number,
    SubDaoLib.VeTypeDataStructOutput
  ] & { ve_type: number; data: SubDaoLib.VeTypeDataStructOutput };

  export type DaoTokenDataStruct = {
    existingData: string;
    newInitialSupply: BigNumberish;
    newName: string;
    newSymbol: string;
    veBondingType: SubDaoLib.VeTypeStruct;
    veBondingName: string;
    veBondingSymbol: string;
    veBondingDecimals: BigNumberish;
    veBondingReserveDenom: string;
    veBondingReserveDecimals: BigNumberish;
    veBondingPeriod: BigNumberish;
  };

  export type DaoTokenDataStructOutput = [
    string,
    BigNumber,
    string,
    string,
    SubDaoLib.VeTypeStructOutput,
    string,
    string,
    BigNumber,
    string,
    BigNumber,
    BigNumber
  ] & {
    existingData: string;
    newInitialSupply: BigNumber;
    newName: string;
    newSymbol: string;
    veBondingType: SubDaoLib.VeTypeStructOutput;
    veBondingName: string;
    veBondingSymbol: string;
    veBondingDecimals: BigNumber;
    veBondingReserveDenom: string;
    veBondingReserveDecimals: BigNumber;
    veBondingPeriod: BigNumber;
  };

  export type DaoTokenStruct = {
    token: BigNumberish;
    data: SubDaoLib.DaoTokenDataStruct;
  };

  export type DaoTokenStructOutput = [
    number,
    SubDaoLib.DaoTokenDataStructOutput
  ] & { token: number; data: SubDaoLib.DaoTokenDataStructOutput };
}

export declare namespace SubDaoMessages {
  export type InstantiateMsgStruct = {
    id: BigNumberish;
    owner: string;
    quorum: BigNumberish;
    threshold: BigNumberish;
    votingPeriod: BigNumberish;
    timelockPeriod: BigNumberish;
    expirationPeriod: BigNumberish;
    proposalDeposit: BigNumberish;
    snapshotPeriod: BigNumberish;
    token: SubDaoLib.DaoTokenStruct;
    endowType: BigNumberish;
    endowOwner: string;
    registrarContract: string;
  };

  export type InstantiateMsgStructOutput = [
    number,
    string,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    SubDaoLib.DaoTokenStructOutput,
    number,
    string,
    string
  ] & {
    id: number;
    owner: string;
    quorum: BigNumber;
    threshold: BigNumber;
    votingPeriod: BigNumber;
    timelockPeriod: BigNumber;
    expirationPeriod: BigNumber;
    proposalDeposit: BigNumber;
    snapshotPeriod: BigNumber;
    token: SubDaoLib.DaoTokenStructOutput;
    endowType: number;
    endowOwner: string;
    registrarContract: string;
  };

  export type QueryConfigResponseStruct = {
    owner: string;
    daoToken: string;
    veToken: string;
    swapFactory: string;
    quorum: BigNumberish;
    threshold: BigNumberish;
    votingPeriod: BigNumberish;
    timelockPeriod: BigNumberish;
    expirationPeriod: BigNumberish;
    proposalDeposit: BigNumberish;
    snapshotPeriod: BigNumberish;
  };

  export type QueryConfigResponseStructOutput = [
    string,
    string,
    string,
    string,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber
  ] & {
    owner: string;
    daoToken: string;
    veToken: string;
    swapFactory: string;
    quorum: BigNumber;
    threshold: BigNumber;
    votingPeriod: BigNumber;
    timelockPeriod: BigNumber;
    expirationPeriod: BigNumber;
    proposalDeposit: BigNumber;
    snapshotPeriod: BigNumber;
  };
}

export declare namespace SubDaoStorage {
  export type ExecuteDataStruct = {
    order: BigNumberish[];
    contractAddress: string[];
    execution_message: BytesLike[];
  };

  export type ExecuteDataStructOutput = [BigNumber[], string[], string[]] & {
    order: BigNumber[];
    contractAddress: string[];
    execution_message: string[];
  };

  export type StateStruct = {
    pollCount: BigNumberish;
    totalShare: BigNumberish;
    totalDeposit: BigNumberish;
  };

  export type StateStructOutput = [BigNumber, BigNumber, BigNumber] & {
    pollCount: BigNumber;
    totalShare: BigNumber;
    totalDeposit: BigNumber;
  };
}

export interface ISubDaoInterface extends utils.Interface {
  functions: {
    "buildDaoTokenMesage((uint32,address,uint256,uint256,uint256,uint256,uint256,uint256,uint256,(uint8,(address,uint256,string,string,(uint8,(uint128,uint256,uint128,uint128)),string,string,uint256,address,uint256,uint256)),uint8,address,address))": FunctionFragment;
    "castVote(uint256,uint8)": FunctionFragment;
    "createPoll(uint256,string,string,string,(uint256[],address[],bytes[]))": FunctionFragment;
    "endPoll(uint256)": FunctionFragment;
    "executePoll(uint256)": FunctionFragment;
    "expirePoll(uint256)": FunctionFragment;
    "queryConfig()": FunctionFragment;
    "queryState()": FunctionFragment;
    "registerContracts(address,address)": FunctionFragment;
    "updateConfig(address,uint256,uint256,uint256,uint256,uint256,uint256,uint256)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "buildDaoTokenMesage"
      | "castVote"
      | "createPoll"
      | "endPoll"
      | "executePoll"
      | "expirePoll"
      | "queryConfig"
      | "queryState"
      | "registerContracts"
      | "updateConfig"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "buildDaoTokenMesage",
    values: [SubDaoMessages.InstantiateMsgStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "castVote",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "createPoll",
    values: [
      BigNumberish,
      string,
      string,
      string,
      SubDaoStorage.ExecuteDataStruct
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "endPoll",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "executePoll",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "expirePoll",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "queryConfig",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "queryState",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "registerContracts",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "updateConfig",
    values: [
      string,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ]
  ): string;

  decodeFunctionResult(
    functionFragment: "buildDaoTokenMesage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "castVote", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "createPoll", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "endPoll", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "executePoll",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "expirePoll", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "queryConfig",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "queryState", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "registerContracts",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateConfig",
    data: BytesLike
  ): Result;

  events: {};
}

export interface ISubDao extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: ISubDaoInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    buildDaoTokenMesage(
      msg: SubDaoMessages.InstantiateMsgStruct,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    castVote(
      pollid: BigNumberish,
      vote: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    createPoll(
      depositamount: BigNumberish,
      title: string,
      description: string,
      link: string,
      executeMsgs: SubDaoStorage.ExecuteDataStruct,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    endPoll(
      pollid: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    executePoll(
      pollid: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    expirePoll(
      pollid: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    queryConfig(
      overrides?: CallOverrides
    ): Promise<[SubDaoMessages.QueryConfigResponseStructOutput]>;

    queryState(
      overrides?: CallOverrides
    ): Promise<[SubDaoStorage.StateStructOutput]>;

    registerContracts(
      vetoken: string,
      swapfactory: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    updateConfig(
      owner: string,
      quorum: BigNumberish,
      threshold: BigNumberish,
      votingperiod: BigNumberish,
      timelockperiod: BigNumberish,
      expirationperiod: BigNumberish,
      proposaldeposit: BigNumberish,
      snapshotperiod: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;
  };

  buildDaoTokenMesage(
    msg: SubDaoMessages.InstantiateMsgStruct,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  castVote(
    pollid: BigNumberish,
    vote: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  createPoll(
    depositamount: BigNumberish,
    title: string,
    description: string,
    link: string,
    executeMsgs: SubDaoStorage.ExecuteDataStruct,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  endPoll(
    pollid: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  executePoll(
    pollid: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  expirePoll(
    pollid: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  queryConfig(
    overrides?: CallOverrides
  ): Promise<SubDaoMessages.QueryConfigResponseStructOutput>;

  queryState(
    overrides?: CallOverrides
  ): Promise<SubDaoStorage.StateStructOutput>;

  registerContracts(
    vetoken: string,
    swapfactory: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  updateConfig(
    owner: string,
    quorum: BigNumberish,
    threshold: BigNumberish,
    votingperiod: BigNumberish,
    timelockperiod: BigNumberish,
    expirationperiod: BigNumberish,
    proposaldeposit: BigNumberish,
    snapshotperiod: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  callStatic: {
    buildDaoTokenMesage(
      msg: SubDaoMessages.InstantiateMsgStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    castVote(
      pollid: BigNumberish,
      vote: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    createPoll(
      depositamount: BigNumberish,
      title: string,
      description: string,
      link: string,
      executeMsgs: SubDaoStorage.ExecuteDataStruct,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    endPoll(pollid: BigNumberish, overrides?: CallOverrides): Promise<void>;

    executePoll(pollid: BigNumberish, overrides?: CallOverrides): Promise<void>;

    expirePoll(pollid: BigNumberish, overrides?: CallOverrides): Promise<void>;

    queryConfig(
      overrides?: CallOverrides
    ): Promise<SubDaoMessages.QueryConfigResponseStructOutput>;

    queryState(
      overrides?: CallOverrides
    ): Promise<SubDaoStorage.StateStructOutput>;

    registerContracts(
      vetoken: string,
      swapfactory: string,
      overrides?: CallOverrides
    ): Promise<void>;

    updateConfig(
      owner: string,
      quorum: BigNumberish,
      threshold: BigNumberish,
      votingperiod: BigNumberish,
      timelockperiod: BigNumberish,
      expirationperiod: BigNumberish,
      proposaldeposit: BigNumberish,
      snapshotperiod: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {};

  estimateGas: {
    buildDaoTokenMesage(
      msg: SubDaoMessages.InstantiateMsgStruct,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    castVote(
      pollid: BigNumberish,
      vote: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    createPoll(
      depositamount: BigNumberish,
      title: string,
      description: string,
      link: string,
      executeMsgs: SubDaoStorage.ExecuteDataStruct,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    endPoll(
      pollid: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    executePoll(
      pollid: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    expirePoll(
      pollid: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    queryConfig(overrides?: CallOverrides): Promise<BigNumber>;

    queryState(overrides?: CallOverrides): Promise<BigNumber>;

    registerContracts(
      vetoken: string,
      swapfactory: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    updateConfig(
      owner: string,
      quorum: BigNumberish,
      threshold: BigNumberish,
      votingperiod: BigNumberish,
      timelockperiod: BigNumberish,
      expirationperiod: BigNumberish,
      proposaldeposit: BigNumberish,
      snapshotperiod: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    buildDaoTokenMesage(
      msg: SubDaoMessages.InstantiateMsgStruct,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    castVote(
      pollid: BigNumberish,
      vote: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    createPoll(
      depositamount: BigNumberish,
      title: string,
      description: string,
      link: string,
      executeMsgs: SubDaoStorage.ExecuteDataStruct,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    endPoll(
      pollid: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    executePoll(
      pollid: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    expirePoll(
      pollid: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    queryConfig(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    queryState(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    registerContracts(
      vetoken: string,
      swapfactory: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    updateConfig(
      owner: string,
      quorum: BigNumberish,
      threshold: BigNumberish,
      votingperiod: BigNumberish,
      timelockperiod: BigNumberish,
      expirationperiod: BigNumberish,
      proposaldeposit: BigNumberish,
      snapshotperiod: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;
  };
}
