/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../../common";

export interface LockedWithdrawInterface extends utils.Interface {
  functions: {
    "approve(uint32)": FunctionFragment;
    "initialize(address,address,address,address)": FunctionFragment;
    "propose(uint32,address,uint256)": FunctionFragment;
    "reject(uint32)": FunctionFragment;
    "supportsInterface(bytes4)": FunctionFragment;
    "updateConfig(address,address,address,address)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "approve"
      | "initialize"
      | "propose"
      | "reject"
      | "supportsInterface"
      | "updateConfig"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "approve",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "propose",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "reject",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "updateConfig",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>
    ]
  ): string;

  decodeFunctionResult(functionFragment: "approve", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "propose", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "reject", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateConfig",
    data: BytesLike
  ): Result;

  events: {
    "Initialized(uint8)": EventFragment;
    "LockedWithdrawAPTeam(uint32,address)": EventFragment;
    "LockedWithdrawApproved(uint32,address,uint256)": EventFragment;
    "LockedWithdrawEndowment(uint32,address)": EventFragment;
    "LockedWithdrawInitiated(uint32,address,address,uint256)": EventFragment;
    "LockedWithdrawRejected(uint32)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Initialized"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LockedWithdrawAPTeam"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LockedWithdrawApproved"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LockedWithdrawEndowment"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LockedWithdrawInitiated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LockedWithdrawRejected"): EventFragment;
}

export interface InitializedEventObject {
  version: number;
}
export type InitializedEvent = TypedEvent<[number], InitializedEventObject>;

export type InitializedEventFilter = TypedEventFilter<InitializedEvent>;

export interface LockedWithdrawAPTeamEventObject {
  accountId: number;
  sender: string;
}
export type LockedWithdrawAPTeamEvent = TypedEvent<
  [number, string],
  LockedWithdrawAPTeamEventObject
>;

export type LockedWithdrawAPTeamEventFilter =
  TypedEventFilter<LockedWithdrawAPTeamEvent>;

export interface LockedWithdrawApprovedEventObject {
  accountId: number;
  tokenaddress: string;
  amount: BigNumber;
}
export type LockedWithdrawApprovedEvent = TypedEvent<
  [number, string, BigNumber],
  LockedWithdrawApprovedEventObject
>;

export type LockedWithdrawApprovedEventFilter =
  TypedEventFilter<LockedWithdrawApprovedEvent>;

export interface LockedWithdrawEndowmentEventObject {
  accountId: number;
  sender: string;
}
export type LockedWithdrawEndowmentEvent = TypedEvent<
  [number, string],
  LockedWithdrawEndowmentEventObject
>;

export type LockedWithdrawEndowmentEventFilter =
  TypedEventFilter<LockedWithdrawEndowmentEvent>;

export interface LockedWithdrawInitiatedEventObject {
  accountId: number;
  initiator: string;
  tokenaddress: string;
  amount: BigNumber;
}
export type LockedWithdrawInitiatedEvent = TypedEvent<
  [number, string, string, BigNumber],
  LockedWithdrawInitiatedEventObject
>;

export type LockedWithdrawInitiatedEventFilter =
  TypedEventFilter<LockedWithdrawInitiatedEvent>;

export interface LockedWithdrawRejectedEventObject {
  accountId: number;
}
export type LockedWithdrawRejectedEvent = TypedEvent<
  [number],
  LockedWithdrawRejectedEventObject
>;

export type LockedWithdrawRejectedEventFilter =
  TypedEventFilter<LockedWithdrawRejectedEvent>;

export interface LockedWithdraw extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: LockedWithdrawInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    approve(
      accountId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    initialize(
      registrar: PromiseOrValue<string>,
      accounts: PromiseOrValue<string>,
      apteammultisig: PromiseOrValue<string>,
      endowfactory: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    propose(
      accountId: PromiseOrValue<BigNumberish>,
      tokenaddress: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    reject(
      accountId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    supportsInterface(
      interfaceId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    updateConfig(
      registrar: PromiseOrValue<string>,
      accounts: PromiseOrValue<string>,
      apteammultisig: PromiseOrValue<string>,
      endowfactory: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  approve(
    accountId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  initialize(
    registrar: PromiseOrValue<string>,
    accounts: PromiseOrValue<string>,
    apteammultisig: PromiseOrValue<string>,
    endowfactory: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  propose(
    accountId: PromiseOrValue<BigNumberish>,
    tokenaddress: PromiseOrValue<string>,
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  reject(
    accountId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  supportsInterface(
    interfaceId: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  updateConfig(
    registrar: PromiseOrValue<string>,
    accounts: PromiseOrValue<string>,
    apteammultisig: PromiseOrValue<string>,
    endowfactory: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    approve(
      accountId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    initialize(
      registrar: PromiseOrValue<string>,
      accounts: PromiseOrValue<string>,
      apteammultisig: PromiseOrValue<string>,
      endowfactory: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    propose(
      accountId: PromiseOrValue<BigNumberish>,
      tokenaddress: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    reject(
      accountId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    supportsInterface(
      interfaceId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    updateConfig(
      registrar: PromiseOrValue<string>,
      accounts: PromiseOrValue<string>,
      apteammultisig: PromiseOrValue<string>,
      endowfactory: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "Initialized(uint8)"(version?: null): InitializedEventFilter;
    Initialized(version?: null): InitializedEventFilter;

    "LockedWithdrawAPTeam(uint32,address)"(
      accountId?: null,
      sender?: null
    ): LockedWithdrawAPTeamEventFilter;
    LockedWithdrawAPTeam(
      accountId?: null,
      sender?: null
    ): LockedWithdrawAPTeamEventFilter;

    "LockedWithdrawApproved(uint32,address,uint256)"(
      accountId?: PromiseOrValue<BigNumberish> | null,
      tokenaddress?: null,
      amount?: null
    ): LockedWithdrawApprovedEventFilter;
    LockedWithdrawApproved(
      accountId?: PromiseOrValue<BigNumberish> | null,
      tokenaddress?: null,
      amount?: null
    ): LockedWithdrawApprovedEventFilter;

    "LockedWithdrawEndowment(uint32,address)"(
      accountId?: null,
      sender?: null
    ): LockedWithdrawEndowmentEventFilter;
    LockedWithdrawEndowment(
      accountId?: null,
      sender?: null
    ): LockedWithdrawEndowmentEventFilter;

    "LockedWithdrawInitiated(uint32,address,address,uint256)"(
      accountId?: PromiseOrValue<BigNumberish> | null,
      initiator?: PromiseOrValue<string> | null,
      tokenaddress?: null,
      amount?: null
    ): LockedWithdrawInitiatedEventFilter;
    LockedWithdrawInitiated(
      accountId?: PromiseOrValue<BigNumberish> | null,
      initiator?: PromiseOrValue<string> | null,
      tokenaddress?: null,
      amount?: null
    ): LockedWithdrawInitiatedEventFilter;

    "LockedWithdrawRejected(uint32)"(
      accountId?: PromiseOrValue<BigNumberish> | null
    ): LockedWithdrawRejectedEventFilter;
    LockedWithdrawRejected(
      accountId?: PromiseOrValue<BigNumberish> | null
    ): LockedWithdrawRejectedEventFilter;
  };

  estimateGas: {
    approve(
      accountId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    initialize(
      registrar: PromiseOrValue<string>,
      accounts: PromiseOrValue<string>,
      apteammultisig: PromiseOrValue<string>,
      endowfactory: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    propose(
      accountId: PromiseOrValue<BigNumberish>,
      tokenaddress: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    reject(
      accountId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    supportsInterface(
      interfaceId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    updateConfig(
      registrar: PromiseOrValue<string>,
      accounts: PromiseOrValue<string>,
      apteammultisig: PromiseOrValue<string>,
      endowfactory: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    approve(
      accountId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    initialize(
      registrar: PromiseOrValue<string>,
      accounts: PromiseOrValue<string>,
      apteammultisig: PromiseOrValue<string>,
      endowfactory: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    propose(
      accountId: PromiseOrValue<BigNumberish>,
      tokenaddress: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    reject(
      accountId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    supportsInterface(
      interfaceId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    updateConfig(
      registrar: PromiseOrValue<string>,
      accounts: PromiseOrValue<string>,
      apteammultisig: PromiseOrValue<string>,
      endowfactory: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
