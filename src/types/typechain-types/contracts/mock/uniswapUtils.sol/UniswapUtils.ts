/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../../common";

export declare namespace UniswapUtils {
  export type CreateUniswapPoolArgsStruct = {
    tokenA: PromiseOrValue<string>;
    tokenB: PromiseOrValue<string>;
    uniswapFee: PromiseOrValue<BigNumberish>;
    amountA: PromiseOrValue<BigNumberish>;
    sqrtPriceX96: PromiseOrValue<BigNumberish>;
    tickLower: PromiseOrValue<BigNumberish>;
    tickUpper: PromiseOrValue<BigNumberish>;
  };

  export type CreateUniswapPoolArgsStructOutput = [
    string,
    string,
    number,
    BigNumber,
    BigNumber,
    number,
    number
  ] & {
    tokenA: string;
    tokenB: string;
    uniswapFee: number;
    amountA: BigNumber;
    sqrtPriceX96: BigNumber;
    tickLower: number;
    tickUpper: number;
  };

  export type CreateUniswapPoolERC20ArgsStruct = {
    projectToken: PromiseOrValue<string>;
    usdcToken: PromiseOrValue<string>;
    uniswapFee: PromiseOrValue<BigNumberish>;
    amountA: PromiseOrValue<BigNumberish>;
    amountB: PromiseOrValue<BigNumberish>;
    sqrtPriceX96: PromiseOrValue<BigNumberish>;
    tickLower: PromiseOrValue<BigNumberish>;
    tickUpper: PromiseOrValue<BigNumberish>;
  };

  export type CreateUniswapPoolERC20ArgsStructOutput = [
    string,
    string,
    number,
    BigNumber,
    BigNumber,
    BigNumber,
    number,
    number
  ] & {
    projectToken: string;
    usdcToken: string;
    uniswapFee: number;
    amountA: BigNumber;
    amountB: BigNumber;
    sqrtPriceX96: BigNumber;
    tickLower: number;
    tickUpper: number;
  };
}

export interface UniswapUtilsInterface extends utils.Interface {
  functions: {
    "createPoolAndMintPosition((address,address,uint24,uint256,uint160,int24,int24))": FunctionFragment;
    "createPoolAndMintPositionErC20((address,address,uint24,uint256,uint256,uint160,int24,int24))": FunctionFragment;
    "nonfungiblePositionManager()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "createPoolAndMintPosition"
      | "createPoolAndMintPositionErC20"
      | "nonfungiblePositionManager"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "createPoolAndMintPosition",
    values: [UniswapUtils.CreateUniswapPoolArgsStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "createPoolAndMintPositionErC20",
    values: [UniswapUtils.CreateUniswapPoolERC20ArgsStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "nonfungiblePositionManager",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "createPoolAndMintPosition",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createPoolAndMintPositionErC20",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "nonfungiblePositionManager",
    data: BytesLike
  ): Result;

  events: {};
}

export interface UniswapUtils extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: UniswapUtilsInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    createPoolAndMintPosition(
      details: UniswapUtils.CreateUniswapPoolArgsStruct,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    createPoolAndMintPositionErC20(
      details: UniswapUtils.CreateUniswapPoolERC20ArgsStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    nonfungiblePositionManager(overrides?: CallOverrides): Promise<[string]>;
  };

  createPoolAndMintPosition(
    details: UniswapUtils.CreateUniswapPoolArgsStruct,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  createPoolAndMintPositionErC20(
    details: UniswapUtils.CreateUniswapPoolERC20ArgsStruct,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  nonfungiblePositionManager(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    createPoolAndMintPosition(
      details: UniswapUtils.CreateUniswapPoolArgsStruct,
      overrides?: CallOverrides
    ): Promise<string>;

    createPoolAndMintPositionErC20(
      details: UniswapUtils.CreateUniswapPoolERC20ArgsStruct,
      overrides?: CallOverrides
    ): Promise<string>;

    nonfungiblePositionManager(overrides?: CallOverrides): Promise<string>;
  };

  filters: {};

  estimateGas: {
    createPoolAndMintPosition(
      details: UniswapUtils.CreateUniswapPoolArgsStruct,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    createPoolAndMintPositionErC20(
      details: UniswapUtils.CreateUniswapPoolERC20ArgsStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    nonfungiblePositionManager(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    createPoolAndMintPosition(
      details: UniswapUtils.CreateUniswapPoolArgsStruct,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    createPoolAndMintPositionErC20(
      details: UniswapUtils.CreateUniswapPoolERC20ArgsStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    nonfungiblePositionManager(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
