/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "../../../common";

export declare namespace StakingRewardsVesting {
  export type RewardsStruct = {
    totalUnvested: BigNumberish;
    totalVested: BigNumberish;
    totalPreviouslyVested: BigNumberish;
    totalClaimed: BigNumberish;
    startTime: BigNumberish;
    endTime: BigNumberish;
  };

  export type RewardsStructOutput = [
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber
  ] & {
    totalUnvested: BigNumber;
    totalVested: BigNumber;
    totalPreviouslyVested: BigNumber;
    totalClaimed: BigNumber;
    startTime: BigNumber;
    endTime: BigNumber;
  };
}

export declare namespace IStakingRewards {
  export type StakedPositionStruct = {
    amount: BigNumberish;
    rewards: StakingRewardsVesting.RewardsStruct;
    leverageMultiplier: BigNumberish;
    lockedUntil: BigNumberish;
    positionType: BigNumberish;
    unsafeEffectiveMultiplier: BigNumberish;
    unsafeBaseTokenExchangeRate: BigNumberish;
  };

  export type StakedPositionStructOutput = [
    BigNumber,
    StakingRewardsVesting.RewardsStructOutput,
    BigNumber,
    BigNumber,
    number,
    BigNumber,
    BigNumber
  ] & {
    amount: BigNumber;
    rewards: StakingRewardsVesting.RewardsStructOutput;
    leverageMultiplier: BigNumber;
    lockedUntil: BigNumber;
    positionType: number;
    unsafeEffectiveMultiplier: BigNumber;
    unsafeBaseTokenExchangeRate: BigNumber;
  };
}

export interface IStakingRewardsInterface extends utils.Interface {
  functions: {
    "accumulatedRewardsPerToken()": FunctionFragment;
    "addToStake(uint256,uint256)": FunctionFragment;
    "depositToveAndStakeFrom(address,uint256,uint256)": FunctionFragment;
    "getPosition(uint256)": FunctionFragment;
    "getReward(uint256)": FunctionFragment;
    "kick(uint256)": FunctionFragment;
    "lastUpdateTime()": FunctionFragment;
    "stake(uint256,uint8)": FunctionFragment;
    "stakedBalanceOf(uint256)": FunctionFragment;
    "unstake(uint256,uint256)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "accumulatedRewardsPerToken"
      | "addToStake"
      | "depositToveAndStakeFrom"
      | "getPosition"
      | "getReward"
      | "kick"
      | "lastUpdateTime"
      | "stake"
      | "stakedBalanceOf"
      | "unstake"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "accumulatedRewardsPerToken",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "addToStake",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "depositToveAndStakeFrom",
    values: [string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getPosition",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getReward",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "kick", values: [BigNumberish]): string;
  encodeFunctionData(
    functionFragment: "lastUpdateTime",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "stake",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "stakedBalanceOf",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "unstake",
    values: [BigNumberish, BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "accumulatedRewardsPerToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "addToStake", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "depositToveAndStakeFrom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPosition",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getReward", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "kick", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "lastUpdateTime",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "stake", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "stakedBalanceOf",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "unstake", data: BytesLike): Result;

  events: {};
}

export interface IStakingRewards extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IStakingRewardsInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    accumulatedRewardsPerToken(overrides?: CallOverrides): Promise<[BigNumber]>;

    addToStake(
      tokenId: BigNumberish,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    depositToveAndStakeFrom(
      nftRecipient: string,
      fiduAmount: BigNumberish,
      usdcAmount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    getPosition(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [IStakingRewards.StakedPositionStructOutput] & {
        position: IStakingRewards.StakedPositionStructOutput;
      }
    >;

    getReward(
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    kick(
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    lastUpdateTime(overrides?: CallOverrides): Promise<[BigNumber]>;

    stake(
      amount: BigNumberish,
      positionType: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    stakedBalanceOf(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    unstake(
      tokenId: BigNumberish,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;
  };

  accumulatedRewardsPerToken(overrides?: CallOverrides): Promise<BigNumber>;

  addToStake(
    tokenId: BigNumberish,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  depositToveAndStakeFrom(
    nftRecipient: string,
    fiduAmount: BigNumberish,
    usdcAmount: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  getPosition(
    tokenId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<IStakingRewards.StakedPositionStructOutput>;

  getReward(
    tokenId: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  kick(
    tokenId: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  lastUpdateTime(overrides?: CallOverrides): Promise<BigNumber>;

  stake(
    amount: BigNumberish,
    positionType: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  stakedBalanceOf(
    tokenId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  unstake(
    tokenId: BigNumberish,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  callStatic: {
    accumulatedRewardsPerToken(overrides?: CallOverrides): Promise<BigNumber>;

    addToStake(
      tokenId: BigNumberish,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    depositToveAndStakeFrom(
      nftRecipient: string,
      fiduAmount: BigNumberish,
      usdcAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    getPosition(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<IStakingRewards.StakedPositionStructOutput>;

    getReward(tokenId: BigNumberish, overrides?: CallOverrides): Promise<void>;

    kick(tokenId: BigNumberish, overrides?: CallOverrides): Promise<void>;

    lastUpdateTime(overrides?: CallOverrides): Promise<BigNumber>;

    stake(
      amount: BigNumberish,
      positionType: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    stakedBalanceOf(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    unstake(
      tokenId: BigNumberish,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {};

  estimateGas: {
    accumulatedRewardsPerToken(overrides?: CallOverrides): Promise<BigNumber>;

    addToStake(
      tokenId: BigNumberish,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    depositToveAndStakeFrom(
      nftRecipient: string,
      fiduAmount: BigNumberish,
      usdcAmount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    getPosition(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getReward(
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    kick(
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    lastUpdateTime(overrides?: CallOverrides): Promise<BigNumber>;

    stake(
      amount: BigNumberish,
      positionType: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    stakedBalanceOf(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    unstake(
      tokenId: BigNumberish,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    accumulatedRewardsPerToken(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    addToStake(
      tokenId: BigNumberish,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    depositToveAndStakeFrom(
      nftRecipient: string,
      fiduAmount: BigNumberish,
      usdcAmount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    getPosition(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getReward(
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    kick(
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    lastUpdateTime(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    stake(
      amount: BigNumberish,
      positionType: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    stakedBalanceOf(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    unstake(
      tokenId: BigNumberish,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;
  };
}
