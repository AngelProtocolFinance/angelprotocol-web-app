/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "../../../common";

export declare namespace LibAccounts {
  export type FeeSettingStruct = { payoutAddress: string; bps: BigNumberish };

  export type FeeSettingStructOutput = [string, BigNumber] & {
    payoutAddress: string;
    bps: BigNumber;
  };

  export type DelegateStruct = { addr: string; expires: BigNumberish };

  export type DelegateStructOutput = [string, BigNumber] & {
    addr: string;
    expires: BigNumber;
  };

  export type SettingsPermissionStruct = {
    locked: boolean;
    delegate: LibAccounts.DelegateStruct;
  };

  export type SettingsPermissionStructOutput = [
    boolean,
    LibAccounts.DelegateStructOutput
  ] & { locked: boolean; delegate: LibAccounts.DelegateStructOutput };

  export type SettingsControllerStruct = {
    acceptedTokens: LibAccounts.SettingsPermissionStruct;
    lockedInvestmentManagement: LibAccounts.SettingsPermissionStruct;
    liquidInvestmentManagement: LibAccounts.SettingsPermissionStruct;
    allowlistedBeneficiaries: LibAccounts.SettingsPermissionStruct;
    allowlistedContributors: LibAccounts.SettingsPermissionStruct;
    maturityAllowlist: LibAccounts.SettingsPermissionStruct;
    maturityTime: LibAccounts.SettingsPermissionStruct;
    earlyLockedWithdrawFee: LibAccounts.SettingsPermissionStruct;
    withdrawFee: LibAccounts.SettingsPermissionStruct;
    depositFee: LibAccounts.SettingsPermissionStruct;
    balanceFee: LibAccounts.SettingsPermissionStruct;
    name: LibAccounts.SettingsPermissionStruct;
    image: LibAccounts.SettingsPermissionStruct;
    logo: LibAccounts.SettingsPermissionStruct;
    sdgs: LibAccounts.SettingsPermissionStruct;
    splitToLiquid: LibAccounts.SettingsPermissionStruct;
    ignoreUserSplits: LibAccounts.SettingsPermissionStruct;
  };

  export type SettingsControllerStructOutput = [
    LibAccounts.SettingsPermissionStructOutput,
    LibAccounts.SettingsPermissionStructOutput,
    LibAccounts.SettingsPermissionStructOutput,
    LibAccounts.SettingsPermissionStructOutput,
    LibAccounts.SettingsPermissionStructOutput,
    LibAccounts.SettingsPermissionStructOutput,
    LibAccounts.SettingsPermissionStructOutput,
    LibAccounts.SettingsPermissionStructOutput,
    LibAccounts.SettingsPermissionStructOutput,
    LibAccounts.SettingsPermissionStructOutput,
    LibAccounts.SettingsPermissionStructOutput,
    LibAccounts.SettingsPermissionStructOutput,
    LibAccounts.SettingsPermissionStructOutput,
    LibAccounts.SettingsPermissionStructOutput,
    LibAccounts.SettingsPermissionStructOutput,
    LibAccounts.SettingsPermissionStructOutput,
    LibAccounts.SettingsPermissionStructOutput
  ] & {
    acceptedTokens: LibAccounts.SettingsPermissionStructOutput;
    lockedInvestmentManagement: LibAccounts.SettingsPermissionStructOutput;
    liquidInvestmentManagement: LibAccounts.SettingsPermissionStructOutput;
    allowlistedBeneficiaries: LibAccounts.SettingsPermissionStructOutput;
    allowlistedContributors: LibAccounts.SettingsPermissionStructOutput;
    maturityAllowlist: LibAccounts.SettingsPermissionStructOutput;
    maturityTime: LibAccounts.SettingsPermissionStructOutput;
    earlyLockedWithdrawFee: LibAccounts.SettingsPermissionStructOutput;
    withdrawFee: LibAccounts.SettingsPermissionStructOutput;
    depositFee: LibAccounts.SettingsPermissionStructOutput;
    balanceFee: LibAccounts.SettingsPermissionStructOutput;
    name: LibAccounts.SettingsPermissionStructOutput;
    image: LibAccounts.SettingsPermissionStructOutput;
    logo: LibAccounts.SettingsPermissionStructOutput;
    sdgs: LibAccounts.SettingsPermissionStructOutput;
    splitToLiquid: LibAccounts.SettingsPermissionStructOutput;
    ignoreUserSplits: LibAccounts.SettingsPermissionStructOutput;
  };

  export type SplitDetailsStruct = {
    max: BigNumberish;
    min: BigNumberish;
    defaultSplit: BigNumberish;
  };

  export type SplitDetailsStructOutput = [BigNumber, BigNumber, BigNumber] & {
    max: BigNumber;
    min: BigNumber;
    defaultSplit: BigNumber;
  };
}

export declare namespace AccountMessages {
  export type CreateEndowmentRequestStruct = {
    withdrawBeforeMaturity: boolean;
    maturityTime: BigNumberish;
    name: string;
    sdgs: BigNumberish[];
    tier: BigNumberish;
    endowType: BigNumberish;
    logo: string;
    image: string;
    members: string[];
    threshold: BigNumberish;
    duration: BigNumberish;
    allowlistedBeneficiaries: string[];
    allowlistedContributors: string[];
    maturityAllowlist: string[];
    earlyLockedWithdrawFee: LibAccounts.FeeSettingStruct;
    withdrawFee: LibAccounts.FeeSettingStruct;
    depositFee: LibAccounts.FeeSettingStruct;
    balanceFee: LibAccounts.FeeSettingStruct;
    proposalLink: BigNumberish;
    settingsController: LibAccounts.SettingsControllerStruct;
    parent: BigNumberish;
    ignoreUserSplits: boolean;
    splitToLiquid: LibAccounts.SplitDetailsStruct;
    referralId: BigNumberish;
  };

  export type CreateEndowmentRequestStructOutput = [
    boolean,
    BigNumber,
    string,
    BigNumber[],
    number,
    number,
    string,
    string,
    string[],
    BigNumber,
    BigNumber,
    string[],
    string[],
    string[],
    LibAccounts.FeeSettingStructOutput,
    LibAccounts.FeeSettingStructOutput,
    LibAccounts.FeeSettingStructOutput,
    LibAccounts.FeeSettingStructOutput,
    BigNumber,
    LibAccounts.SettingsControllerStructOutput,
    number,
    boolean,
    LibAccounts.SplitDetailsStructOutput,
    BigNumber
  ] & {
    withdrawBeforeMaturity: boolean;
    maturityTime: BigNumber;
    name: string;
    sdgs: BigNumber[];
    tier: number;
    endowType: number;
    logo: string;
    image: string;
    members: string[];
    threshold: BigNumber;
    duration: BigNumber;
    allowlistedBeneficiaries: string[];
    allowlistedContributors: string[];
    maturityAllowlist: string[];
    earlyLockedWithdrawFee: LibAccounts.FeeSettingStructOutput;
    withdrawFee: LibAccounts.FeeSettingStructOutput;
    depositFee: LibAccounts.FeeSettingStructOutput;
    balanceFee: LibAccounts.FeeSettingStructOutput;
    proposalLink: BigNumber;
    settingsController: LibAccounts.SettingsControllerStructOutput;
    parent: number;
    ignoreUserSplits: boolean;
    splitToLiquid: LibAccounts.SplitDetailsStructOutput;
    referralId: BigNumber;
  };
}

export declare namespace ApplicationsStorage {
  export type ConfigStruct = {
    accountsContract: string;
    seedSplitToLiquid: BigNumberish;
    gasAmount: BigNumberish;
    seedAsset: string;
    seedAmount: BigNumberish;
  };

  export type ConfigStructOutput = [
    string,
    BigNumber,
    BigNumber,
    string,
    BigNumber
  ] & {
    accountsContract: string;
    seedSplitToLiquid: BigNumber;
    gasAmount: BigNumber;
    seedAsset: string;
    seedAmount: BigNumber;
  };
}

export interface ICharityApplicationsInterface extends utils.Interface {
  functions: {
    "confirmProposal(uint256)": FunctionFragment;
    "executeProposal(uint256)": FunctionFragment;
    "getProposalConfirmationCount(uint256)": FunctionFragment;
    "getProposalConfirmationStatus(uint256,address)": FunctionFragment;
    "initializeApplications(address[],uint256,bool,uint256,address,uint256,uint256,address,uint256)": FunctionFragment;
    "proposeApplication((bool,uint256,string,uint256[],uint8,uint8,string,string,address[],uint256,uint256,address[],address[],address[],(address,uint256),(address,uint256),(address,uint256),(address,uint256),uint256,((bool,(address,uint256)),(bool,(address,uint256)),(bool,(address,uint256)),(bool,(address,uint256)),(bool,(address,uint256)),(bool,(address,uint256)),(bool,(address,uint256)),(bool,(address,uint256)),(bool,(address,uint256)),(bool,(address,uint256)),(bool,(address,uint256)),(bool,(address,uint256)),(bool,(address,uint256)),(bool,(address,uint256)),(bool,(address,uint256)),(bool,(address,uint256)),(bool,(address,uint256))),uint32,bool,(uint256,uint256,uint256),uint256),bytes)": FunctionFragment;
    "queryConfig()": FunctionFragment;
    "revokeProposalConfirmation(uint256)": FunctionFragment;
    "updateConfig(uint256,address,uint256,uint256,address,uint256)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "confirmProposal"
      | "executeProposal"
      | "getProposalConfirmationCount"
      | "getProposalConfirmationStatus"
      | "initializeApplications"
      | "proposeApplication"
      | "queryConfig"
      | "revokeProposalConfirmation"
      | "updateConfig"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "confirmProposal",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "executeProposal",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getProposalConfirmationCount",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getProposalConfirmationStatus",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "initializeApplications",
    values: [
      string[],
      BigNumberish,
      boolean,
      BigNumberish,
      string,
      BigNumberish,
      BigNumberish,
      string,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "proposeApplication",
    values: [AccountMessages.CreateEndowmentRequestStruct, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "queryConfig",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "revokeProposalConfirmation",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "updateConfig",
    values: [
      BigNumberish,
      string,
      BigNumberish,
      BigNumberish,
      string,
      BigNumberish
    ]
  ): string;

  decodeFunctionResult(
    functionFragment: "confirmProposal",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "executeProposal",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getProposalConfirmationCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getProposalConfirmationStatus",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "initializeApplications",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "proposeApplication",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "queryConfig",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "revokeProposalConfirmation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateConfig",
    data: BytesLike
  ): Result;

  events: {
    "ApplicationConfirmationRevoked(uint256,address)": EventFragment;
    "ApplicationConfirmed(uint256,address)": EventFragment;
    "ApplicationExecuted(uint256)": EventFragment;
    "ApplicationProposed(uint256,address,string,uint256,bytes)": EventFragment;
    "GasSent(uint256,address,uint256)": EventFragment;
    "SeedAssetSent(uint256,address,uint256)": EventFragment;
  };

  getEvent(
    nameOrSignatureOrTopic: "ApplicationConfirmationRevoked"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ApplicationConfirmed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ApplicationExecuted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ApplicationProposed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "GasSent"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SeedAssetSent"): EventFragment;
}

export interface ApplicationConfirmationRevokedEventObject {
  proposalId: BigNumber;
  owner: string;
}
export type ApplicationConfirmationRevokedEvent = TypedEvent<
  [BigNumber, string],
  ApplicationConfirmationRevokedEventObject
>;

export type ApplicationConfirmationRevokedEventFilter =
  TypedEventFilter<ApplicationConfirmationRevokedEvent>;

export interface ApplicationConfirmedEventObject {
  proposalId: BigNumber;
  owner: string;
}
export type ApplicationConfirmedEvent = TypedEvent<
  [BigNumber, string],
  ApplicationConfirmedEventObject
>;

export type ApplicationConfirmedEventFilter =
  TypedEventFilter<ApplicationConfirmedEvent>;

export interface ApplicationExecutedEventObject {
  proposalId: BigNumber;
}
export type ApplicationExecutedEvent = TypedEvent<
  [BigNumber],
  ApplicationExecutedEventObject
>;

export type ApplicationExecutedEventFilter =
  TypedEventFilter<ApplicationExecutedEvent>;

export interface ApplicationProposedEventObject {
  proposalId: BigNumber;
  proposer: string;
  charityName: string;
  expiry: BigNumber;
  metadata: string;
}
export type ApplicationProposedEvent = TypedEvent<
  [BigNumber, string, string, BigNumber, string],
  ApplicationProposedEventObject
>;

export type ApplicationProposedEventFilter =
  TypedEventFilter<ApplicationProposedEvent>;

export interface GasSentEventObject {
  endowmentId: BigNumber;
  member: string;
  amount: BigNumber;
}
export type GasSentEvent = TypedEvent<
  [BigNumber, string, BigNumber],
  GasSentEventObject
>;

export type GasSentEventFilter = TypedEventFilter<GasSentEvent>;

export interface SeedAssetSentEventObject {
  endowmentId: BigNumber;
  asset: string;
  amount: BigNumber;
}
export type SeedAssetSentEvent = TypedEvent<
  [BigNumber, string, BigNumber],
  SeedAssetSentEventObject
>;

export type SeedAssetSentEventFilter = TypedEventFilter<SeedAssetSentEvent>;

export interface ICharityApplications extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: ICharityApplicationsInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    confirmProposal(
      proposalId: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    executeProposal(
      proposalId: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    getProposalConfirmationCount(
      proposalId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getProposalConfirmationStatus(
      proposalId: BigNumberish,
      ownerAddr: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    initializeApplications(
      owners: string[],
      _approvalsRequired: BigNumberish,
      _requireExecution: boolean,
      _transactionExpiry: BigNumberish,
      _accountsContract: string,
      _gasAmount: BigNumberish,
      _seedSplitToLiquid: BigNumberish,
      _seedAsset: string,
      _seedAmount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    proposeApplication(
      application: AccountMessages.CreateEndowmentRequestStruct,
      metadata: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    queryConfig(
      overrides?: CallOverrides
    ): Promise<[ApplicationsStorage.ConfigStructOutput]>;

    revokeProposalConfirmation(
      proposalId: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    updateConfig(
      _transactionExpiry: BigNumberish,
      accountsContract: string,
      seedSplitToLiquid: BigNumberish,
      gasAmount: BigNumberish,
      seedAsset: string,
      seedAmount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;
  };

  confirmProposal(
    proposalId: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  executeProposal(
    proposalId: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  getProposalConfirmationCount(
    proposalId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getProposalConfirmationStatus(
    proposalId: BigNumberish,
    ownerAddr: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  initializeApplications(
    owners: string[],
    _approvalsRequired: BigNumberish,
    _requireExecution: boolean,
    _transactionExpiry: BigNumberish,
    _accountsContract: string,
    _gasAmount: BigNumberish,
    _seedSplitToLiquid: BigNumberish,
    _seedAsset: string,
    _seedAmount: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  proposeApplication(
    application: AccountMessages.CreateEndowmentRequestStruct,
    metadata: BytesLike,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  queryConfig(
    overrides?: CallOverrides
  ): Promise<ApplicationsStorage.ConfigStructOutput>;

  revokeProposalConfirmation(
    proposalId: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  updateConfig(
    _transactionExpiry: BigNumberish,
    accountsContract: string,
    seedSplitToLiquid: BigNumberish,
    gasAmount: BigNumberish,
    seedAsset: string,
    seedAmount: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  callStatic: {
    confirmProposal(
      proposalId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    executeProposal(
      proposalId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<number>;

    getProposalConfirmationCount(
      proposalId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getProposalConfirmationStatus(
      proposalId: BigNumberish,
      ownerAddr: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    initializeApplications(
      owners: string[],
      _approvalsRequired: BigNumberish,
      _requireExecution: boolean,
      _transactionExpiry: BigNumberish,
      _accountsContract: string,
      _gasAmount: BigNumberish,
      _seedSplitToLiquid: BigNumberish,
      _seedAsset: string,
      _seedAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    proposeApplication(
      application: AccountMessages.CreateEndowmentRequestStruct,
      metadata: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    queryConfig(
      overrides?: CallOverrides
    ): Promise<ApplicationsStorage.ConfigStructOutput>;

    revokeProposalConfirmation(
      proposalId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    updateConfig(
      _transactionExpiry: BigNumberish,
      accountsContract: string,
      seedSplitToLiquid: BigNumberish,
      gasAmount: BigNumberish,
      seedAsset: string,
      seedAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "ApplicationConfirmationRevoked(uint256,address)"(
      proposalId?: null,
      owner?: null
    ): ApplicationConfirmationRevokedEventFilter;
    ApplicationConfirmationRevoked(
      proposalId?: null,
      owner?: null
    ): ApplicationConfirmationRevokedEventFilter;

    "ApplicationConfirmed(uint256,address)"(
      proposalId?: null,
      owner?: null
    ): ApplicationConfirmedEventFilter;
    ApplicationConfirmed(
      proposalId?: null,
      owner?: null
    ): ApplicationConfirmedEventFilter;

    "ApplicationExecuted(uint256)"(
      proposalId?: null
    ): ApplicationExecutedEventFilter;
    ApplicationExecuted(proposalId?: null): ApplicationExecutedEventFilter;

    "ApplicationProposed(uint256,address,string,uint256,bytes)"(
      proposalId?: null,
      proposer?: null,
      charityName?: null,
      expiry?: null,
      metadata?: null
    ): ApplicationProposedEventFilter;
    ApplicationProposed(
      proposalId?: null,
      proposer?: null,
      charityName?: null,
      expiry?: null,
      metadata?: null
    ): ApplicationProposedEventFilter;

    "GasSent(uint256,address,uint256)"(
      endowmentId?: null,
      member?: null,
      amount?: null
    ): GasSentEventFilter;
    GasSent(
      endowmentId?: null,
      member?: null,
      amount?: null
    ): GasSentEventFilter;

    "SeedAssetSent(uint256,address,uint256)"(
      endowmentId?: null,
      asset?: null,
      amount?: null
    ): SeedAssetSentEventFilter;
    SeedAssetSent(
      endowmentId?: null,
      asset?: null,
      amount?: null
    ): SeedAssetSentEventFilter;
  };

  estimateGas: {
    confirmProposal(
      proposalId: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    executeProposal(
      proposalId: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    getProposalConfirmationCount(
      proposalId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getProposalConfirmationStatus(
      proposalId: BigNumberish,
      ownerAddr: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    initializeApplications(
      owners: string[],
      _approvalsRequired: BigNumberish,
      _requireExecution: boolean,
      _transactionExpiry: BigNumberish,
      _accountsContract: string,
      _gasAmount: BigNumberish,
      _seedSplitToLiquid: BigNumberish,
      _seedAsset: string,
      _seedAmount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    proposeApplication(
      application: AccountMessages.CreateEndowmentRequestStruct,
      metadata: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    queryConfig(overrides?: CallOverrides): Promise<BigNumber>;

    revokeProposalConfirmation(
      proposalId: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    updateConfig(
      _transactionExpiry: BigNumberish,
      accountsContract: string,
      seedSplitToLiquid: BigNumberish,
      gasAmount: BigNumberish,
      seedAsset: string,
      seedAmount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    confirmProposal(
      proposalId: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    executeProposal(
      proposalId: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    getProposalConfirmationCount(
      proposalId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getProposalConfirmationStatus(
      proposalId: BigNumberish,
      ownerAddr: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    initializeApplications(
      owners: string[],
      _approvalsRequired: BigNumberish,
      _requireExecution: boolean,
      _transactionExpiry: BigNumberish,
      _accountsContract: string,
      _gasAmount: BigNumberish,
      _seedSplitToLiquid: BigNumberish,
      _seedAsset: string,
      _seedAmount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    proposeApplication(
      application: AccountMessages.CreateEndowmentRequestStruct,
      metadata: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    queryConfig(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    revokeProposalConfirmation(
      proposalId: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    updateConfig(
      _transactionExpiry: BigNumberish,
      accountsContract: string,
      seedSplitToLiquid: BigNumberish,
      gasAmount: BigNumberish,
      seedAsset: string,
      seedAmount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;
  };
}
