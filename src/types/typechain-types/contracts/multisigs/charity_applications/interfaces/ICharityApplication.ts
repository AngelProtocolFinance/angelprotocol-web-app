/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../../../common";

export declare namespace AngelCoreStruct {
  export type FeeSettingStruct = {
    payoutAddress: PromiseOrValue<string>;
    bps: PromiseOrValue<BigNumberish>;
  };

  export type FeeSettingStructOutput = [string, BigNumber] & {
    payoutAddress: string;
    bps: BigNumber;
  };

  export type DelegateStruct = {
    addr: PromiseOrValue<string>;
    expires: PromiseOrValue<BigNumberish>;
  };

  export type DelegateStructOutput = [string, BigNumber] & {
    addr: string;
    expires: BigNumber;
  };

  export type SettingsPermissionStruct = {
    locked: PromiseOrValue<boolean>;
    delegate: AngelCoreStruct.DelegateStruct;
  };

  export type SettingsPermissionStructOutput = [
    boolean,
    AngelCoreStruct.DelegateStructOutput
  ] & { locked: boolean; delegate: AngelCoreStruct.DelegateStructOutput };

  export type SettingsControllerStruct = {
    acceptedTokens: AngelCoreStruct.SettingsPermissionStruct;
    lockedInvestmentManagement: AngelCoreStruct.SettingsPermissionStruct;
    liquidInvestmentManagement: AngelCoreStruct.SettingsPermissionStruct;
    allowlistedBeneficiaries: AngelCoreStruct.SettingsPermissionStruct;
    allowlistedContributors: AngelCoreStruct.SettingsPermissionStruct;
    maturityAllowlist: AngelCoreStruct.SettingsPermissionStruct;
    maturityTime: AngelCoreStruct.SettingsPermissionStruct;
    earlyLockedWithdrawFee: AngelCoreStruct.SettingsPermissionStruct;
    withdrawFee: AngelCoreStruct.SettingsPermissionStruct;
    depositFee: AngelCoreStruct.SettingsPermissionStruct;
    balanceFee: AngelCoreStruct.SettingsPermissionStruct;
    name: AngelCoreStruct.SettingsPermissionStruct;
    image: AngelCoreStruct.SettingsPermissionStruct;
    logo: AngelCoreStruct.SettingsPermissionStruct;
    sdgs: AngelCoreStruct.SettingsPermissionStruct;
    splitToLiquid: AngelCoreStruct.SettingsPermissionStruct;
    ignoreUserSplits: AngelCoreStruct.SettingsPermissionStruct;
  };

  export type SettingsControllerStructOutput = [
    AngelCoreStruct.SettingsPermissionStructOutput,
    AngelCoreStruct.SettingsPermissionStructOutput,
    AngelCoreStruct.SettingsPermissionStructOutput,
    AngelCoreStruct.SettingsPermissionStructOutput,
    AngelCoreStruct.SettingsPermissionStructOutput,
    AngelCoreStruct.SettingsPermissionStructOutput,
    AngelCoreStruct.SettingsPermissionStructOutput,
    AngelCoreStruct.SettingsPermissionStructOutput,
    AngelCoreStruct.SettingsPermissionStructOutput,
    AngelCoreStruct.SettingsPermissionStructOutput,
    AngelCoreStruct.SettingsPermissionStructOutput,
    AngelCoreStruct.SettingsPermissionStructOutput,
    AngelCoreStruct.SettingsPermissionStructOutput,
    AngelCoreStruct.SettingsPermissionStructOutput,
    AngelCoreStruct.SettingsPermissionStructOutput,
    AngelCoreStruct.SettingsPermissionStructOutput,
    AngelCoreStruct.SettingsPermissionStructOutput
  ] & {
    acceptedTokens: AngelCoreStruct.SettingsPermissionStructOutput;
    lockedInvestmentManagement: AngelCoreStruct.SettingsPermissionStructOutput;
    liquidInvestmentManagement: AngelCoreStruct.SettingsPermissionStructOutput;
    allowlistedBeneficiaries: AngelCoreStruct.SettingsPermissionStructOutput;
    allowlistedContributors: AngelCoreStruct.SettingsPermissionStructOutput;
    maturityAllowlist: AngelCoreStruct.SettingsPermissionStructOutput;
    maturityTime: AngelCoreStruct.SettingsPermissionStructOutput;
    earlyLockedWithdrawFee: AngelCoreStruct.SettingsPermissionStructOutput;
    withdrawFee: AngelCoreStruct.SettingsPermissionStructOutput;
    depositFee: AngelCoreStruct.SettingsPermissionStructOutput;
    balanceFee: AngelCoreStruct.SettingsPermissionStructOutput;
    name: AngelCoreStruct.SettingsPermissionStructOutput;
    image: AngelCoreStruct.SettingsPermissionStructOutput;
    logo: AngelCoreStruct.SettingsPermissionStructOutput;
    sdgs: AngelCoreStruct.SettingsPermissionStructOutput;
    splitToLiquid: AngelCoreStruct.SettingsPermissionStructOutput;
    ignoreUserSplits: AngelCoreStruct.SettingsPermissionStructOutput;
  };

  export type SplitDetailsStruct = {
    max: PromiseOrValue<BigNumberish>;
    min: PromiseOrValue<BigNumberish>;
    defaultSplit: PromiseOrValue<BigNumberish>;
  };

  export type SplitDetailsStructOutput = [BigNumber, BigNumber, BigNumber] & {
    max: BigNumber;
    min: BigNumber;
    defaultSplit: BigNumber;
  };
}

export declare namespace AccountMessages {
  export type CreateEndowmentRequestStruct = {
    withdrawBeforeMaturity: PromiseOrValue<boolean>;
    maturityTime: PromiseOrValue<BigNumberish>;
    name: PromiseOrValue<string>;
    sdgs: PromiseOrValue<BigNumberish>[];
    tier: PromiseOrValue<BigNumberish>;
    endowType: PromiseOrValue<BigNumberish>;
    logo: PromiseOrValue<string>;
    image: PromiseOrValue<string>;
    members: PromiseOrValue<string>[];
    threshold: PromiseOrValue<BigNumberish>;
    duration: PromiseOrValue<BigNumberish>;
    allowlistedBeneficiaries: PromiseOrValue<string>[];
    allowlistedContributors: PromiseOrValue<string>[];
    earlyLockedWithdrawFee: AngelCoreStruct.FeeSettingStruct;
    withdrawFee: AngelCoreStruct.FeeSettingStruct;
    depositFee: AngelCoreStruct.FeeSettingStruct;
    balanceFee: AngelCoreStruct.FeeSettingStruct;
    proposalLink: PromiseOrValue<BigNumberish>;
    settingsController: AngelCoreStruct.SettingsControllerStruct;
    parent: PromiseOrValue<BigNumberish>;
    maturityAllowlist: PromiseOrValue<string>[];
    ignoreUserSplits: PromiseOrValue<boolean>;
    splitToLiquid: AngelCoreStruct.SplitDetailsStruct;
    referralId: PromiseOrValue<BigNumberish>;
  };

  export type CreateEndowmentRequestStructOutput = [
    boolean,
    BigNumber,
    string,
    BigNumber[],
    number,
    number,
    string,
    string,
    string[],
    BigNumber,
    BigNumber,
    string[],
    string[],
    AngelCoreStruct.FeeSettingStructOutput,
    AngelCoreStruct.FeeSettingStructOutput,
    AngelCoreStruct.FeeSettingStructOutput,
    AngelCoreStruct.FeeSettingStructOutput,
    BigNumber,
    AngelCoreStruct.SettingsControllerStructOutput,
    number,
    string[],
    boolean,
    AngelCoreStruct.SplitDetailsStructOutput,
    BigNumber
  ] & {
    withdrawBeforeMaturity: boolean;
    maturityTime: BigNumber;
    name: string;
    sdgs: BigNumber[];
    tier: number;
    endowType: number;
    logo: string;
    image: string;
    members: string[];
    threshold: BigNumber;
    duration: BigNumber;
    allowlistedBeneficiaries: string[];
    allowlistedContributors: string[];
    earlyLockedWithdrawFee: AngelCoreStruct.FeeSettingStructOutput;
    withdrawFee: AngelCoreStruct.FeeSettingStructOutput;
    depositFee: AngelCoreStruct.FeeSettingStructOutput;
    balanceFee: AngelCoreStruct.FeeSettingStructOutput;
    proposalLink: BigNumber;
    settingsController: AngelCoreStruct.SettingsControllerStructOutput;
    parent: number;
    maturityAllowlist: string[];
    ignoreUserSplits: boolean;
    splitToLiquid: AngelCoreStruct.SplitDetailsStructOutput;
    referralId: BigNumber;
  };
}

export interface ICharityApplicationInterface extends utils.Interface {
  functions: {
    "approveCharity(uint256)": FunctionFragment;
    "proposeCharity((bool,uint256,string,uint256[],uint8,uint8,string,string,address[],uint256,uint256,address[],address[],(address,uint256),(address,uint256),(address,uint256),(address,uint256),uint256,((bool,(address,uint256)),(bool,(address,uint256)),(bool,(address,uint256)),(bool,(address,uint256)),(bool,(address,uint256)),(bool,(address,uint256)),(bool,(address,uint256)),(bool,(address,uint256)),(bool,(address,uint256)),(bool,(address,uint256)),(bool,(address,uint256)),(bool,(address,uint256)),(bool,(address,uint256)),(bool,(address,uint256)),(bool,(address,uint256)),(bool,(address,uint256)),(bool,(address,uint256))),uint32,address[],bool,(uint256,uint256,uint256),uint256),string)": FunctionFragment;
    "rejectCharity(uint256)": FunctionFragment;
    "supportsInterface(bytes4)": FunctionFragment;
    "updateConfig(uint256,address,address,uint256,bool,uint256,bool,address,uint256)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "approveCharity"
      | "proposeCharity"
      | "rejectCharity"
      | "supportsInterface"
      | "updateConfig"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "approveCharity",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "proposeCharity",
    values: [
      AccountMessages.CreateEndowmentRequestStruct,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "rejectCharity",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "updateConfig",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<boolean>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<boolean>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;

  decodeFunctionResult(
    functionFragment: "approveCharity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "proposeCharity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "rejectCharity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateConfig",
    data: BytesLike
  ): Result;

  events: {
    "CharityApproved(uint256,uint256)": EventFragment;
    "CharityProposed(address,uint256,string)": EventFragment;
    "CharityRejected(uint256)": EventFragment;
    "ConfigUpdated()": EventFragment;
    "Deposit(address,uint256)": EventFragment;
    "GasSent(uint256,address,uint256)": EventFragment;
    "Initialized()": EventFragment;
    "SeedAssetTransfer(uint256,address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "CharityApproved"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "CharityProposed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "CharityRejected"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ConfigUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Deposit"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "GasSent"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Initialized"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SeedAssetTransfer"): EventFragment;
}

export interface CharityApprovedEventObject {
  proposalId: BigNumber;
  endowmentId: BigNumber;
}
export type CharityApprovedEvent = TypedEvent<
  [BigNumber, BigNumber],
  CharityApprovedEventObject
>;

export type CharityApprovedEventFilter = TypedEventFilter<CharityApprovedEvent>;

export interface CharityProposedEventObject {
  proposer: string;
  proposalId: BigNumber;
  meta: string;
}
export type CharityProposedEvent = TypedEvent<
  [string, BigNumber, string],
  CharityProposedEventObject
>;

export type CharityProposedEventFilter = TypedEventFilter<CharityProposedEvent>;

export interface CharityRejectedEventObject {
  proposalId: BigNumber;
}
export type CharityRejectedEvent = TypedEvent<
  [BigNumber],
  CharityRejectedEventObject
>;

export type CharityRejectedEventFilter = TypedEventFilter<CharityRejectedEvent>;

export interface ConfigUpdatedEventObject {}
export type ConfigUpdatedEvent = TypedEvent<[], ConfigUpdatedEventObject>;

export type ConfigUpdatedEventFilter = TypedEventFilter<ConfigUpdatedEvent>;

export interface DepositEventObject {
  sender: string;
  amount: BigNumber;
}
export type DepositEvent = TypedEvent<[string, BigNumber], DepositEventObject>;

export type DepositEventFilter = TypedEventFilter<DepositEvent>;

export interface GasSentEventObject {
  endowmentId: BigNumber;
  member: string;
  amount: BigNumber;
}
export type GasSentEvent = TypedEvent<
  [BigNumber, string, BigNumber],
  GasSentEventObject
>;

export type GasSentEventFilter = TypedEventFilter<GasSentEvent>;

export interface InitializedEventObject {}
export type InitializedEvent = TypedEvent<[], InitializedEventObject>;

export type InitializedEventFilter = TypedEventFilter<InitializedEvent>;

export interface SeedAssetTransferEventObject {
  endowmentId: BigNumber;
  asset: string;
  amount: BigNumber;
}
export type SeedAssetTransferEvent = TypedEvent<
  [BigNumber, string, BigNumber],
  SeedAssetTransferEventObject
>;

export type SeedAssetTransferEventFilter =
  TypedEventFilter<SeedAssetTransferEvent>;

export interface ICharityApplication extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: ICharityApplicationInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    approveCharity(
      proposalId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    proposeCharity(
      charityApplication: AccountMessages.CreateEndowmentRequestStruct,
      meta: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    rejectCharity(
      proposalId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    supportsInterface(
      interfaceId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    updateConfig(
      expiry: PromiseOrValue<BigNumberish>,
      apteammultisig: PromiseOrValue<string>,
      accountscontract: PromiseOrValue<string>,
      seedsplittoliquid: PromiseOrValue<BigNumberish>,
      newendowgasmoney: PromiseOrValue<boolean>,
      gasamount: PromiseOrValue<BigNumberish>,
      fundseedasset: PromiseOrValue<boolean>,
      seedasset: PromiseOrValue<string>,
      seedassetamount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  approveCharity(
    proposalId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  proposeCharity(
    charityApplication: AccountMessages.CreateEndowmentRequestStruct,
    meta: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  rejectCharity(
    proposalId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  supportsInterface(
    interfaceId: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  updateConfig(
    expiry: PromiseOrValue<BigNumberish>,
    apteammultisig: PromiseOrValue<string>,
    accountscontract: PromiseOrValue<string>,
    seedsplittoliquid: PromiseOrValue<BigNumberish>,
    newendowgasmoney: PromiseOrValue<boolean>,
    gasamount: PromiseOrValue<BigNumberish>,
    fundseedasset: PromiseOrValue<boolean>,
    seedasset: PromiseOrValue<string>,
    seedassetamount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    approveCharity(
      proposalId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    proposeCharity(
      charityApplication: AccountMessages.CreateEndowmentRequestStruct,
      meta: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    rejectCharity(
      proposalId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    supportsInterface(
      interfaceId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    updateConfig(
      expiry: PromiseOrValue<BigNumberish>,
      apteammultisig: PromiseOrValue<string>,
      accountscontract: PromiseOrValue<string>,
      seedsplittoliquid: PromiseOrValue<BigNumberish>,
      newendowgasmoney: PromiseOrValue<boolean>,
      gasamount: PromiseOrValue<BigNumberish>,
      fundseedasset: PromiseOrValue<boolean>,
      seedasset: PromiseOrValue<string>,
      seedassetamount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "CharityApproved(uint256,uint256)"(
      proposalId?: null,
      endowmentId?: null
    ): CharityApprovedEventFilter;
    CharityApproved(
      proposalId?: null,
      endowmentId?: null
    ): CharityApprovedEventFilter;

    "CharityProposed(address,uint256,string)"(
      proposer?: null,
      proposalId?: null,
      meta?: null
    ): CharityProposedEventFilter;
    CharityProposed(
      proposer?: null,
      proposalId?: null,
      meta?: null
    ): CharityProposedEventFilter;

    "CharityRejected(uint256)"(proposalId?: null): CharityRejectedEventFilter;
    CharityRejected(proposalId?: null): CharityRejectedEventFilter;

    "ConfigUpdated()"(): ConfigUpdatedEventFilter;
    ConfigUpdated(): ConfigUpdatedEventFilter;

    "Deposit(address,uint256)"(
      sender?: null,
      amount?: null
    ): DepositEventFilter;
    Deposit(sender?: null, amount?: null): DepositEventFilter;

    "GasSent(uint256,address,uint256)"(
      endowmentId?: null,
      member?: null,
      amount?: null
    ): GasSentEventFilter;
    GasSent(
      endowmentId?: null,
      member?: null,
      amount?: null
    ): GasSentEventFilter;

    "Initialized()"(): InitializedEventFilter;
    Initialized(): InitializedEventFilter;

    "SeedAssetTransfer(uint256,address,uint256)"(
      endowmentId?: null,
      asset?: null,
      amount?: null
    ): SeedAssetTransferEventFilter;
    SeedAssetTransfer(
      endowmentId?: null,
      asset?: null,
      amount?: null
    ): SeedAssetTransferEventFilter;
  };

  estimateGas: {
    approveCharity(
      proposalId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    proposeCharity(
      charityApplication: AccountMessages.CreateEndowmentRequestStruct,
      meta: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    rejectCharity(
      proposalId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    supportsInterface(
      interfaceId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    updateConfig(
      expiry: PromiseOrValue<BigNumberish>,
      apteammultisig: PromiseOrValue<string>,
      accountscontract: PromiseOrValue<string>,
      seedsplittoliquid: PromiseOrValue<BigNumberish>,
      newendowgasmoney: PromiseOrValue<boolean>,
      gasamount: PromiseOrValue<BigNumberish>,
      fundseedasset: PromiseOrValue<boolean>,
      seedasset: PromiseOrValue<string>,
      seedassetamount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    approveCharity(
      proposalId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    proposeCharity(
      charityApplication: AccountMessages.CreateEndowmentRequestStruct,
      meta: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    rejectCharity(
      proposalId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    supportsInterface(
      interfaceId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    updateConfig(
      expiry: PromiseOrValue<BigNumberish>,
      apteammultisig: PromiseOrValue<string>,
      accountscontract: PromiseOrValue<string>,
      seedsplittoliquid: PromiseOrValue<BigNumberish>,
      newendowgasmoney: PromiseOrValue<boolean>,
      gasamount: PromiseOrValue<BigNumberish>,
      fundseedasset: PromiseOrValue<boolean>,
      seedasset: PromiseOrValue<string>,
      seedassetamount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
