/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../../common";

export interface StorageMultiSigInterface extends utils.Interface {
  functions: {
    "activeOwnersCount()": FunctionFragment;
    "approvalsRequired()": FunctionFragment;
    "confirmations(uint256)": FunctionFragment;
    "isOwner(address)": FunctionFragment;
    "requireExecution()": FunctionFragment;
    "transactionCount()": FunctionFragment;
    "transactions(uint256)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "activeOwnersCount"
      | "approvalsRequired"
      | "confirmations"
      | "isOwner"
      | "requireExecution"
      | "transactionCount"
      | "transactions"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "activeOwnersCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "approvalsRequired",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "confirmations",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "isOwner",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "requireExecution",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transactionCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transactions",
    values: [PromiseOrValue<BigNumberish>]
  ): string;

  decodeFunctionResult(
    functionFragment: "activeOwnersCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "approvalsRequired",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "confirmations",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "isOwner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "requireExecution",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transactionCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transactions",
    data: BytesLike
  ): Result;

  events: {};
}

export interface StorageMultiSig extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: StorageMultiSigInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    activeOwnersCount(overrides?: CallOverrides): Promise<[BigNumber]>;

    approvalsRequired(overrides?: CallOverrides): Promise<[BigNumber]>;

    confirmations(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { count: BigNumber }>;

    isOwner(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    requireExecution(overrides?: CallOverrides): Promise<[boolean]>;

    transactionCount(overrides?: CallOverrides): Promise<[BigNumber]>;

    transactions(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber, string, boolean, string] & {
        destination: string;
        value: BigNumber;
        data: string;
        executed: boolean;
        metadata: string;
      }
    >;
  };

  activeOwnersCount(overrides?: CallOverrides): Promise<BigNumber>;

  approvalsRequired(overrides?: CallOverrides): Promise<BigNumber>;

  confirmations(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  isOwner(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  requireExecution(overrides?: CallOverrides): Promise<boolean>;

  transactionCount(overrides?: CallOverrides): Promise<BigNumber>;

  transactions(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<
    [string, BigNumber, string, boolean, string] & {
      destination: string;
      value: BigNumber;
      data: string;
      executed: boolean;
      metadata: string;
    }
  >;

  callStatic: {
    activeOwnersCount(overrides?: CallOverrides): Promise<BigNumber>;

    approvalsRequired(overrides?: CallOverrides): Promise<BigNumber>;

    confirmations(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isOwner(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    requireExecution(overrides?: CallOverrides): Promise<boolean>;

    transactionCount(overrides?: CallOverrides): Promise<BigNumber>;

    transactions(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber, string, boolean, string] & {
        destination: string;
        value: BigNumber;
        data: string;
        executed: boolean;
        metadata: string;
      }
    >;
  };

  filters: {};

  estimateGas: {
    activeOwnersCount(overrides?: CallOverrides): Promise<BigNumber>;

    approvalsRequired(overrides?: CallOverrides): Promise<BigNumber>;

    confirmations(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isOwner(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    requireExecution(overrides?: CallOverrides): Promise<BigNumber>;

    transactionCount(overrides?: CallOverrides): Promise<BigNumber>;

    transactions(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    activeOwnersCount(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    approvalsRequired(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    confirmations(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isOwner(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    requireExecution(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transactionCount(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transactions(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
