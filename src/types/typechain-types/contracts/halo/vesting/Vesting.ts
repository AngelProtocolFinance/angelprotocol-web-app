/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "../../../common";

export declare namespace VestingStorage {
  export type VestingInfoStruct = {
    amount: BigNumberish;
    startTime: BigNumberish;
    endTime: BigNumberish;
    claimed: BigNumberish;
  };

  export type VestingInfoStructOutput = [
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber
  ] & {
    amount: BigNumber;
    startTime: BigNumber;
    endTime: BigNumber;
    claimed: BigNumber;
  };

  export type ConfigStruct = {
    vestingDuration: BigNumberish;
    vestingSlope: BigNumberish;
  };

  export type ConfigStructOutput = [BigNumber, BigNumber] & {
    vestingDuration: BigNumber;
    vestingSlope: BigNumber;
  };
}

export declare namespace VestingMessages {
  export type InstantiateMsgStruct = {
    vestingDuration: BigNumberish;
    vestingSlope: BigNumberish;
    haloToken: string;
  };

  export type InstantiateMsgStructOutput = [BigNumber, BigNumber, string] & {
    vestingDuration: BigNumber;
    vestingSlope: BigNumber;
    haloToken: string;
  };

  export type StateResponseStruct = {
    haloToken: string;
    genesisTime: BigNumberish;
    totalVesting: BigNumberish;
  };

  export type StateResponseStructOutput = [string, BigNumber, BigNumber] & {
    haloToken: string;
    genesisTime: BigNumber;
    totalVesting: BigNumber;
  };
}

export interface VestingInterface extends utils.Interface {
  functions: {
    "claim(uint256)": FunctionFragment;
    "deposit(address,uint256)": FunctionFragment;
    "getVesting(address,uint256)": FunctionFragment;
    "initialize((uint256,uint256,address))": FunctionFragment;
    "owner()": FunctionFragment;
    "queryConfig()": FunctionFragment;
    "queryState()": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "updateConfig(uint256,uint256)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "claim"
      | "deposit"
      | "getVesting"
      | "initialize"
      | "owner"
      | "queryConfig"
      | "queryState"
      | "renounceOwnership"
      | "transferOwnership"
      | "updateConfig"
  ): FunctionFragment;

  encodeFunctionData(functionFragment: "claim", values: [BigNumberish]): string;
  encodeFunctionData(
    functionFragment: "deposit",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getVesting",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [VestingMessages.InstantiateMsgStruct]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "queryConfig",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "queryState",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "updateConfig",
    values: [BigNumberish, BigNumberish]
  ): string;

  decodeFunctionResult(functionFragment: "claim", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "deposit", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getVesting", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "queryConfig",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "queryState", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateConfig",
    data: BytesLike
  ): Result;

  events: {
    "ConfigUpdated(uint256,uint256)": EventFragment;
    "HaloClaimed(address,uint256,uint256)": EventFragment;
    "HaloVested(address,uint256)": EventFragment;
    "Initialized(uint8)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "ConfigUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "HaloClaimed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "HaloVested"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Initialized"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
}

export interface ConfigUpdatedEventObject {
  vestingDuration: BigNumber;
  vestingSlope: BigNumber;
}
export type ConfigUpdatedEvent = TypedEvent<
  [BigNumber, BigNumber],
  ConfigUpdatedEventObject
>;

export type ConfigUpdatedEventFilter = TypedEventFilter<ConfigUpdatedEvent>;

export interface HaloClaimedEventObject {
  user: string;
  vestingId: BigNumber;
  amount: BigNumber;
}
export type HaloClaimedEvent = TypedEvent<
  [string, BigNumber, BigNumber],
  HaloClaimedEventObject
>;

export type HaloClaimedEventFilter = TypedEventFilter<HaloClaimedEvent>;

export interface HaloVestedEventObject {
  user: string;
  amount: BigNumber;
}
export type HaloVestedEvent = TypedEvent<
  [string, BigNumber],
  HaloVestedEventObject
>;

export type HaloVestedEventFilter = TypedEventFilter<HaloVestedEvent>;

export interface InitializedEventObject {
  version: number;
}
export type InitializedEvent = TypedEvent<[number], InitializedEventObject>;

export type InitializedEventFilter = TypedEventFilter<InitializedEvent>;

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  OwnershipTransferredEventObject
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface Vesting extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: VestingInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    claim(
      vestingId: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    deposit(
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    getVesting(
      claimant: string,
      vestingId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[VestingStorage.VestingInfoStructOutput]>;

    initialize(
      details: VestingMessages.InstantiateMsgStruct,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    queryConfig(
      overrides?: CallOverrides
    ): Promise<[VestingStorage.ConfigStructOutput]>;

    queryState(
      overrides?: CallOverrides
    ): Promise<[VestingMessages.StateResponseStructOutput]>;

    renounceOwnership(
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    updateConfig(
      vestingDuration: BigNumberish,
      vestingSlope: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;
  };

  claim(
    vestingId: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  deposit(
    recipient: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  getVesting(
    claimant: string,
    vestingId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<VestingStorage.VestingInfoStructOutput>;

  initialize(
    details: VestingMessages.InstantiateMsgStruct,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  owner(overrides?: CallOverrides): Promise<string>;

  queryConfig(
    overrides?: CallOverrides
  ): Promise<VestingStorage.ConfigStructOutput>;

  queryState(
    overrides?: CallOverrides
  ): Promise<VestingMessages.StateResponseStructOutput>;

  renounceOwnership(
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  updateConfig(
    vestingDuration: BigNumberish,
    vestingSlope: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  callStatic: {
    claim(vestingId: BigNumberish, overrides?: CallOverrides): Promise<void>;

    deposit(
      recipient: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    getVesting(
      claimant: string,
      vestingId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<VestingStorage.VestingInfoStructOutput>;

    initialize(
      details: VestingMessages.InstantiateMsgStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    owner(overrides?: CallOverrides): Promise<string>;

    queryConfig(
      overrides?: CallOverrides
    ): Promise<VestingStorage.ConfigStructOutput>;

    queryState(
      overrides?: CallOverrides
    ): Promise<VestingMessages.StateResponseStructOutput>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    updateConfig(
      vestingDuration: BigNumberish,
      vestingSlope: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "ConfigUpdated(uint256,uint256)"(
      vestingDuration?: null,
      vestingSlope?: null
    ): ConfigUpdatedEventFilter;
    ConfigUpdated(
      vestingDuration?: null,
      vestingSlope?: null
    ): ConfigUpdatedEventFilter;

    "HaloClaimed(address,uint256,uint256)"(
      user?: null,
      vestingId?: null,
      amount?: null
    ): HaloClaimedEventFilter;
    HaloClaimed(
      user?: null,
      vestingId?: null,
      amount?: null
    ): HaloClaimedEventFilter;

    "HaloVested(address,uint256)"(
      user?: null,
      amount?: null
    ): HaloVestedEventFilter;
    HaloVested(user?: null, amount?: null): HaloVestedEventFilter;

    "Initialized(uint8)"(version?: null): InitializedEventFilter;
    Initialized(version?: null): InitializedEventFilter;

    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;
  };

  estimateGas: {
    claim(
      vestingId: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    deposit(
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    getVesting(
      claimant: string,
      vestingId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    initialize(
      details: VestingMessages.InstantiateMsgStruct,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    queryConfig(overrides?: CallOverrides): Promise<BigNumber>;

    queryState(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    updateConfig(
      vestingDuration: BigNumberish,
      vestingSlope: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    claim(
      vestingId: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    deposit(
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    getVesting(
      claimant: string,
      vestingId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    initialize(
      details: VestingMessages.InstantiateMsgStruct,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    queryConfig(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    queryState(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    updateConfig(
      vestingDuration: BigNumberish,
      vestingSlope: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;
  };
}
