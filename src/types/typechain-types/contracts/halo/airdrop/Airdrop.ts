/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "../../../common";

export declare namespace AirdropMessage {
  export type InstantiateMsgStruct = { haloToken: string };

  export type InstantiateMsgStructOutput = [string] & { haloToken: string };

  export type MerkleRootResponseStruct = {
    stage: BigNumberish;
    merkleRoot: BytesLike;
  };

  export type MerkleRootResponseStructOutput = [BigNumber, string] & {
    stage: BigNumber;
    merkleRoot: string;
  };
}

export interface AirdropInterface extends utils.Interface {
  functions: {
    "claim(uint256,bytes32[])": FunctionFragment;
    "initialize((address))": FunctionFragment;
    "owner()": FunctionFragment;
    "queryIsClaimed(uint256,address)": FunctionFragment;
    "queryLatestStage()": FunctionFragment;
    "queryMerkleRoot(uint256)": FunctionFragment;
    "registerMerkleRoot(bytes32)": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "claim"
      | "initialize"
      | "owner"
      | "queryIsClaimed"
      | "queryLatestStage"
      | "queryMerkleRoot"
      | "registerMerkleRoot"
      | "renounceOwnership"
      | "transferOwnership"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "claim",
    values: [BigNumberish, BytesLike[]]
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [AirdropMessage.InstantiateMsgStruct]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "queryIsClaimed",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "queryLatestStage",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "queryMerkleRoot",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "registerMerkleRoot",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;

  decodeFunctionResult(functionFragment: "claim", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "queryIsClaimed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "queryLatestStage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "queryMerkleRoot",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "registerMerkleRoot",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;

  events: {
    "AirdropClaimed(uint256,address,uint256)": EventFragment;
    "AirdropInitialized(address)": EventFragment;
    "Initialized(uint8)": EventFragment;
    "MerkleRootRegistered(uint256,bytes32)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AirdropClaimed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "AirdropInitialized"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Initialized"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "MerkleRootRegistered"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
}

export interface AirdropClaimedEventObject {
  stage: BigNumber;
  sender: string;
  amount: BigNumber;
}
export type AirdropClaimedEvent = TypedEvent<
  [BigNumber, string, BigNumber],
  AirdropClaimedEventObject
>;

export type AirdropClaimedEventFilter = TypedEventFilter<AirdropClaimedEvent>;

export interface AirdropInitializedEventObject {
  haloToken: string;
}
export type AirdropInitializedEvent = TypedEvent<
  [string],
  AirdropInitializedEventObject
>;

export type AirdropInitializedEventFilter =
  TypedEventFilter<AirdropInitializedEvent>;

export interface InitializedEventObject {
  version: number;
}
export type InitializedEvent = TypedEvent<[number], InitializedEventObject>;

export type InitializedEventFilter = TypedEventFilter<InitializedEvent>;

export interface MerkleRootRegisteredEventObject {
  stage: BigNumber;
  merkleRoot: string;
}
export type MerkleRootRegisteredEvent = TypedEvent<
  [BigNumber, string],
  MerkleRootRegisteredEventObject
>;

export type MerkleRootRegisteredEventFilter =
  TypedEventFilter<MerkleRootRegisteredEvent>;

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  OwnershipTransferredEventObject
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface Airdrop extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: AirdropInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    claim(
      amount: BigNumberish,
      merkleProof: BytesLike[],
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    initialize(
      details: AirdropMessage.InstantiateMsgStruct,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    queryIsClaimed(
      stage: BigNumberish,
      addr: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    queryLatestStage(overrides?: CallOverrides): Promise<[BigNumber]>;

    queryMerkleRoot(
      stage: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[AirdropMessage.MerkleRootResponseStructOutput]>;

    registerMerkleRoot(
      merkleRoot: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;
  };

  claim(
    amount: BigNumberish,
    merkleProof: BytesLike[],
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  initialize(
    details: AirdropMessage.InstantiateMsgStruct,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  owner(overrides?: CallOverrides): Promise<string>;

  queryIsClaimed(
    stage: BigNumberish,
    addr: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  queryLatestStage(overrides?: CallOverrides): Promise<BigNumber>;

  queryMerkleRoot(
    stage: BigNumberish,
    overrides?: CallOverrides
  ): Promise<AirdropMessage.MerkleRootResponseStructOutput>;

  registerMerkleRoot(
    merkleRoot: BytesLike,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  renounceOwnership(
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  callStatic: {
    claim(
      amount: BigNumberish,
      merkleProof: BytesLike[],
      overrides?: CallOverrides
    ): Promise<void>;

    initialize(
      details: AirdropMessage.InstantiateMsgStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    owner(overrides?: CallOverrides): Promise<string>;

    queryIsClaimed(
      stage: BigNumberish,
      addr: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    queryLatestStage(overrides?: CallOverrides): Promise<BigNumber>;

    queryMerkleRoot(
      stage: BigNumberish,
      overrides?: CallOverrides
    ): Promise<AirdropMessage.MerkleRootResponseStructOutput>;

    registerMerkleRoot(
      merkleRoot: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "AirdropClaimed(uint256,address,uint256)"(
      stage?: null,
      sender?: null,
      amount?: null
    ): AirdropClaimedEventFilter;
    AirdropClaimed(
      stage?: null,
      sender?: null,
      amount?: null
    ): AirdropClaimedEventFilter;

    "AirdropInitialized(address)"(
      haloToken?: null
    ): AirdropInitializedEventFilter;
    AirdropInitialized(haloToken?: null): AirdropInitializedEventFilter;

    "Initialized(uint8)"(version?: null): InitializedEventFilter;
    Initialized(version?: null): InitializedEventFilter;

    "MerkleRootRegistered(uint256,bytes32)"(
      stage?: null,
      merkleRoot?: null
    ): MerkleRootRegisteredEventFilter;
    MerkleRootRegistered(
      stage?: null,
      merkleRoot?: null
    ): MerkleRootRegisteredEventFilter;

    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;
  };

  estimateGas: {
    claim(
      amount: BigNumberish,
      merkleProof: BytesLike[],
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    initialize(
      details: AirdropMessage.InstantiateMsgStruct,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    queryIsClaimed(
      stage: BigNumberish,
      addr: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    queryLatestStage(overrides?: CallOverrides): Promise<BigNumber>;

    queryMerkleRoot(
      stage: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    registerMerkleRoot(
      merkleRoot: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    claim(
      amount: BigNumberish,
      merkleProof: BytesLike[],
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    initialize(
      details: AirdropMessage.InstantiateMsgStruct,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    queryIsClaimed(
      stage: BigNumberish,
      addr: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    queryLatestStage(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    queryMerkleRoot(
      stage: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    registerMerkleRoot(
      merkleRoot: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;
  };
}
