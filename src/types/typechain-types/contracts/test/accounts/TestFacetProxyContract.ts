/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../../common";

export declare namespace LibAccounts {
  export type BeneficiaryDataStruct = {
    endowId: PromiseOrValue<BigNumberish>;
    fundId: PromiseOrValue<BigNumberish>;
    addr: PromiseOrValue<string>;
  };

  export type BeneficiaryDataStructOutput = [number, BigNumber, string] & {
    endowId: number;
    fundId: BigNumber;
    addr: string;
  };

  export type BeneficiaryStruct = {
    data: LibAccounts.BeneficiaryDataStruct;
    enumData: PromiseOrValue<BigNumberish>;
  };

  export type BeneficiaryStructOutput = [
    LibAccounts.BeneficiaryDataStructOutput,
    number
  ] & { data: LibAccounts.BeneficiaryDataStructOutput; enumData: number };

  export type FeeSettingStruct = {
    payoutAddress: PromiseOrValue<string>;
    bps: PromiseOrValue<BigNumberish>;
  };

  export type FeeSettingStructOutput = [string, BigNumber] & {
    payoutAddress: string;
    bps: BigNumber;
  };

  export type DelegateStruct = {
    addr: PromiseOrValue<string>;
    expires: PromiseOrValue<BigNumberish>;
  };

  export type DelegateStructOutput = [string, BigNumber] & {
    addr: string;
    expires: BigNumber;
  };

  export type SettingsPermissionStruct = {
    locked: PromiseOrValue<boolean>;
    delegate: LibAccounts.DelegateStruct;
  };

  export type SettingsPermissionStructOutput = [
    boolean,
    LibAccounts.DelegateStructOutput
  ] & { locked: boolean; delegate: LibAccounts.DelegateStructOutput };

  export type SettingsControllerStruct = {
    acceptedTokens: LibAccounts.SettingsPermissionStruct;
    lockedInvestmentManagement: LibAccounts.SettingsPermissionStruct;
    liquidInvestmentManagement: LibAccounts.SettingsPermissionStruct;
    allowlistedBeneficiaries: LibAccounts.SettingsPermissionStruct;
    allowlistedContributors: LibAccounts.SettingsPermissionStruct;
    maturityAllowlist: LibAccounts.SettingsPermissionStruct;
    maturityTime: LibAccounts.SettingsPermissionStruct;
    earlyLockedWithdrawFee: LibAccounts.SettingsPermissionStruct;
    withdrawFee: LibAccounts.SettingsPermissionStruct;
    depositFee: LibAccounts.SettingsPermissionStruct;
    balanceFee: LibAccounts.SettingsPermissionStruct;
    name: LibAccounts.SettingsPermissionStruct;
    image: LibAccounts.SettingsPermissionStruct;
    logo: LibAccounts.SettingsPermissionStruct;
    sdgs: LibAccounts.SettingsPermissionStruct;
    splitToLiquid: LibAccounts.SettingsPermissionStruct;
    ignoreUserSplits: LibAccounts.SettingsPermissionStruct;
  };

  export type SettingsControllerStructOutput = [
    LibAccounts.SettingsPermissionStructOutput,
    LibAccounts.SettingsPermissionStructOutput,
    LibAccounts.SettingsPermissionStructOutput,
    LibAccounts.SettingsPermissionStructOutput,
    LibAccounts.SettingsPermissionStructOutput,
    LibAccounts.SettingsPermissionStructOutput,
    LibAccounts.SettingsPermissionStructOutput,
    LibAccounts.SettingsPermissionStructOutput,
    LibAccounts.SettingsPermissionStructOutput,
    LibAccounts.SettingsPermissionStructOutput,
    LibAccounts.SettingsPermissionStructOutput,
    LibAccounts.SettingsPermissionStructOutput,
    LibAccounts.SettingsPermissionStructOutput,
    LibAccounts.SettingsPermissionStructOutput,
    LibAccounts.SettingsPermissionStructOutput,
    LibAccounts.SettingsPermissionStructOutput,
    LibAccounts.SettingsPermissionStructOutput
  ] & {
    acceptedTokens: LibAccounts.SettingsPermissionStructOutput;
    lockedInvestmentManagement: LibAccounts.SettingsPermissionStructOutput;
    liquidInvestmentManagement: LibAccounts.SettingsPermissionStructOutput;
    allowlistedBeneficiaries: LibAccounts.SettingsPermissionStructOutput;
    allowlistedContributors: LibAccounts.SettingsPermissionStructOutput;
    maturityAllowlist: LibAccounts.SettingsPermissionStructOutput;
    maturityTime: LibAccounts.SettingsPermissionStructOutput;
    earlyLockedWithdrawFee: LibAccounts.SettingsPermissionStructOutput;
    withdrawFee: LibAccounts.SettingsPermissionStructOutput;
    depositFee: LibAccounts.SettingsPermissionStructOutput;
    balanceFee: LibAccounts.SettingsPermissionStructOutput;
    name: LibAccounts.SettingsPermissionStructOutput;
    image: LibAccounts.SettingsPermissionStructOutput;
    logo: LibAccounts.SettingsPermissionStructOutput;
    sdgs: LibAccounts.SettingsPermissionStructOutput;
    splitToLiquid: LibAccounts.SettingsPermissionStructOutput;
    ignoreUserSplits: LibAccounts.SettingsPermissionStructOutput;
  };

  export type SplitDetailsStruct = {
    max: PromiseOrValue<BigNumberish>;
    min: PromiseOrValue<BigNumberish>;
    defaultSplit: PromiseOrValue<BigNumberish>;
  };

  export type SplitDetailsStructOutput = [BigNumber, BigNumber, BigNumber] & {
    max: BigNumber;
    min: BigNumber;
    defaultSplit: BigNumber;
  };
}

export declare namespace AccountStorage {
  export type ConfigStruct = {
    owner: PromiseOrValue<string>;
    version: PromiseOrValue<string>;
    registrarContract: PromiseOrValue<string>;
    nextAccountId: PromiseOrValue<BigNumberish>;
    maxGeneralCategoryId: PromiseOrValue<BigNumberish>;
    subDao: PromiseOrValue<string>;
    gateway: PromiseOrValue<string>;
    gasReceiver: PromiseOrValue<string>;
    reentrancyGuardLocked: PromiseOrValue<boolean>;
    earlyLockedWithdrawFee: LibAccounts.FeeSettingStruct;
  };

  export type ConfigStructOutput = [
    string,
    string,
    string,
    number,
    BigNumber,
    string,
    string,
    string,
    boolean,
    LibAccounts.FeeSettingStructOutput
  ] & {
    owner: string;
    version: string;
    registrarContract: string;
    nextAccountId: number;
    maxGeneralCategoryId: BigNumber;
    subDao: string;
    gateway: string;
    gasReceiver: string;
    reentrancyGuardLocked: boolean;
    earlyLockedWithdrawFee: LibAccounts.FeeSettingStructOutput;
  };

  export type EndowmentStruct = {
    owner: PromiseOrValue<string>;
    name: PromiseOrValue<string>;
    sdgs: PromiseOrValue<BigNumberish>[];
    tier: PromiseOrValue<BigNumberish>;
    endowType: PromiseOrValue<BigNumberish>;
    logo: PromiseOrValue<string>;
    image: PromiseOrValue<string>;
    maturityTime: PromiseOrValue<BigNumberish>;
    rebalance: LocalRegistrarLib.RebalanceParamsStruct;
    pendingRedemptions: PromiseOrValue<BigNumberish>;
    proposalLink: PromiseOrValue<BigNumberish>;
    multisig: PromiseOrValue<string>;
    dao: PromiseOrValue<string>;
    daoToken: PromiseOrValue<string>;
    donationMatchActive: PromiseOrValue<boolean>;
    donationMatchContract: PromiseOrValue<string>;
    allowlistedBeneficiaries: PromiseOrValue<string>[];
    allowlistedContributors: PromiseOrValue<string>[];
    maturityAllowlist: PromiseOrValue<string>[];
    earlyLockedWithdrawFee: LibAccounts.FeeSettingStruct;
    withdrawFee: LibAccounts.FeeSettingStruct;
    depositFee: LibAccounts.FeeSettingStruct;
    balanceFee: LibAccounts.FeeSettingStruct;
    settingsController: LibAccounts.SettingsControllerStruct;
    parent: PromiseOrValue<BigNumberish>;
    ignoreUserSplits: PromiseOrValue<boolean>;
    splitToLiquid: LibAccounts.SplitDetailsStruct;
    referralId: PromiseOrValue<BigNumberish>;
  };

  export type EndowmentStructOutput = [
    string,
    string,
    BigNumber[],
    number,
    number,
    string,
    string,
    BigNumber,
    LocalRegistrarLib.RebalanceParamsStructOutput,
    BigNumber,
    BigNumber,
    string,
    string,
    string,
    boolean,
    string,
    string[],
    string[],
    string[],
    LibAccounts.FeeSettingStructOutput,
    LibAccounts.FeeSettingStructOutput,
    LibAccounts.FeeSettingStructOutput,
    LibAccounts.FeeSettingStructOutput,
    LibAccounts.SettingsControllerStructOutput,
    number,
    boolean,
    LibAccounts.SplitDetailsStructOutput,
    BigNumber
  ] & {
    owner: string;
    name: string;
    sdgs: BigNumber[];
    tier: number;
    endowType: number;
    logo: string;
    image: string;
    maturityTime: BigNumber;
    rebalance: LocalRegistrarLib.RebalanceParamsStructOutput;
    pendingRedemptions: BigNumber;
    proposalLink: BigNumber;
    multisig: string;
    dao: string;
    daoToken: string;
    donationMatchActive: boolean;
    donationMatchContract: string;
    allowlistedBeneficiaries: string[];
    allowlistedContributors: string[];
    maturityAllowlist: string[];
    earlyLockedWithdrawFee: LibAccounts.FeeSettingStructOutput;
    withdrawFee: LibAccounts.FeeSettingStructOutput;
    depositFee: LibAccounts.FeeSettingStructOutput;
    balanceFee: LibAccounts.FeeSettingStructOutput;
    settingsController: LibAccounts.SettingsControllerStructOutput;
    parent: number;
    ignoreUserSplits: boolean;
    splitToLiquid: LibAccounts.SplitDetailsStructOutput;
    referralId: BigNumber;
  };
}

export declare namespace LocalRegistrarLib {
  export type RebalanceParamsStruct = {
    rebalanceLiquidProfits: PromiseOrValue<boolean>;
    lockedRebalanceToLiquid: PromiseOrValue<BigNumberish>;
    interestDistribution: PromiseOrValue<BigNumberish>;
    lockedPrincipleToLiquid: PromiseOrValue<boolean>;
    principleDistribution: PromiseOrValue<BigNumberish>;
    basis: PromiseOrValue<BigNumberish>;
  };

  export type RebalanceParamsStructOutput = [
    boolean,
    number,
    number,
    boolean,
    number,
    number
  ] & {
    rebalanceLiquidProfits: boolean;
    lockedRebalanceToLiquid: number;
    interestDistribution: number;
    lockedPrincipleToLiquid: boolean;
    principleDistribution: number;
    basis: number;
  };
}

export interface TestFacetProxyContractInterface extends utils.Interface {
  functions: {
    "getActiveStrategyEndowmentState(uint32,bytes4)": FunctionFragment;
    "getAdmin()": FunctionFragment;
    "getClosingEndowmentState(uint32)": FunctionFragment;
    "getConfig()": FunctionFragment;
    "getDaoTokenBalance(uint32)": FunctionFragment;
    "getEndowmentDetails(uint32)": FunctionFragment;
    "getEndowmentTokenBalance(uint32,address)": FunctionFragment;
    "getImplementation()": FunctionFragment;
    "getPriceFeed(uint32,address)": FunctionFragment;
    "getTokenAccepted(uint32,address)": FunctionFragment;
    "getTokenAllowance(uint32,address,address)": FunctionFragment;
    "setActiveStrategyEndowmentState(uint32,bytes4,bool)": FunctionFragment;
    "setClosingEndowmentState(uint32,bool,((uint32,uint256,address),uint8))": FunctionFragment;
    "setConfig((address,string,address,uint32,uint256,address,address,address,bool,(address,uint256)))": FunctionFragment;
    "setDaoTokenBalance(uint32,uint256)": FunctionFragment;
    "setEndowmentDetails(uint32,(address,string,uint256[],uint8,uint8,string,string,uint256,(bool,uint32,uint32,bool,uint32,uint32),uint256,uint256,address,address,address,bool,address,address[],address[],address[],(address,uint256),(address,uint256),(address,uint256),(address,uint256),((bool,(address,uint256)),(bool,(address,uint256)),(bool,(address,uint256)),(bool,(address,uint256)),(bool,(address,uint256)),(bool,(address,uint256)),(bool,(address,uint256)),(bool,(address,uint256)),(bool,(address,uint256)),(bool,(address,uint256)),(bool,(address,uint256)),(bool,(address,uint256)),(bool,(address,uint256)),(bool,(address,uint256)),(bool,(address,uint256)),(bool,(address,uint256)),(bool,(address,uint256))),uint32,bool,(uint256,uint256,uint256),uint256))": FunctionFragment;
    "setEndowmentTokenBalance(uint32,address,uint256,uint256)": FunctionFragment;
    "setPriceFeed(uint32,address,address)": FunctionFragment;
    "setTokenAccepted(uint32,address,bool)": FunctionFragment;
    "setTokenAllowance(uint32,address,address,uint256)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "getActiveStrategyEndowmentState"
      | "getAdmin"
      | "getClosingEndowmentState"
      | "getConfig"
      | "getDaoTokenBalance"
      | "getEndowmentDetails"
      | "getEndowmentTokenBalance"
      | "getImplementation"
      | "getPriceFeed"
      | "getTokenAccepted"
      | "getTokenAllowance"
      | "setActiveStrategyEndowmentState"
      | "setClosingEndowmentState"
      | "setConfig"
      | "setDaoTokenBalance"
      | "setEndowmentDetails"
      | "setEndowmentTokenBalance"
      | "setPriceFeed"
      | "setTokenAccepted"
      | "setTokenAllowance"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "getActiveStrategyEndowmentState",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(functionFragment: "getAdmin", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getClosingEndowmentState",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(functionFragment: "getConfig", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getDaoTokenBalance",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getEndowmentDetails",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getEndowmentTokenBalance",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getImplementation",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getPriceFeed",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getTokenAccepted",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getTokenAllowance",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "setActiveStrategyEndowmentState",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<boolean>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "setClosingEndowmentState",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<boolean>,
      LibAccounts.BeneficiaryStruct
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "setConfig",
    values: [AccountStorage.ConfigStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "setDaoTokenBalance",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setEndowmentDetails",
    values: [PromiseOrValue<BigNumberish>, AccountStorage.EndowmentStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "setEndowmentTokenBalance",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "setPriceFeed",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "setTokenAccepted",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<boolean>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "setTokenAllowance",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;

  decodeFunctionResult(
    functionFragment: "getActiveStrategyEndowmentState",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getAdmin", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getClosingEndowmentState",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getConfig", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getDaoTokenBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getEndowmentDetails",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getEndowmentTokenBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getImplementation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPriceFeed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTokenAccepted",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTokenAllowance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setActiveStrategyEndowmentState",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setClosingEndowmentState",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setConfig", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setDaoTokenBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setEndowmentDetails",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setEndowmentTokenBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setPriceFeed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setTokenAccepted",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setTokenAllowance",
    data: BytesLike
  ): Result;

  events: {
    "AdminChanged(address,address)": EventFragment;
    "BeaconUpgraded(address)": EventFragment;
    "Upgraded(address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AdminChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "BeaconUpgraded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Upgraded"): EventFragment;
}

export interface AdminChangedEventObject {
  previousAdmin: string;
  newAdmin: string;
}
export type AdminChangedEvent = TypedEvent<
  [string, string],
  AdminChangedEventObject
>;

export type AdminChangedEventFilter = TypedEventFilter<AdminChangedEvent>;

export interface BeaconUpgradedEventObject {
  beacon: string;
}
export type BeaconUpgradedEvent = TypedEvent<
  [string],
  BeaconUpgradedEventObject
>;

export type BeaconUpgradedEventFilter = TypedEventFilter<BeaconUpgradedEvent>;

export interface UpgradedEventObject {
  implementation: string;
}
export type UpgradedEvent = TypedEvent<[string], UpgradedEventObject>;

export type UpgradedEventFilter = TypedEventFilter<UpgradedEvent>;

export interface TestFacetProxyContract extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: TestFacetProxyContractInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    getActiveStrategyEndowmentState(
      accountId: PromiseOrValue<BigNumberish>,
      _strategy: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    getAdmin(overrides?: CallOverrides): Promise<[string] & { adm: string }>;

    getClosingEndowmentState(
      accountId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[boolean, LibAccounts.BeneficiaryStructOutput]>;

    getConfig(
      overrides?: CallOverrides
    ): Promise<[AccountStorage.ConfigStructOutput]>;

    getDaoTokenBalance(
      accountId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getEndowmentDetails(
      accountId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[AccountStorage.EndowmentStructOutput]>;

    getEndowmentTokenBalance(
      accountId: PromiseOrValue<BigNumberish>,
      _token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber]>;

    getImplementation(
      overrides?: CallOverrides
    ): Promise<[string] & { impl: string }>;

    getPriceFeed(
      accountId: PromiseOrValue<BigNumberish>,
      _token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getTokenAccepted(
      accountId: PromiseOrValue<BigNumberish>,
      _token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    getTokenAllowance(
      accountId: PromiseOrValue<BigNumberish>,
      _spender: PromiseOrValue<string>,
      _token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    setActiveStrategyEndowmentState(
      accountId: PromiseOrValue<BigNumberish>,
      _strategy: PromiseOrValue<BytesLike>,
      _accepted: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setClosingEndowmentState(
      accountId: PromiseOrValue<BigNumberish>,
      _closing: PromiseOrValue<boolean>,
      _closingBeneficiary: LibAccounts.BeneficiaryStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setConfig(
      _config: AccountStorage.ConfigStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setDaoTokenBalance(
      accountId: PromiseOrValue<BigNumberish>,
      _tokenBal: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setEndowmentDetails(
      accountId: PromiseOrValue<BigNumberish>,
      _endowment: AccountStorage.EndowmentStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setEndowmentTokenBalance(
      accountId: PromiseOrValue<BigNumberish>,
      _token: PromiseOrValue<string>,
      _lockBal: PromiseOrValue<BigNumberish>,
      _liqBal: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setPriceFeed(
      accountId: PromiseOrValue<BigNumberish>,
      _token: PromiseOrValue<string>,
      _feed: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setTokenAccepted(
      accountId: PromiseOrValue<BigNumberish>,
      _token: PromiseOrValue<string>,
      _accepted: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setTokenAllowance(
      accountId: PromiseOrValue<BigNumberish>,
      _spender: PromiseOrValue<string>,
      _token: PromiseOrValue<string>,
      _allowance: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  getActiveStrategyEndowmentState(
    accountId: PromiseOrValue<BigNumberish>,
    _strategy: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  getAdmin(overrides?: CallOverrides): Promise<string>;

  getClosingEndowmentState(
    accountId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<[boolean, LibAccounts.BeneficiaryStructOutput]>;

  getConfig(
    overrides?: CallOverrides
  ): Promise<AccountStorage.ConfigStructOutput>;

  getDaoTokenBalance(
    accountId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getEndowmentDetails(
    accountId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<AccountStorage.EndowmentStructOutput>;

  getEndowmentTokenBalance(
    accountId: PromiseOrValue<BigNumberish>,
    _token: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<[BigNumber, BigNumber]>;

  getImplementation(overrides?: CallOverrides): Promise<string>;

  getPriceFeed(
    accountId: PromiseOrValue<BigNumberish>,
    _token: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<string>;

  getTokenAccepted(
    accountId: PromiseOrValue<BigNumberish>,
    _token: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  getTokenAllowance(
    accountId: PromiseOrValue<BigNumberish>,
    _spender: PromiseOrValue<string>,
    _token: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  setActiveStrategyEndowmentState(
    accountId: PromiseOrValue<BigNumberish>,
    _strategy: PromiseOrValue<BytesLike>,
    _accepted: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setClosingEndowmentState(
    accountId: PromiseOrValue<BigNumberish>,
    _closing: PromiseOrValue<boolean>,
    _closingBeneficiary: LibAccounts.BeneficiaryStruct,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setConfig(
    _config: AccountStorage.ConfigStruct,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setDaoTokenBalance(
    accountId: PromiseOrValue<BigNumberish>,
    _tokenBal: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setEndowmentDetails(
    accountId: PromiseOrValue<BigNumberish>,
    _endowment: AccountStorage.EndowmentStruct,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setEndowmentTokenBalance(
    accountId: PromiseOrValue<BigNumberish>,
    _token: PromiseOrValue<string>,
    _lockBal: PromiseOrValue<BigNumberish>,
    _liqBal: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setPriceFeed(
    accountId: PromiseOrValue<BigNumberish>,
    _token: PromiseOrValue<string>,
    _feed: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setTokenAccepted(
    accountId: PromiseOrValue<BigNumberish>,
    _token: PromiseOrValue<string>,
    _accepted: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setTokenAllowance(
    accountId: PromiseOrValue<BigNumberish>,
    _spender: PromiseOrValue<string>,
    _token: PromiseOrValue<string>,
    _allowance: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    getActiveStrategyEndowmentState(
      accountId: PromiseOrValue<BigNumberish>,
      _strategy: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    getAdmin(overrides?: CallOverrides): Promise<string>;

    getClosingEndowmentState(
      accountId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[boolean, LibAccounts.BeneficiaryStructOutput]>;

    getConfig(
      overrides?: CallOverrides
    ): Promise<AccountStorage.ConfigStructOutput>;

    getDaoTokenBalance(
      accountId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getEndowmentDetails(
      accountId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<AccountStorage.EndowmentStructOutput>;

    getEndowmentTokenBalance(
      accountId: PromiseOrValue<BigNumberish>,
      _token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber]>;

    getImplementation(overrides?: CallOverrides): Promise<string>;

    getPriceFeed(
      accountId: PromiseOrValue<BigNumberish>,
      _token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<string>;

    getTokenAccepted(
      accountId: PromiseOrValue<BigNumberish>,
      _token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    getTokenAllowance(
      accountId: PromiseOrValue<BigNumberish>,
      _spender: PromiseOrValue<string>,
      _token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    setActiveStrategyEndowmentState(
      accountId: PromiseOrValue<BigNumberish>,
      _strategy: PromiseOrValue<BytesLike>,
      _accepted: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;

    setClosingEndowmentState(
      accountId: PromiseOrValue<BigNumberish>,
      _closing: PromiseOrValue<boolean>,
      _closingBeneficiary: LibAccounts.BeneficiaryStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    setConfig(
      _config: AccountStorage.ConfigStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    setDaoTokenBalance(
      accountId: PromiseOrValue<BigNumberish>,
      _tokenBal: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setEndowmentDetails(
      accountId: PromiseOrValue<BigNumberish>,
      _endowment: AccountStorage.EndowmentStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    setEndowmentTokenBalance(
      accountId: PromiseOrValue<BigNumberish>,
      _token: PromiseOrValue<string>,
      _lockBal: PromiseOrValue<BigNumberish>,
      _liqBal: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setPriceFeed(
      accountId: PromiseOrValue<BigNumberish>,
      _token: PromiseOrValue<string>,
      _feed: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setTokenAccepted(
      accountId: PromiseOrValue<BigNumberish>,
      _token: PromiseOrValue<string>,
      _accepted: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;

    setTokenAllowance(
      accountId: PromiseOrValue<BigNumberish>,
      _spender: PromiseOrValue<string>,
      _token: PromiseOrValue<string>,
      _allowance: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "AdminChanged(address,address)"(
      previousAdmin?: null,
      newAdmin?: null
    ): AdminChangedEventFilter;
    AdminChanged(
      previousAdmin?: null,
      newAdmin?: null
    ): AdminChangedEventFilter;

    "BeaconUpgraded(address)"(
      beacon?: PromiseOrValue<string> | null
    ): BeaconUpgradedEventFilter;
    BeaconUpgraded(
      beacon?: PromiseOrValue<string> | null
    ): BeaconUpgradedEventFilter;

    "Upgraded(address)"(
      implementation?: PromiseOrValue<string> | null
    ): UpgradedEventFilter;
    Upgraded(
      implementation?: PromiseOrValue<string> | null
    ): UpgradedEventFilter;
  };

  estimateGas: {
    getActiveStrategyEndowmentState(
      accountId: PromiseOrValue<BigNumberish>,
      _strategy: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getAdmin(overrides?: CallOverrides): Promise<BigNumber>;

    getClosingEndowmentState(
      accountId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getConfig(overrides?: CallOverrides): Promise<BigNumber>;

    getDaoTokenBalance(
      accountId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getEndowmentDetails(
      accountId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getEndowmentTokenBalance(
      accountId: PromiseOrValue<BigNumberish>,
      _token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getImplementation(overrides?: CallOverrides): Promise<BigNumber>;

    getPriceFeed(
      accountId: PromiseOrValue<BigNumberish>,
      _token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTokenAccepted(
      accountId: PromiseOrValue<BigNumberish>,
      _token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTokenAllowance(
      accountId: PromiseOrValue<BigNumberish>,
      _spender: PromiseOrValue<string>,
      _token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    setActiveStrategyEndowmentState(
      accountId: PromiseOrValue<BigNumberish>,
      _strategy: PromiseOrValue<BytesLike>,
      _accepted: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setClosingEndowmentState(
      accountId: PromiseOrValue<BigNumberish>,
      _closing: PromiseOrValue<boolean>,
      _closingBeneficiary: LibAccounts.BeneficiaryStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setConfig(
      _config: AccountStorage.ConfigStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setDaoTokenBalance(
      accountId: PromiseOrValue<BigNumberish>,
      _tokenBal: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setEndowmentDetails(
      accountId: PromiseOrValue<BigNumberish>,
      _endowment: AccountStorage.EndowmentStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setEndowmentTokenBalance(
      accountId: PromiseOrValue<BigNumberish>,
      _token: PromiseOrValue<string>,
      _lockBal: PromiseOrValue<BigNumberish>,
      _liqBal: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setPriceFeed(
      accountId: PromiseOrValue<BigNumberish>,
      _token: PromiseOrValue<string>,
      _feed: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setTokenAccepted(
      accountId: PromiseOrValue<BigNumberish>,
      _token: PromiseOrValue<string>,
      _accepted: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setTokenAllowance(
      accountId: PromiseOrValue<BigNumberish>,
      _spender: PromiseOrValue<string>,
      _token: PromiseOrValue<string>,
      _allowance: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    getActiveStrategyEndowmentState(
      accountId: PromiseOrValue<BigNumberish>,
      _strategy: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getAdmin(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getClosingEndowmentState(
      accountId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getConfig(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getDaoTokenBalance(
      accountId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getEndowmentDetails(
      accountId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getEndowmentTokenBalance(
      accountId: PromiseOrValue<BigNumberish>,
      _token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getImplementation(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getPriceFeed(
      accountId: PromiseOrValue<BigNumberish>,
      _token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTokenAccepted(
      accountId: PromiseOrValue<BigNumberish>,
      _token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTokenAllowance(
      accountId: PromiseOrValue<BigNumberish>,
      _spender: PromiseOrValue<string>,
      _token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    setActiveStrategyEndowmentState(
      accountId: PromiseOrValue<BigNumberish>,
      _strategy: PromiseOrValue<BytesLike>,
      _accepted: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setClosingEndowmentState(
      accountId: PromiseOrValue<BigNumberish>,
      _closing: PromiseOrValue<boolean>,
      _closingBeneficiary: LibAccounts.BeneficiaryStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setConfig(
      _config: AccountStorage.ConfigStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setDaoTokenBalance(
      accountId: PromiseOrValue<BigNumberish>,
      _tokenBal: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setEndowmentDetails(
      accountId: PromiseOrValue<BigNumberish>,
      _endowment: AccountStorage.EndowmentStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setEndowmentTokenBalance(
      accountId: PromiseOrValue<BigNumberish>,
      _token: PromiseOrValue<string>,
      _lockBal: PromiseOrValue<BigNumberish>,
      _liqBal: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setPriceFeed(
      accountId: PromiseOrValue<BigNumberish>,
      _token: PromiseOrValue<string>,
      _feed: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setTokenAccepted(
      accountId: PromiseOrValue<BigNumberish>,
      _token: PromiseOrValue<string>,
      _accepted: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setTokenAllowance(
      accountId: PromiseOrValue<BigNumberish>,
      _spender: PromiseOrValue<string>,
      _token: PromiseOrValue<string>,
      _allowance: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
