/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Signer,
  utils,
  Contract,
  ContractFactory,
  BigNumberish,
  Overrides,
} from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../common";
import type {
  DummyVault,
  DummyVaultInterface,
} from "../../../contracts/test/DummyVault";

const _abi = [
  {
    inputs: [
      {
        internalType: "enum IVault.VaultType",
        name: "_type",
        type: "uint8",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "uint32",
        name: "accountId",
        type: "uint32",
      },
      {
        indexed: false,
        internalType: "enum IVault.VaultType",
        name: "vaultType",
        type: "uint8",
      },
      {
        indexed: false,
        internalType: "address",
        name: "tokenDeposited",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "amtDeposited",
        type: "uint256",
      },
    ],
    name: "DepositMade",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "uint32[]",
        name: "accountIds",
        type: "uint32[]",
      },
    ],
    name: "Harvest",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "uint32",
        name: "accountId",
        type: "uint32",
      },
      {
        indexed: false,
        internalType: "enum IVault.VaultType",
        name: "vaultType",
        type: "uint8",
      },
      {
        indexed: false,
        internalType: "address",
        name: "tokenRedeemed",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "amtRedeemed",
        type: "uint256",
      },
    ],
    name: "Redemption",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "uint32",
        name: "accountId",
        type: "uint32",
      },
      {
        internalType: "address",
        name: "token",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amt",
        type: "uint256",
      },
    ],
    name: "deposit",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [],
    name: "getVaultType",
    outputs: [
      {
        internalType: "enum IVault.VaultType",
        name: "",
        type: "uint8",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint32[]",
        name: "accountIds",
        type: "uint32[]",
      },
    ],
    name: "harvest",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint32",
        name: "accountId",
        type: "uint32",
      },
      {
        internalType: "address",
        name: "token",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amt",
        type: "uint256",
      },
    ],
    name: "redeem",
    outputs: [
      {
        components: [
          {
            internalType: "uint256",
            name: "amount",
            type: "uint256",
          },
          {
            internalType: "enum IRouter.VaultActionStatus",
            name: "status",
            type: "uint8",
          },
        ],
        internalType: "struct IRouter.RedemptionResponse",
        name: "",
        type: "tuple",
      },
    ],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint32",
        name: "accountId",
        type: "uint32",
      },
    ],
    name: "redeemAll",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_addr",
        type: "address",
      },
    ],
    name: "setDefaultToken",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_newDummyAmt",
        type: "uint256",
      },
    ],
    name: "setDummyAmt",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_addr",
        type: "address",
      },
    ],
    name: "setRouterAddress",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x60803461006557601f61061638819003918201601f19168301916001600160401b0383118484101761006a57808492602094604052833981010312610065575160028110156100655760ff80196000541691161760005560405161059590816100818239f35b600080fd5b634e487b7160e01b600052604160045260246000fdfe608060409080825260048036101561001657600080fd5b600092833560e01c92836320dcd90b1461040b5750826341cb87fc146103cd5782634dc23772146102c457826375baf37f1461029d57826388bb447b146101cf578263c2bba643146101b1578263c2ec3be6146100bd57505063e1e32f991461007e57600080fd5b346100ba5760203660031901126100ba57610097610458565b8154610100600160a81b03191660089190911b610100600160a81b031617815580f35b80fd5b90915060203660031901126101ad5781359163ffffffff83168093036101a9578354600254835163095ea7b360e01b815233938101938452602080850192909252929091839160409083900301908290889060081c6001600160a01b03165af1801561019f579360ff91602095610172575b505416917f09054fd059dd1ab4912997eda690b4a7ecb31dcd30b3b7811bd9dfd00bcf3235600254809461016985519283923090846104cd565b0390a251908152f35b61019190863d8111610198575b6101898183610525565b810190610547565b503861012f565b503d61017f565b82513d86823e3d90fd5b8380fd5b8280fd5b8382346101cb5760203660031901126101cb573560025580f35b5080fd5b909150346101ad57602091826003193601126101a95780359167ffffffffffffffff91828411610299573660238501121561029957830135918211610295573660248360051b8501011161029557918493602493519283948594930191865b82811061026357505050500390207f26f2b6f1bac51611060f933759e15a99c0180a82b38966e3d8f1a8af28bf49d48280a280f35b91939092809550359063ffffffff82168092036102915790815285949083019390830192909160010161022e565b8780fd5b8480fd5b8580fd5b8390346101cb57816003193601126101cb576102c260ff6020935416915180926104aa565bf35b83826102cf36610473565b93908551926102dd846104f3565b8284526020938401839052865163095ea7b360e01b8152338682019081528086018890528590829081906040010381876001600160a01b0388165af180156103c3579163ffffffff917f09054fd059dd1ab4912997eda690b4a7ecb31dcd30b3b7811bd9dfd00bcf3235936103a6575b506103658860ff875416958b519485941696846104cd565b0390a2818551610374816104f3565b8581520160018152855194855251926005841015610393575050820152f35b634e487b7160e01b825260219052602490fd5b6103bc90873d8911610198576101898183610525565b508961034d565b88513d86823e3d90fd5b83346100ba5760203660031901126100ba576001600160a01b036103ef610458565b166bffffffffffffffffffffffff60a01b600154161760015580f35b6104527fc271c2371a8168d2f8d3117bb7fcd64db82ff075dc4eb21a0431554eabfc9fdd82879361043b36610473565b9063ffffffff60ff899894985416971696846104cd565b0390a280f35b600435906001600160a01b038216820361046e57565b600080fd5b606090600319011261046e5760043563ffffffff8116810361046e57906024356001600160a01b038116810361046e579060443590565b9060028210156104b75752565b634e487b7160e01b600052602160045260246000fd5b6040919493926104e18260608101976104aa565b6001600160a01b031660208201520152565b6040810190811067ffffffffffffffff82111761050f57604052565b634e487b7160e01b600052604160045260246000fd5b90601f8019910116810190811067ffffffffffffffff82111761050f57604052565b9081602091031261046e5751801515810361046e579056fea264697066735822122004da64b5252f38adeae966430931e3f874c0594affd0363adfc21340d3110ec564736f6c63430008120033";

type DummyVaultConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: DummyVaultConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class DummyVault__factory extends ContractFactory {
  constructor(...args: DummyVaultConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    _type: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<DummyVault> {
    return super.deploy(_type, overrides || {}) as Promise<DummyVault>;
  }
  override getDeployTransaction(
    _type: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(_type, overrides || {});
  }
  override attach(address: string): DummyVault {
    return super.attach(address) as DummyVault;
  }
  override connect(signer: Signer): DummyVault__factory {
    return super.connect(signer) as DummyVault__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): DummyVaultInterface {
    return new utils.Interface(_abi) as DummyVaultInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): DummyVault {
    return new Contract(address, _abi, signerOrProvider) as DummyVault;
  }
}
