/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../../common";
import type {
  DonationMatchEmitter,
  DonationMatchEmitterInterface,
} from "../../../../contracts/normalized_endowment/donation-match/DonationMatchEmitter";

const _abi = [
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "donationMatch",
        type: "address",
      },
      {
        indexed: false,
        internalType: "address",
        name: "tokenAddress",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "address",
        name: "accountsContract",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint32",
        name: "endowmentId",
        type: "uint32",
      },
      {
        indexed: false,
        internalType: "address",
        name: "donor",
        type: "address",
      },
    ],
    name: "DonationMatchExecuted",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "uint32",
        name: "endowmentId",
        type: "uint32",
      },
      {
        indexed: false,
        internalType: "address",
        name: "donationMatch",
        type: "address",
      },
      {
        components: [
          {
            internalType: "address",
            name: "reserveToken",
            type: "address",
          },
          {
            internalType: "address",
            name: "uniswapFactory",
            type: "address",
          },
          {
            internalType: "address",
            name: "usdcAddress",
            type: "address",
          },
          {
            internalType: "address",
            name: "registrarContract",
            type: "address",
          },
          {
            internalType: "uint24",
            name: "poolFee",
            type: "uint24",
          },
        ],
        indexed: false,
        internalType: "struct DonationMatchStorage.Config",
        name: "config",
        type: "tuple",
      },
    ],
    name: "DonationMatchInitialized",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "uint32",
        name: "endowmentId",
        type: "uint32",
      },
      {
        indexed: false,
        internalType: "address",
        name: "tokenAddress",
        type: "address",
      },
      {
        indexed: false,
        internalType: "address",
        name: "spender",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "Erc20ApprovalGiven",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "uint32",
        name: "endowmentId",
        type: "uint32",
      },
      {
        indexed: false,
        internalType: "address",
        name: "tokenAddress",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "Erc20Burned",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "uint32",
        name: "endowmentId",
        type: "uint32",
      },
      {
        indexed: false,
        internalType: "address",
        name: "tokenAddress",
        type: "address",
      },
      {
        indexed: false,
        internalType: "address",
        name: "recipient",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "Erc20Transfer",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "uint32",
        name: "endowmentId",
        type: "uint32",
      },
      {
        internalType: "address",
        name: "tokenAddress",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "burnErC20",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "tokenAddress",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
      {
        internalType: "address",
        name: "accountsContract",
        type: "address",
      },
      {
        internalType: "uint32",
        name: "endowmentId",
        type: "uint32",
      },
      {
        internalType: "address",
        name: "donor",
        type: "address",
      },
    ],
    name: "executeDonorMatch",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint32",
        name: "endowmentId",
        type: "uint32",
      },
      {
        internalType: "address",
        name: "tokenAddress",
        type: "address",
      },
      {
        internalType: "address",
        name: "recipient",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "giveApprovalErC20",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "accountscontract",
        type: "address",
      },
    ],
    name: "initDonationMatchEmiiter",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint32",
        name: "endowmentId",
        type: "uint32",
      },
      {
        internalType: "address",
        name: "donationMatch",
        type: "address",
      },
      {
        components: [
          {
            internalType: "address",
            name: "reserveToken",
            type: "address",
          },
          {
            internalType: "address",
            name: "uniswapFactory",
            type: "address",
          },
          {
            internalType: "address",
            name: "usdcAddress",
            type: "address",
          },
          {
            internalType: "address",
            name: "registrarContract",
            type: "address",
          },
          {
            internalType: "uint24",
            name: "poolFee",
            type: "uint24",
          },
        ],
        internalType: "struct DonationMatchStorage.Config",
        name: "config",
        type: "tuple",
      },
    ],
    name: "initializeDonationMatch",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    name: "isDonationMatch",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint32",
        name: "endowmentId",
        type: "uint32",
      },
      {
        internalType: "address",
        name: "tokenAddress",
        type: "address",
      },
      {
        internalType: "address",
        name: "recipient",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "transferErC20",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x608080604052346100205760ff196000541660005561060390816100268239f35b600080fdfe604060808152600436101561001357600080fd5b600090813560e01c80631a3613e2146104585780633adaa5ae146103735780635ec1bbd214610336578063a6692aa314610285578063b428cda614610251578063d8501c40146101c65763f46d05b51461006c57600080fd5b346101a25760e03660031901126101a2576100856104dc565b61008d6104f4565b9060a03660431901126101c257825160a0810181811067ffffffffffffffff8211176101ae5784526100bd610520565b8152606435906001600160a01b0380831683036101aa57602082019283526100e3610536565b9186810192835260a4359082821682036101a6576060810191825260c435938962ffffff9687871687036101a2578a86858196947ffe737400308553f1d002c56158f30ef401c7c64cff3884ad105b616b632527509e8360e09f60808299019d8e5261015682855460081c163314610592565b1691828152600160205220600160ff1982541617905563ffffffff84519d168d5260208d01525116908a01525116606088015251166080860152511660a0840152511660c0820152a180f35b5080fd5b8880fd5b8680fd5b634e487b7160e01b86526041600452602486fd5b8380fd5b50346101a25761024b7f87724927f9e99dbea4a9f012e0ff8d2d4eed13785c4d470f184272bbf1e38049916101fa3661054c565b91949293338852600160205261021560ff828a205416610592565b5163ffffffff90941684526001600160a01b03948516602085015293909316604083015260608201929092529081906080820190565b0390a180f35b50346101a25761024b7fc4e08d3abb27e5a4e2e6084e41721cc61592b72483353130376cb092d4a03764916101fa3661054c565b50346101a25760a03660031901126101a25761029f61050a565b906102a8610520565b6064359163ffffffff8316809303610332577f232f9587f6442fe8817b59685200e1ec787801749ea7a58ac3819b15dcb9d7559360c0936102e7610536565b9133885260016020526102ff60ff858a205416610592565b83519433865260018060a01b03948580931660208801526024359087015216606085015260808401521660a0820152a180f35b8480fd5b50346101a25760203660031901126101a25760209160ff9082906001600160a01b0361036061050a565b1681526001855220541690519015158152f35b5090346104555760203660031901126104555761038e61050a565b6001600160a01b038116156104075781549060ff82166103cd576001600160a81b031990911660089190911b610100600160a81b031617600117815580f35b835162461bcd60e51b8152602060048201526013602482015272105b1c9958591e481a5b9a5d1a585b1a5e9959606a1b6044820152606490fd5b825162461bcd60e51b815260206004820152602160248201527f496e76616c6964206163636f756e747320636f6e7472616374206164647265736044820152607360f81b6064820152608490fd5b80fd5b50346101a25760603660031901126101a25760607fdb578fc99090936a6a779095ed5c9001e3d6e60db24dabff92dac73a925bfddb916104966104dc565b9061049f6104f4565b33865260016020526104b660ff8388205416610592565b815163ffffffff9390931683526001600160a01b0316602083015260443590820152a180f35b6004359063ffffffff821682036104ef57565b600080fd5b602435906001600160a01b03821682036104ef57565b600435906001600160a01b03821682036104ef57565b604435906001600160a01b03821682036104ef57565b608435906001600160a01b03821682036104ef57565b60809060031901126104ef5760043563ffffffff811681036104ef57906001600160a01b039060243582811681036104ef579160443590811681036104ef579060643590565b1561059957565b60405162461bcd60e51b815260206004820152600c60248201526b155b985d5d1a1bdc9a5e995960a21b6044820152606490fdfea26469706673582212204b513f7da3939a246a3f212b63ba145b965a1c13f292631e088ab5722413ab0d64736f6c63430008120033";

type DonationMatchEmitterConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: DonationMatchEmitterConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class DonationMatchEmitter__factory extends ContractFactory {
  constructor(...args: DonationMatchEmitterConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<DonationMatchEmitter> {
    return super.deploy(overrides || {}) as Promise<DonationMatchEmitter>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): DonationMatchEmitter {
    return super.attach(address) as DonationMatchEmitter;
  }
  override connect(signer: Signer): DonationMatchEmitter__factory {
    return super.connect(signer) as DonationMatchEmitter__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): DonationMatchEmitterInterface {
    return new utils.Interface(_abi) as DonationMatchEmitterInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): DonationMatchEmitter {
    return new Contract(
      address,
      _abi,
      signerOrProvider
    ) as DonationMatchEmitter;
  }
}
