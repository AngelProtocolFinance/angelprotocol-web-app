/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../../../common";
import type {
  DummyStakingRewards,
  DummyStakingRewardsInterface,
} from "../../../../../contracts/integrations/goldfinch/test/DummyStakingRewards";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "_rewardToken",
        type: "address",
      },
      {
        internalType: "address",
        name: "_stakeToken",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "owner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "approved",
        type: "address",
      },
      {
        indexed: true,
        internalType: "uint256",
        name: "tokenId",
        type: "uint256",
      },
    ],
    name: "Approval",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "owner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "operator",
        type: "address",
      },
      {
        indexed: false,
        internalType: "bool",
        name: "approved",
        type: "bool",
      },
    ],
    name: "ApprovalForAll",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        indexed: true,
        internalType: "uint256",
        name: "tokenId",
        type: "uint256",
      },
    ],
    name: "Transfer",
    type: "event",
  },
  {
    inputs: [],
    name: "accumulatedRewardsPerToken",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "tokenId",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "addToStake",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "tokenId",
        type: "uint256",
      },
    ],
    name: "approve",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    name: "balanceByTokenId",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "owner",
        type: "address",
      },
    ],
    name: "balanceOf",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "nftRecipient",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "fiduAmount",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "usdcAmount",
        type: "uint256",
      },
    ],
    name: "depositToveAndStakeFrom",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "tokenId",
        type: "uint256",
      },
    ],
    name: "getApproved",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "tokenId",
        type: "uint256",
      },
    ],
    name: "getPosition",
    outputs: [
      {
        components: [
          {
            internalType: "uint256",
            name: "amount",
            type: "uint256",
          },
          {
            components: [
              {
                internalType: "uint256",
                name: "totalUnvested",
                type: "uint256",
              },
              {
                internalType: "uint256",
                name: "totalVested",
                type: "uint256",
              },
              {
                internalType: "uint256",
                name: "totalPreviouslyVested",
                type: "uint256",
              },
              {
                internalType: "uint256",
                name: "totalClaimed",
                type: "uint256",
              },
              {
                internalType: "uint256",
                name: "startTime",
                type: "uint256",
              },
              {
                internalType: "uint256",
                name: "endTime",
                type: "uint256",
              },
            ],
            internalType: "struct StakingRewardsVesting.Rewards",
            name: "rewards",
            type: "tuple",
          },
          {
            internalType: "uint256",
            name: "leverageMultiplier",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "lockedUntil",
            type: "uint256",
          },
          {
            internalType: "enum IStakingRewards.StakedPositionType",
            name: "positionType",
            type: "uint8",
          },
          {
            internalType: "uint256",
            name: "unsafeEffectiveMultiplier",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "unsafeBaseTokenExchangeRate",
            type: "uint256",
          },
        ],
        internalType: "struct IStakingRewards.StakedPosition",
        name: "",
        type: "tuple",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "tokenId",
        type: "uint256",
      },
    ],
    name: "getReward",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "owner",
        type: "address",
      },
      {
        internalType: "address",
        name: "operator",
        type: "address",
      },
    ],
    name: "isApprovedForAll",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "tokenId",
        type: "uint256",
      },
    ],
    name: "kick",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "lastUpdateTime",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "name",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "tokenId",
        type: "uint256",
      },
    ],
    name: "ownerOf",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    name: "rewardsByTokenId",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "tokenId",
        type: "uint256",
      },
    ],
    name: "safeTransferFrom",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "tokenId",
        type: "uint256",
      },
      {
        internalType: "bytes",
        name: "data",
        type: "bytes",
      },
    ],
    name: "safeTransferFrom",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "operator",
        type: "address",
      },
      {
        internalType: "bool",
        name: "approved",
        type: "bool",
      },
    ],
    name: "setApprovalForAll",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "tokenId",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "setBalanceByToken",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "num",
        type: "uint256",
      },
    ],
    name: "setCounter",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "tokenId",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "setRewardByToken",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
      {
        internalType: "enum IStakingRewards.StakedPositionType",
        name: "",
        type: "uint8",
      },
    ],
    name: "stake",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "tokenId",
        type: "uint256",
      },
    ],
    name: "stakedBalanceOf",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes4",
        name: "interfaceId",
        type: "bytes4",
      },
    ],
    name: "supportsInterface",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "symbol",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "tokenId",
        type: "uint256",
      },
    ],
    name: "tokenURI",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "tokenId",
        type: "uint256",
      },
    ],
    name: "transferFrom",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "tokenId",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "unstake",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x60803462000359576001600160401b03601f601f196200189938819003838101831686019190858311878410176200034357808792604094855283398101031262000359576200004f846200035e565b926200005f60208096016200035e565b926200006a62000373565b926200007562000373565b9084519084821162000343576000918254966001978881811c9116801562000338575b8c8210146200032457908b8288859411620002ce575b50508b90878311600114620002695785926200025d575b5050600019600383901b1c191690871b1782555b8251948511620002495785548681811c911680156200023e575b8a8210146200022a57848111620001e2575b50889385116001146200017c57508394959697509262000170575b5050600019600383901b1c191690821b1790555b600980546001600160a01b039384166001600160a01b031991821617909155600a80549290931691161790556040516114f49081620003a58239f35b01519050388062000120565b8493929193169785845280842093905b898210620001ca575050838596979810620001b0575b505050811b01905562000134565b015160001960f88460031b161c19169055388080620001a2565b8087859682949686015181550195019301906200018c565b8683528983208580880160051c8201928c891062000220575b0160051c019087905b8281106200021457505062000105565b84815501879062000204565b92508192620001fb565b634e487b7160e01b83526022600452602483fd5b90607f1690620000f3565b634e487b7160e01b82526041600452602482fd5b015190503880620000c5565b908c91858b95168780528388209388905b828210620002b457505084116200029a575b505050811b018255620000d9565b015160001960f88460031b161c191690553880806200028c565b8484015186558d979095019493840193908101906200027a565b90919250858052878287209181860160051c83019386106200031a575b918b91869594930160051c01915b8281106200030b57508d9150620000ae565b8781558594508b9101620002f9565b92508192620002eb565b634e487b7160e01b85526022600452602485fd5b90607f169062000098565b634e487b7160e01b600052604160045260246000fd5b600080fd5b51906001600160a01b03821682036200035957565b60408051919082016001600160401b0381118382101762000343576040526004825263151154d560e21b602083015256fe60806040908082526004918236101561001757600080fd5b600091823560e01c90816301ffc9a714610d635750806306fdde0314610c98578063081812fc14610c78578063095ea7b314610b0a57806310087fb1146109565780631c4b774b146108f757806323b872dd146108cd578063259c5f25146108a557806338962186146102c75780633b7403dd1461088b57806342842e0e146108635780636352211e1461083257806370a082311461079d5780638bb5d9c314610783578063958c87f51461076557806395d89b411461064f5780639c65613a146103c85780639e2c8a5b146105a5578063a22cb465146104d5578063a83f5eef146104b7578063a9f4939d146103f0578063aa04295f146103c8578063b88d4fde1461033a578063c87b56dd146102cc578063c8f33c91146102c7578063ce0cf1a5146102b2578063e985e9c5146102655763eb02c3011461015957600080fd5b34610261576020918260031936011261025e578335916101776113c3565b508215610229576101866113c3565b9282526006845260a08183205494858552825195865280850151908151818801528101518387015282810151606087015260608101516080870152608081015182870152015160c085015282015160e084015260608201516101008401526080820151906002821015610216576101808460c0858561012084015260a08101516101408401520151610160820152f35b634e487b7160e01b815260218552602490fd5b5162461bcd60e51b8152808501849052601060248201526f125b9d985b1a59081d1bdad95b88125160821b6044820152606490fd5b80fd5b5080fd5b503461026157806003193601126102615760ff81602093610284610e0f565b61028c610e2a565b6001600160a01b0391821683526005875283832091168252855220549151911615158152f35b823461025e57602036600319011261025e5780f35b610e75565b5034610261576020366003190112610261576103096103046103369435600052600260205260018060a01b0360406000205416151590565b610f17565b81815161031581610ea7565b5280519161032283610ea7565b825251918291602083526020830190610dcf565b0390f35b508290346103c45760803660031901126103c457610356610e0f565b61035e610e2a565b846064359467ffffffffffffffff86116102615736602387011215610261578501359461039661038d87610efb565b95519586610ed9565b858552366024878301011161026157856103c196602460209301838801378501015260443591611029565b80f35b8280fd5b5082346103c45760203660031901126103c45760209282913581526006845220549051908152f35b5082346103c45761040036610e91565b600a5484516323b872dd60e01b815233858201908152306020808301919091526040820185905293969493919283918290036060019082908a906001600160a01b03165af180156104ad5761047f575b5084526006602052832090815492830180931161046c57505580f35b634e487b7160e01b845260119052602483fd5b61049f9060203d81116104a6575b6104978183610ed9565b81019061145a565b5085610450565b503d61048d565b83513d88823e3d90fd5b5034610261576104c636610e91565b91908352600660205282205580f35b508290346103c457806003193601126103c4576104f0610e0f565b90602435918215158093036105a1576001600160a01b03169233841461055f5750338452600560205280842083855260205280842060ff1981541660ff8416179055519081527f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c3160203392a380f35b6020606492519162461bcd60e51b8352820152601960248201527f4552433732313a20617070726f766520746f2063616c6c6572000000000000006044820152fd5b8480fd5b5034610261576105b436610e91565b908352600660205281832080549082820391821161063c5755600a54825163a9059cbb60e01b815233958101958652602086810193909352939484916001600160a01b0316908290879082906040015b03925af19081156106335750610618575080f35b61062f9060203d81116104a6576104978183610ed9565b5080f35b513d84823e3d90fd5b634e487b7160e01b855260118652602485fd5b50903461025e578060031936011261025e578151918160019283549384811c9181861695861561075b575b6020968785108114610748578899509688969785829a5291826000146107215750506001146106c6575b50505061033692916106b7910385610ed9565b51928284938452830190610dcf565b91908693508083527fb10e2d527612073b26eecdfd717e6a320cf44b4afac2b0732d9fcbe2b7fa0cf65b82841061070957505050820101816106b76103366106a4565b8054848a0186015288955087949093019281016106f0565b60ff19168782015293151560051b860190930193508492506106b7915061033690506106a4565b634e487b7160e01b835260228a52602483fd5b92607f169261067a565b50346102615761077436610e91565b91908352600760205282205580f35b828434610261576020366003190112610261573560085580f35b509134610261576020366003190112610261576001600160a01b036107c0610e0f565b169081156107dd5760208480858581526003845220549051908152f35b608490602085519162461bcd60e51b8352820152602960248201527f4552433732313a2061646472657373207a65726f206973206e6f7420612076616044820152683634b21037bbb732b960b91b6064820152fd5b50903461025e57602036600319011261025e575061085260209235610f63565b90516001600160a01b039091168152f35b5034610261576103c19061087636610e40565b9192519261088384610ea7565b858452611029565b823461025e57606036600319011261025e5761062f610e0f565b5082346103c45760203660031901126103c45760209282913581526007845220549051908152f35b823461025e576103c16108df36610e40565b916108f26108ed84336110c4565b610fc7565b61118c565b508290346103c45760203660031901126103c457600954823584526007602090815282852054835163a9059cbb60e01b8152339581019586528583019190915293909184916001600160a01b0390911690829087908290604001610604565b509134610261578260031936011261026157803592600260243510156103c457600a5481516323b872dd60e01b81523384820190815230602082810191909152604082018890529692879183916001600160a01b03169082908990829060600103925af18015610b0057610ae3575b506008546000198114610ad0576001018060085584526006855281842055600854913315610a905750600082815260026020526040902054610a13906001600160a01b031615155b15611472565b600082815260026020526040902054610a36906001600160a01b03161515610a0d565b3380845260038552818420805460010190558284526002855281842080546001600160a01b031916821790559051927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef8180a46008548152f35b8480606493519262461bcd60e51b845283015260248201527f4552433732313a206d696e7420746f20746865207a65726f20616464726573736044820152fd5b634e487b7160e01b855260118452602485fd5b610af990863d88116104a6576104978183610ed9565b50386109c5565b83513d87823e3d90fd5b5082346103c457816003193601126103c457610b24610e0f565b6024359290916001600160a01b0391908280610b3f87610f63565b16941693808514610c2b57803314908115610c0c575b5015610ba457848652602052842080546001600160a01b03191683179055610b7c83610f63565b167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9258480a480f35b6020608492519162461bcd60e51b8352820152603d60248201527f4552433732313a20617070726f76652063616c6c6572206973206e6f7420746f60448201527f6b656e206f776e6572206f7220617070726f76656420666f7220616c6c0000006064820152fd5b90508652600560205281862033875260205260ff828720541687610b55565b506020608492519162461bcd60e51b8352820152602160248201527f4552433732313a20617070726f76616c20746f2063757272656e74206f776e656044820152603960f91b6064820152fd5b50903461025e57602036600319011261025e575061085260209235610f89565b50903461025e578060031936011261025e5781519181825492600184811c91818616958615610d59575b6020968785108114610748578899509688969785829a529182600014610721575050600114610cfe5750505061033692916106b7910385610ed9565b91908693508280527f290decd9548b62a8d60345a988386fc84ba6bc95484008f6362f93160ef3e5635b828410610d4157505050820101816106b76103366106a4565b8054848a018601528895508794909301928101610d28565b92607f1692610cc2565b839085346103c45760203660031901126103c4573563ffffffff60e01b81168091036103c457602092506380ac58cd60e01b8114908115610dbe575b8115610dad575b5015158152f35b6301ffc9a760e01b14905083610da6565b635b5e139f60e01b81149150610d9f565b919082519283825260005b848110610dfb575050826000602080949584010152601f8019910116010190565b602081830181015184830182015201610dda565b600435906001600160a01b0382168203610e2557565b600080fd5b602435906001600160a01b0382168203610e2557565b6060906003190112610e25576001600160a01b03906004358281168103610e2557916024359081168103610e25579060443590565b34610e25576000366003190112610e2557602060405160008152f35b6040906003190112610e25576004359060243590565b6020810190811067ffffffffffffffff821117610ec357604052565b634e487b7160e01b600052604160045260246000fd5b90601f8019910116810190811067ffffffffffffffff821117610ec357604052565b67ffffffffffffffff8111610ec357601f01601f191660200190565b15610f1e57565b60405162461bcd60e51b815260206004820152601860248201527f4552433732313a20696e76616c696420746f6b656e20494400000000000000006044820152606490fd5b6000908152600260205260409020546001600160a01b0316610f86811515610f17565b90565b600081815260026020526040902054610fac906001600160a01b03161515610f17565b6000908152600460205260409020546001600160a01b031690565b15610fce57565b60405162461bcd60e51b815260206004820152602d60248201527f4552433732313a2063616c6c6572206973206e6f7420746f6b656e206f776e6560448201526c1c881bdc88185c1c1c9bdd9959609a1b6064820152608490fd5b9061104d93929161103d6108ed84336110c4565b61104883838361118c565b6112a2565b1561105457565b60405162461bcd60e51b81528061106d60048201611071565b0390fd5b60809060208152603260208201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560408201527131b2b4bb32b91034b6b83632b6b2b73a32b960711b60608201520190565b906001600160a01b0380806110d884610f63565b1693169183831493841561110b575b5083156110f5575b50505090565b61110191929350610f89565b16143880806110ef565b909350600052600560205260406000208260005260205260ff6040600020541692386110e7565b1561113957565b60405162461bcd60e51b815260206004820152602560248201527f4552433732313a207472616e736665722066726f6d20696e636f72726563742060448201526437bbb732b960d91b6064820152608490fd5b906111b49161119a84610f63565b6001600160a01b0393918416928492909183168414611132565b1691821561125157816111d1916111ca86610f63565b1614611132565b7fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60008481526004602052604081206bffffffffffffffffffffffff60a01b9081815416905583825260036020526040822060001981540190558482526040822060018154019055858252600260205284604083209182541617905580a4565b60405162461bcd60e51b8152602060048201526024808201527f4552433732313a207472616e7366657220746f20746865207a65726f206164646044820152637265737360e01b6064820152608490fd5b9293600093909291803b156113b8579484916112fc9660405180948193630a85bd0160e11b9788845233600485015260018060a01b0380921660248501526044840152608060648401528260209b8c976084830190610dcf565b0393165af1849181611378575b50611367575050503d60001461135f573d61132381610efb565b906113316040519283610ed9565b81528091833d92013e5b8051918261135c5760405162461bcd60e51b81528061106d60048201611071565b01fd5b50606061133b565b6001600160e01b0319161492509050565b9091508581813d83116113b1575b6113908183610ed9565b810103126105a157516001600160e01b0319811681036105a1579038611309565b503d611386565b505050915050600190565b604090815160e081019067ffffffffffffffff9181811083821117610ec3578452809360009283835281519060c0820190828210908211176114465791849160c09493825282815282602082015282828201528260608201528260808201528260a082015260208401528201528260608201528260808201528260a08201520152565b634e487b7160e01b85526041600452602485fd5b90816020910312610e2557518015158103610e255790565b1561147957565b60405162461bcd60e51b815260206004820152601c60248201527f4552433732313a20746f6b656e20616c7265616479206d696e746564000000006044820152606490fdfea264697066735822122064305b5c8e0eed39933c17f6ca5ea344a401b1101cd01c948c66114c3c0ea41864736f6c63430008120033";

type DummyStakingRewardsConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: DummyStakingRewardsConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class DummyStakingRewards__factory extends ContractFactory {
  constructor(...args: DummyStakingRewardsConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    _rewardToken: PromiseOrValue<string>,
    _stakeToken: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<DummyStakingRewards> {
    return super.deploy(
      _rewardToken,
      _stakeToken,
      overrides || {}
    ) as Promise<DummyStakingRewards>;
  }
  override getDeployTransaction(
    _rewardToken: PromiseOrValue<string>,
    _stakeToken: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(
      _rewardToken,
      _stakeToken,
      overrides || {}
    );
  }
  override attach(address: string): DummyStakingRewards {
    return super.attach(address) as DummyStakingRewards;
  }
  override connect(signer: Signer): DummyStakingRewards__factory {
    return super.connect(signer) as DummyStakingRewards__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): DummyStakingRewardsInterface {
    return new utils.Interface(_abi) as DummyStakingRewardsInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): DummyStakingRewards {
    return new Contract(address, _abi, signerOrProvider) as DummyStakingRewards;
  }
}
