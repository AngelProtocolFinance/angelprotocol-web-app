/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../../common";
import type {
  GFITrader,
  GFITraderInterface,
} from "../../../../contracts/integrations/goldfinch/GFITrader";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "_swapRouterAddr",
        type: "address",
      },
      {
        internalType: "address",
        name: "_gfi",
        type: "address",
      },
      {
        internalType: "address",
        name: "_weth9",
        type: "address",
      },
      {
        internalType: "address",
        name: "_usdc",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [],
    name: "GFI",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "USDC",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "WETH9",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "poolFee",
    outputs: [
      {
        internalType: "uint24",
        name: "",
        type: "uint24",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "amountIn",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "amountOutMin",
        type: "uint256",
      },
    ],
    name: "swapExactInputMultihop",
    outputs: [
      {
        internalType: "uint256",
        name: "amountOut",
        type: "uint256",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x6080346100b957601f61040f38819003918201601f19168301916001600160401b038311848410176100be578084926080946040528339810103126100b957610047816100d4565b90610054602082016100d4565b61006c6060610065604085016100d4565b93016100d4565b9060018060a01b03928380928160018060a01b0319971687600054161760005516856001541617600155168360025416176002551690600354161760035560405161032690816100e98239f35b600080fd5b634e487b7160e01b600052604160045260246000fd5b51906001600160a01b03821682036100b95756fe608060408181526004918236101561001657600080fd5b600092833560e01c918263034afe7b146102cb5750816304bd895b146100cb57508063089fe6aa146100af5780634aa4a4fc14610087576389a302711461005c57600080fd5b3461008357816003193601126100835760035490516001600160a01b039091168152602090f35b5080fd5b503461008357816003193601126100835760025490516001600160a01b039091168152602090f35b503461008357816003193601126100835760209051610bb88152f35b919050346102c757806003193601126102c7576001549260025490600354918351926bffffffffffffffffffffffff19918260209860601b16888601528261017760eb1b9182603488015260601b166037860152604b85015260601b16604e83015260428252608082019167ffffffffffffffff90808410828511176102b4576101208101848110838211176102a157868895869288959495528481528560a0860133815260c087019642885261010060e0820191863583520190602435825260018060a01b039889855416958d519c8d9863c04b8d5960e01b8a52890152519960a060248901528a51948560c48a0152869b5b868d106102835750601f9b5092859260e495928a98979588888b9889010152511660448601525160648501525160848401525160a48301528919998a91011681010301925af195861561027957839661021c575b87878751908152f35b9091929394955086923d8811610271575b601f84011685019182118583101761025e57508591849186528101031261025b575051903880808080610213565b80fd5b634e487b7160e01b845260419052602483fd5b3d935061022d565b85513d85823e3d90fd5b8c81018b0151998d0160e401999099529a89019a8d988d97506101bf565b634e487b7160e01b845260418752602484fd5b634e487b7160e01b835260418652602483fd5b8280fd5b8490346100835781600319360112610083576001546001600160a01b03168152602090f3fea26469706673582212201f78acabc504954a9aebe404f9865007cb99626b344b4ef55b943eb9afe1d7d964736f6c63430008120033";

type GFITraderConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: GFITraderConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class GFITrader__factory extends ContractFactory {
  constructor(...args: GFITraderConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    _swapRouterAddr: PromiseOrValue<string>,
    _gfi: PromiseOrValue<string>,
    _weth9: PromiseOrValue<string>,
    _usdc: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<GFITrader> {
    return super.deploy(
      _swapRouterAddr,
      _gfi,
      _weth9,
      _usdc,
      overrides || {}
    ) as Promise<GFITrader>;
  }
  override getDeployTransaction(
    _swapRouterAddr: PromiseOrValue<string>,
    _gfi: PromiseOrValue<string>,
    _weth9: PromiseOrValue<string>,
    _usdc: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(
      _swapRouterAddr,
      _gfi,
      _weth9,
      _usdc,
      overrides || {}
    );
  }
  override attach(address: string): GFITrader {
    return super.attach(address) as GFITrader;
  }
  override connect(signer: Signer): GFITrader__factory {
    return super.connect(signer) as GFITrader__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): GFITraderInterface {
    return new utils.Interface(_abi) as GFITraderInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): GFITrader {
    return new Contract(address, _abi, signerOrProvider) as GFITrader;
  }
}
