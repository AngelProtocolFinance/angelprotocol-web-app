/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../../common";
import type {
  StorageMultiSig,
  StorageMultiSigInterface,
} from "../../../../contracts/multisigs/storage.sol/StorageMultiSig";

const _abi = [
  {
    inputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    name: "confirmations",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    name: "isOwner",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    name: "owners",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "requireExecution",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "required",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "transactionCount",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    name: "transactions",
    outputs: [
      {
        internalType: "string",
        name: "title",
        type: "string",
      },
      {
        internalType: "string",
        name: "description",
        type: "string",
      },
      {
        internalType: "address",
        name: "destination",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
      {
        internalType: "bytes",
        name: "data",
        type: "bytes",
      },
      {
        internalType: "bool",
        name: "executed",
        type: "bool",
      },
      {
        internalType: "bytes",
        name: "metadata",
        type: "bytes",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
] as const;

const _bytecode =
  "0x60808060405234610016576103e9908161001c8239f35b600080fdfe6080604081815260048036101561001557600080fd5b600092833560e01c908163025e7c2714610229575080632f54bf6e146101eb5780633411c81c1461019d5780639ace38c2146100d7578063b77bf600146100b8578063b781694a146100905763dc8452cd1461007057600080fd5b3461008c578260031936011261008c5760209250549051908152f35b8280fd5b5050346100b457816003193601126100b45760209060ff6006541690519015158152f35b5080fd5b5050346100b457816003193601126100b4576020906005549051908152f35b503461008c57602036600319011261008c578082610160946101999335815280602052209061018461010883610282565b9461011560018501610282565b9260018060a01b03600286015416906101346003870154918701610282565b9161016e61014c600660ff60058b0154169901610282565b9685519b8c9b60e08d5260e08d0190610373565b908b820360208d0152610373565b9389015260608801528682036080880152610373565b91151560a085015283820360c0850152610373565b0390f35b503461008c578160031936011261008c576024356001600160a01b03811691908290036101e75760209360ff92849235825260018652828220908252855220541690519015158152f35b8380fd5b503461008c57602036600319011261008c57356001600160a01b0381169081900361008c57818360ff92602095526002855220541690519015158152f35b9250503461008c57602036600319011261008c573560035481101561008c5760039092527fc2575a0e9e593c00f959f8c92f12db2869c3395a3b0502d05e2516446f71f85b909101546001600160a01b03168152602090f35b9060405191600090805490600182811c91818416938415610369575b60209485851081146103555784895290811561033757506001146102fb575b50505050829003601f01601f1916820167ffffffffffffffff8111838210176102e557604052565b634e487b7160e01b600052604160045260246000fd5b909293506000528260002091836000935b8385106103235750505050830101388080806102bd565b80548886018301529301928490820161030c565b60ff191688860152505050151560051b8401019050388080806102bd565b634e487b7160e01b87526022600452602487fd5b92607f169261029e565b919082519283825260005b84811061039f575050826000602080949584010152601f8019910116010190565b60208183018101518483018201520161037e56fea2646970667358221220fe1ed7a80024071a7fe902877e3c18292a5de09e041df3e41eaa92de8a7a6e6964736f6c63430008120033";

type StorageMultiSigConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: StorageMultiSigConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class StorageMultiSig__factory extends ContractFactory {
  constructor(...args: StorageMultiSigConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<StorageMultiSig> {
    return super.deploy(overrides || {}) as Promise<StorageMultiSig>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): StorageMultiSig {
    return super.attach(address) as StorageMultiSig;
  }
  override connect(signer: Signer): StorageMultiSig__factory {
    return super.connect(signer) as StorageMultiSig__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): StorageMultiSigInterface {
    return new utils.Interface(_abi) as StorageMultiSigInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): StorageMultiSig {
    return new Contract(address, _abi, signerOrProvider) as StorageMultiSig;
  }
}
